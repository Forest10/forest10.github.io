{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/Butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/comment_bg.png","path":"img/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/post_loadding.svg","path":"img/post_loadding.svg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/icp.png","path":"img/icp.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/runtimeshow.js","path":"js/runtimeshow.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/baidupush.js","path":"js/baidupush.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/ClickShowText.js","path":"js/third-party/ClickShowText.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/activate-power-mode.js","path":"js/third-party/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/canvas-nest.js","path":"js/third-party/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/click_heart.js","path":"js/third-party/click_heart.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/fireworks.js","path":"js/third-party/fireworks.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/piao.js","path":"js/third-party/piao.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3737e7e7b7000f6ad968adc478ba1524c0f27226","modified":1583926290106},{"_id":"themes/Butterfly/README.md","hash":"f1ac7d050f35e4a9464351ebcf15b676ead024b2","modified":1614156544558},{"_id":"themes/Butterfly/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1575628859674},{"_id":"themes/Butterfly/_config.yml","hash":"c393d8f194abdff32b4f6994941b3eb40f63fe83","modified":1614156878982},{"_id":"themes/Butterfly/package.json","hash":"bb2c0eaf4ef276de6cd0d343a3639b32d9e690e5","modified":1575628859690},{"_id":"source/_data/link.yml","hash":"41875ede0091abc09a9aa4078bf41c1aacb18c90","modified":1575628859663},{"_id":"source/_posts/The-missing-trace.md","hash":"640122fee36001e62364673b7a560caf8966ef76","modified":1614156179008},{"_id":"source/_posts/Linux下为Tomcat安装APR.md","hash":"cf658970b2edb3303e76aabac1a85f519362e7e5","modified":1576484207604},{"_id":"source/_posts/Spring-aop-Trick.md","hash":"8b2dbe79b0dc87aa3af6dce20daacd3678582785","modified":1576050341898},{"_id":"source/_posts/SpringBoot集锦.md","hash":"baabd57ea7829891aa39cb68e13ed0273497572e","modified":1576484207605},{"_id":"source/_posts/jenkins几种远程构建方式.md","hash":"7563df16f19e96efbce7005040dc7f216b4086f3","modified":1614156179009},{"_id":"source/_posts/mysql高级.md","hash":"4ef139c897385e92612833917df390247661a2d4","modified":1614156179010},{"_id":"source/_posts/nginx-rewrite解决新旧API域名的统一.md","hash":"685b42e11c144fb1882854899eb971afc2ae84ec","modified":1614156179011},{"_id":"source/_posts/ss-heroku-vpn.md","hash":"5d26db357a12848b6164fd79512578f1daae872f","modified":1614156179011},{"_id":"source/_posts/妙用travis-ci实现gitee和github代码同步.md","hash":"09df60dba9507ebc63070e53fe4fc884af6ce542","modified":1614156179012},{"_id":"source/_posts/开发基本规范.md","hash":"b760f72aea185eca5eab5ee8ac1875f40121a17f","modified":1614156179013},{"_id":"source/_posts/苹果审核ipv6海外解决思路-About-APP-Store.md","hash":"2fcd687d56ca27b7347d52e2089803b5898e295e","modified":1614156179013},{"_id":"source/_posts/高性能MySql之Schema与数据类型优化.md","hash":"e42286c390c8cb1abd50ecd2f57abdc6422e31cd","modified":1614156179014},{"_id":"source/_posts/解决Mac不能写入Windows格式-NTFS-磁盘-命令行.md","hash":"c28d2caa68f9eeeed1c901606b7490bb08120649","modified":1576484207607},{"_id":"source/link/index.md","hash":"66b9fcd4241b89455872ff0150995d2e76a3ce7e","modified":1575628859673},{"_id":"source/categories/index.md","hash":"eb8cfdab12f8cebe679a1ec34399299bea664180","modified":1575894449758},{"_id":"source/about/index.md","hash":"8d38a1a64e2562af7f7283697814dfcb91053991","modified":1575895253341},{"_id":"source/tags/index.md","hash":"3811fc9894264704fdaed7069be26c18e4d1975c","modified":1575894261759},{"_id":"source/music/index.md","hash":"8fe03ff3a7bb4799f80d2eef4b30d81ddc383241","modified":1614156179015},{"_id":"themes/Butterfly/languages/default.yml","hash":"1a990cc62b7b8072122342778270f68b721e99d6","modified":1575628859674},{"_id":"themes/Butterfly/languages/en.yml","hash":"6bf2ae27e861889b2b55c443e624889f3efbb668","modified":1575628859674},{"_id":"themes/Butterfly/languages/zh-TW.yml","hash":"cd5b8be3bbf8368e69e6d83099547c54ac671307","modified":1575628859675},{"_id":"themes/Butterfly/languages/zh-CN.yml","hash":"0453c3d86a49436ec30c9e6e45d3d909ab15e4f8","modified":1575628859675},{"_id":"themes/Butterfly/layout/category.pug","hash":"42b9f24c6d8d7832338f67536456933126daf8e0","modified":1575628859675},{"_id":"themes/Butterfly/layout/archive.pug","hash":"2a8b01d66fb0c1f4eed0cec831e356acfde1b4e7","modified":1575628859675},{"_id":"themes/Butterfly/layout/flink.pug","hash":"b04fe6039a06c621f87d54f650fd9a5dd9a7b697","modified":1575628859675},{"_id":"themes/Butterfly/layout/index.pug","hash":"a027cfd8f61e29a623ed8ba977032f165812d9b0","modified":1575628859689},{"_id":"themes/Butterfly/scripts/gallery-tag.js","hash":"b9e7fe3e36336bec0e9dad7243456ac98ba63984","modified":1575628859691},{"_id":"themes/Butterfly/scripts/list_archives.js","hash":"099f49e5dd15c622fb24a96af9a20102cb05a205","modified":1575628859691},{"_id":"themes/Butterfly/layout/post.pug","hash":"4beb74df95f0e6965433f4d8a707ea2b3f2e59ea","modified":1575628859690},{"_id":"themes/Butterfly/layout/tag.pug","hash":"dfac75e6a8cb8ed3abfeb12f40944cb8e42f1328","modified":1575628859690},{"_id":"themes/Butterfly/layout/page.pug","hash":"dc2c6fcaf21d6e6036c6ada5f8147853305886f6","modified":1575628859690},{"_id":"themes/Butterfly/scripts/note.js","hash":"03d608278de2dc9c6b2af69e8d36c77c0272e2bf","modified":1575628859691},{"_id":"themes/Butterfly/scripts/post-lazyload.js","hash":"4e773c705f5b7f5f7d1f6cca875a0a1817d028de","modified":1575628859692},{"_id":"themes/Butterfly/scripts/random_cover.js","hash":"81d1d2ebc4b5022d701182a98383969715f7ca53","modified":1575628859692},{"_id":"themes/Butterfly/scripts/related_post.js","hash":"8641947fdd1d4aecc980423600c293d07221079f","modified":1575628859692},{"_id":"themes/Butterfly/scripts/replace-config.js","hash":"4acb5a4519e1b5a29c23c83d1f70c1e298931e30","modified":1575628859693},{"_id":"themes/Butterfly/scripts/url_check.js","hash":"f3b533517dc5fc6d49dd34103f1ad91dcd6d0e87","modified":1575628859693},{"_id":"themes/Butterfly/layout/includes/additional-js.pug","hash":"080a9688f97677512876c3b237d0aa4b6ef25638","modified":1575628859676},{"_id":"themes/Butterfly/layout/includes/aside.pug","hash":"6e421ec7964024f1e3ad10cb00d3808dc33c6c72","modified":1575628859676},{"_id":"themes/Butterfly/layout/includes/config.pug","hash":"0af86870edbb27dd13f572c6df7ceb5a183eec18","modified":1575628859677},{"_id":"themes/Butterfly/layout/includes/darkmode.pug","hash":"6e45c4dd45ed8037948639e30947886aff186f8b","modified":1575628859678},{"_id":"themes/Butterfly/layout/includes/footer.pug","hash":"2c099f1321bf5c8c8d6b4815a2f9e4f7e36dcd79","modified":1575628859678},{"_id":"themes/Butterfly/layout/includes/header.pug","hash":"554fd01ed2e8bba4484b3c41918163766a6a9063","modified":1575628859678},{"_id":"themes/Butterfly/layout/includes/head.pug","hash":"6e99eec5b24fdc9833e6a1a9491136bb5440d9ea","modified":1575628859678},{"_id":"themes/Butterfly/layout/includes/menu_item.pug","hash":"79d7cc492c00aecaffa262f9fc85d6960fcc1a15","modified":1575628859679},{"_id":"themes/Butterfly/layout/includes/index-js.pug","hash":"ff80a1e6328db5c7202375752bf6cb3a4da8f5bb","modified":1575628859679},{"_id":"themes/Butterfly/layout/includes/mobile-sidebar.pug","hash":"d248b089e707665036935139a7a69114afd6a108","modified":1575628859680},{"_id":"themes/Butterfly/layout/includes/layout.pug","hash":"df17fc6020dd2d384fc35ded6ae994f2382e0222","modified":1575628859679},{"_id":"themes/Butterfly/layout/includes/recent-posts.pug","hash":"3f71c6d05144c072c132f3442c2d8b43e271c48e","modified":1575628859682},{"_id":"themes/Butterfly/layout/includes/page_tag.pug","hash":"77806405a67ce97801f5b74adaa4c62f96b05572","modified":1575628859681},{"_id":"themes/Butterfly/layout/includes/nav.pug","hash":"9163ac68fd16a1a7dde2544afd877ddf42c1da2c","modified":1575628859681},{"_id":"themes/Butterfly/layout/includes/reward.pug","hash":"ca8596e1ac8edff54be56d2996daadd104057e16","modified":1575628859682},{"_id":"themes/Butterfly/layout/includes/pagination.pug","hash":"9513eb607ca27d5f4a1542b9d900368eb0a4b984","modified":1575628859681},{"_id":"themes/Butterfly/layout/includes/rightside.pug","hash":"8382eefaa4cef5b7e198f67d1a33489ec1ed80c8","modified":1575628859682},{"_id":"themes/Butterfly/layout/includes/sidebar.pug","hash":"b076fa6fd08dbcfd743a4f5982f89ad84791573a","modified":1575628859685},{"_id":"themes/Butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1575628859706},{"_id":"themes/Butterfly/source/css/index.styl","hash":"8ab00778fb1f9d688b8bfee50b98273f85769a09","modified":1575628859705},{"_id":"themes/Butterfly/source/img/404.jpg","hash":"8cb144815552af8ca374dda8a11c14f6223cea29","modified":1575628859706},{"_id":"themes/Butterfly/source/css/var.styl","hash":"6c67b8c4dcdb74da54acb5eaa9ce67f1db3f3a4a","modified":1575628859705},{"_id":"themes/Butterfly/source/img/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1575628859716},{"_id":"themes/Butterfly/source/img/favicon.ico","hash":"47877628a0f0e0f06430845b0e3a75e0ba1361ce","modified":1575628859717},{"_id":"themes/Butterfly/source/img/post_loadding.svg","hash":"549c58cd09dbeefd573ce10646c49ded8bcc48ec","modified":1575628859720},{"_id":"themes/Butterfly/source/img/icp.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1575628859719},{"_id":"themes/Butterfly/source/js/runtimeshow.js","hash":"f686d28d62b6f65de47713a9da70a461a683a45d","modified":1575628859721},{"_id":"themes/Butterfly/source/js/main.js","hash":"bdcf3232456a179d7e5ce3ca211d10dd8a90513d","modified":1575628859720},{"_id":"themes/Butterfly/source/js/baidupush.js","hash":"276a58782b574ec42bf434e4e8bea623437634d4","modified":1575628859720},{"_id":"themes/Butterfly/source/js/tw_cn.js","hash":"602944743365332d3918c77f678f8ba45a665540","modified":1575628859727},{"_id":"themes/Butterfly/source/js/utils.js","hash":"95374853ae7293304091e60f87608e659e217abe","modified":1575628859727},{"_id":"themes/Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1575628859719},{"_id":"themes/Butterfly/layout/includes/comments/disqus.pug","hash":"37357152952f1d8f7f9eac390baaae29647e8b69","modified":1575628859676},{"_id":"themes/Butterfly/layout/includes/comments/gitalk.pug","hash":"fde38da051e2e46bafd74ccf8039322ee7cb072c","modified":1575628859676},{"_id":"themes/Butterfly/layout/includes/comments/index.pug","hash":"6e90c1c0862b8a052ff26c67e6d7e7b31f1bd74d","modified":1575628859677},{"_id":"themes/Butterfly/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1575628859677},{"_id":"themes/Butterfly/layout/includes/comments/valine.pug","hash":"c9bd1dbde21e179678e056236fe93700b2c64bc6","modified":1575628859677},{"_id":"themes/Butterfly/layout/includes/mixins/UI.pug","hash":"06134b88b95d3d68e7d05e51b95de109b7ca45f1","modified":1575628859680},{"_id":"themes/Butterfly/layout/includes/mixins/article-sort.pug","hash":"9909860d04248979313bed53e4979cee1acc99f8","modified":1575628859680},{"_id":"themes/Butterfly/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1575628859682},{"_id":"themes/Butterfly/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1575628859683},{"_id":"themes/Butterfly/layout/includes/search/local-search.pug","hash":"bc3d9694f3f3f3d4d95e8ccadbf6e27a61093c6d","modified":1575628859683},{"_id":"themes/Butterfly/layout/includes/share/addtoany.pug","hash":"bbf5b70460b17c4fecb9ee6880aa71cdb2d807a8","modified":1575628859684},{"_id":"themes/Butterfly/layout/includes/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1575628859683},{"_id":"themes/Butterfly/layout/includes/share/index.pug","hash":"c341aaa00113681b22f945f5004e6b22c8a0ca69","modified":1575628859684},{"_id":"themes/Butterfly/layout/includes/share/share-js.pug","hash":"8ab8fc87104dfe1de8107ec984b35c821813e310","modified":1575628859685},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-nest.pug","hash":"3d7a3654ae03fd2665ea355ee9eac48af0ee82af","modified":1575628859686},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"001f28c633d2ec2d5ef9ca047fb1fe61ffefd66f","modified":1575628859686},{"_id":"themes/Butterfly/layout/includes/third-party/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1575628859687},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"47892d5cec13b047bd38d1101574d47836bf67e9","modified":1575628859687},{"_id":"themes/Butterfly/layout/includes/third-party/mathjax.pug","hash":"6ccfaa776fc913ccf8b34825d918ab2b4d457434","modified":1575628859687},{"_id":"themes/Butterfly/layout/includes/widget/card_announcement.pug","hash":"531fde2c1409d638989615e906dea6ac1dd09fab","modified":1575628859688},{"_id":"themes/Butterfly/layout/includes/widget/card_archives.pug","hash":"ddd750cc1655980b4cf30393c84c34101f7f1e0d","modified":1575628859688},{"_id":"themes/Butterfly/layout/includes/widget/card_categories.pug","hash":"2ca228a61fba9046e8bf327ac340c50757b4a7d1","modified":1575628859688},{"_id":"themes/Butterfly/layout/includes/widget/card_author.pug","hash":"8b7fe70bcc1da9bf696b78fdc862441cbae04c0c","modified":1575628859688},{"_id":"themes/Butterfly/layout/includes/widget/card_recent_post.pug","hash":"b74b3e8138e4d3fb816667512f3c7438aa2ffaf6","modified":1575628859689},{"_id":"themes/Butterfly/layout/includes/widget/card_tags.pug","hash":"8ebd3686e9377cc7cc0899ad991eb3dd061aca06","modified":1575628859689},{"_id":"themes/Butterfly/layout/includes/widget/card_webinfo.pug","hash":"30e3dbedbd65b10942df90a21e1f635c852f555c","modified":1575628859689},{"_id":"themes/Butterfly/source/css/_global/index.styl","hash":"80b6acc7ba33b2608470b5de5625f7580eba0251","modified":1575628859694},{"_id":"themes/Butterfly/source/css/_highlight/diff.styl","hash":"b0079f6da761935b720d70dafd826ef62fad86d2","modified":1575628859695},{"_id":"themes/Butterfly/source/css/_highlight/highlight.styl","hash":"59235990acf34492f3d611f2623492f72d472e9a","modified":1575628859695},{"_id":"themes/Butterfly/source/css/_highlight/theme.styl","hash":"7d85860927afa1d93b4a39febff3d95a73de4c36","modified":1575628859696},{"_id":"themes/Butterfly/source/css/_layout/aside.styl","hash":"3a28e61810fa7411e4b2e90619675691e1753348","modified":1575628859697},{"_id":"themes/Butterfly/source/css/_layout/category.styl","hash":"f4901636997913ccd8beafc14d9c5eb0d0bedf16","modified":1575628859697},{"_id":"themes/Butterfly/source/css/_layout/flink.styl","hash":"a08837208f4e95e179fcb3382f518b0ec401e72f","modified":1575628859698},{"_id":"themes/Butterfly/source/css/_layout/comments.styl","hash":"fb2f8277fe8a23701072d69b63055a30ad8a30f3","modified":1575628859697},{"_id":"themes/Butterfly/source/css/_layout/footer.styl","hash":"fe00dd1cf2d7c7baa73da8d22269b5706bf37331","modified":1575628859698},{"_id":"themes/Butterfly/source/css/_layout/head.styl","hash":"23304388d54088242d3df97ba963461f8b093413","modified":1575628859698},{"_id":"themes/Butterfly/source/css/_layout/mobile-sidebar.styl","hash":"0cc4f7231f47268057f3e194daa53eccc0665544","modified":1575628859699},{"_id":"themes/Butterfly/source/css/_layout/note.styl","hash":"e897f0df4e0adb4f13f2633cb36c441c3ea31ee2","modified":1575628859699},{"_id":"themes/Butterfly/source/css/_layout/page.styl","hash":"ae57ac6d531b754a38aef16b3bf41ac683a8606a","modified":1575628859699},{"_id":"themes/Butterfly/source/css/_layout/pagination.styl","hash":"cbd9f79941482d137be4e8675ea75494d7fa5a92","modified":1575628859700},{"_id":"themes/Butterfly/source/css/_layout/post.styl","hash":"e3a19cf539e7de0b60d8b4f5aa9d8c52a6079b1c","modified":1575628859700},{"_id":"themes/Butterfly/source/css/_layout/readmode.styl","hash":"3e4bae0c800207614b7d63cf98b4439795f19e6d","modified":1575628859700},{"_id":"themes/Butterfly/source/css/_layout/relatedposts.styl","hash":"12d2dddd3dd330f5aaebd544c08c3669bab8ccc2","modified":1575628859701},{"_id":"themes/Butterfly/source/css/_layout/reward.styl","hash":"b6b58c836118d02d514cf901b49d31d9f0e895b5","modified":1575628859701},{"_id":"themes/Butterfly/source/css/_layout/rightside.styl","hash":"a4be553093aa910a68a3b7924e89889f53e679b5","modified":1575628859702},{"_id":"themes/Butterfly/source/css/_layout/sidebar.styl","hash":"b694f390f071441430179e9e0bf66b59b60c9f28","modified":1575628859702},{"_id":"themes/Butterfly/source/css/_layout/z-darkmode.styl","hash":"ea1eb9d961537c5cce1ee222cc43aa8f5dd06966","modified":1575628859702},{"_id":"themes/Butterfly/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1575628859704},{"_id":"themes/Butterfly/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1575628859704},{"_id":"themes/Butterfly/source/css/_search/algolia.styl","hash":"79d6df0b5345b36c03188722da706ad4df137c49","modified":1575628859703},{"_id":"themes/Butterfly/source/css/_search/index.styl","hash":"63cae4465ac54b71361c1795206534c7f2e6e5b1","modified":1575628859703},{"_id":"themes/Butterfly/source/css/_search/local-search.styl","hash":"0d082691551dd1d618945bb5029844b293450f47","modified":1575628859704},{"_id":"themes/Butterfly/source/js/search/algolia.js","hash":"09ef14408f98725970886e2851347596673f761e","modified":1575628859721},{"_id":"themes/Butterfly/source/js/third-party/ClickShowText.js","hash":"466a78f63eda0469701881b97560d8b488ef3ea9","modified":1575628859722},{"_id":"themes/Butterfly/source/js/search/local-search.js","hash":"70a3e44f5e83cb11f2c1fd5fd4515f5169ef57c7","modified":1575628859721},{"_id":"themes/Butterfly/source/js/third-party/activate-power-mode.js","hash":"e7ee1a178d613ba6293e4b622ea1b6ae16b0da45","modified":1575628859722},{"_id":"themes/Butterfly/source/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1575628859723},{"_id":"themes/Butterfly/source/js/third-party/canvas-ribbon.js","hash":"05fc79ebcf673e2d257583554eef62d162ade5e8","modified":1575628859723},{"_id":"themes/Butterfly/source/js/third-party/click_heart.js","hash":"7d577520a2afbe9a02f2f16455b6fd902ce58c75","modified":1575628859724},{"_id":"themes/Butterfly/source/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1575628859724},{"_id":"themes/Butterfly/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1575628859725},{"_id":"themes/Butterfly/source/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1575628859727},{"_id":"themes/Butterfly/source/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1575628859723},{"_id":"themes/Butterfly/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1575628859726},{"_id":"themes/Butterfly/source/img/avatar.png","hash":"dd1a6f2463665a2d3b89329f0fa2cde5ee823a2a","modified":1575628859709},{"_id":"public/link/index.html","hash":"a18cbedc9be79464005156d5856721dd947d2a42","modified":1614157020022},{"_id":"public/categories/index.html","hash":"bbc0c1fafb09534fa177bd3011ffe66bde5edb37","modified":1614157020022},{"_id":"public/about/index.html","hash":"bd0f2f477043f7c14238a064e75ffd71a37e4d89","modified":1614157020022},{"_id":"public/tags/index.html","hash":"2c446ea02f7d2a80f37a44d27c618a04f9cf4a58","modified":1614157020022},{"_id":"public/music/index.html","hash":"feb2848d7470d4551f674989cf77ba413e90a4dc","modified":1614157020022},{"_id":"public/2035/07/06/苹果审核ipv6海外解决思路-About-APP-Store/index.html","hash":"d3ec6a39d5126cc4459cb15730d16db9f64df449","modified":1614157020022},{"_id":"public/2019/12/11/Spring-aop-Trick/index.html","hash":"adc49da825ac85b90a1685709c60cdcb901e2038","modified":1614157020022},{"_id":"public/2019/12/10/Linux下为Tomcat安装APR/index.html","hash":"9d78e312246ad832746b2c3eab3813cb63b854cf","modified":1614157020022},{"_id":"public/2019/12/10/The-missing-trace/index.html","hash":"c8dd733ba5237e41b714bafd64203587540713e4","modified":1614157020022},{"_id":"public/2019/11/26/妙用travis-ci实现gitee和github代码同步/index.html","hash":"945e9b3afda93e7b6fb4211f0ae595cab22a28a1","modified":1614157020022},{"_id":"public/2019/02/11/解决Mac不能写入Windows格式-NTFS-磁盘-命令行/index.html","hash":"2a4e40a8c6055de7c82850079468d30780bc35ec","modified":1614157020022},{"_id":"public/2018/09/18/jenkins几种远程构建方式/index.html","hash":"ff75487a60eb0994ece36c246f804902024ff27f","modified":1614157020022},{"_id":"public/2018/07/17/高性能MySql之Schema与数据类型优化/index.html","hash":"adbf1ef17f362fc8064e12723e8fa217b0d36e62","modified":1614157020022},{"_id":"public/2018/07/08/SpringBoot集锦/index.html","hash":"89111c4cfa4c2744d88b48b7a9239fef8dbcff91","modified":1614157020022},{"_id":"public/2018/07/08/mysql高级/index.html","hash":"bcd347840e3868d1bd196ce9403d70127ff0c1a9","modified":1614157020022},{"_id":"public/2018/07/08/nginx-rewrite解决新旧API域名的统一/index.html","hash":"a0e3b3fc31473499e936ffc5139fe438bd4aebf8","modified":1614157020022},{"_id":"public/2018/01/28/开发基本规范/index.html","hash":"6822bd17937a707cb3b9f8fb50f4bc33eebc5703","modified":1614157020022},{"_id":"public/2018/07/08/ss-heroku-vpn/index.html","hash":"d7be1821ef4bcdbc0106ef49db2599ee8580277f","modified":1614157020022},{"_id":"public/archives/index.html","hash":"bc1ee6f51fd5a19d59d0b8ce227c907d8721fb56","modified":1614157020022},{"_id":"public/archives/page/2/index.html","hash":"1c8370379213e2dfacb6dc3a2f3aba8aa36592b9","modified":1614157020022},{"_id":"public/archives/2018/index.html","hash":"c88201907c20c3ec76cb35b632a5a062322ccf89","modified":1614157020022},{"_id":"public/archives/2018/01/index.html","hash":"67b62044d285eb5005d4bb27640d97ff75e19004","modified":1614157020022},{"_id":"public/archives/2018/07/index.html","hash":"28b58b0fa13d4b794e52bf637dfb6d391f4f4ec0","modified":1614157020022},{"_id":"public/archives/2018/09/index.html","hash":"14daa3f06f0977989a1fdd1cfcd259803e7954b0","modified":1614157020022},{"_id":"public/archives/2019/index.html","hash":"27b4c58faeeac0acdaac4280d7dcf4bbb59c0d8a","modified":1614157020022},{"_id":"public/archives/2019/02/index.html","hash":"d4bc7114396824b067a7fefbeb2af77c2627710a","modified":1614157020022},{"_id":"public/archives/2019/11/index.html","hash":"c07da32d6d64817767fa84bbac710657f4fe8840","modified":1614157020022},{"_id":"public/archives/2019/12/index.html","hash":"9e9d7f6a2a4c8e12522da6a4c56baed97a398299","modified":1614157020022},{"_id":"public/archives/2035/index.html","hash":"e2cbad6fede1e3adc08923a6dd92b97fab28cd46","modified":1614157020022},{"_id":"public/archives/2035/07/index.html","hash":"60e5bde1cbe78e1114eb364cc9451030114118ce","modified":1614157020022},{"_id":"public/categories/tool/index.html","hash":"0caf9a49ce736950e3535acf054819cb0eb62c6c","modified":1614157020022},{"_id":"public/categories/tool/vpn/index.html","hash":"da0d40141c145e8173faf4ed0d5a12970e64f4b4","modified":1614157020022},{"_id":"public/categories/sql/index.html","hash":"682ca6b4b7d461441569afab9494f6feb57931ae","modified":1614157020022},{"_id":"public/categories/tool/ci/index.html","hash":"24d1ecf4d5ee97d56482a420c6f86ffb4dd162ea","modified":1614157020022},{"_id":"public/categories/sql/mysql/index.html","hash":"533e0008ca9fb5e04cecd3a9382bdb84b1ac6fc2","modified":1614157020022},{"_id":"public/index.html","hash":"c53eb334a806e0949c338566acd62272f5f0bc77","modified":1614157020022},{"_id":"public/tags/JVM/index.html","hash":"2c2e87b5a823f277e164d578e065a41e0bf97a6e","modified":1614157020022},{"_id":"public/tags/LINUX/index.html","hash":"13a94ebc60e9b7f24865ac8854709b8d312957fb","modified":1614157020022},{"_id":"public/page/2/index.html","hash":"a64fe1bd2fc22a870e257d253a30859d6ad6bc60","modified":1614157020022},{"_id":"public/tags/TOMCAT/index.html","hash":"8d5242c6dedaf90bbbb8b9b42954ace12fa623b5","modified":1614157020022},{"_id":"public/tags/APR/index.html","hash":"6d659aad8c409e7fe7a7deb065f78d38f3fd2b9a","modified":1614157020022},{"_id":"public/tags/Spring/index.html","hash":"61f68c29fccfd62268d3a07fdddf364bdc20e631","modified":1614157020022},{"_id":"public/tags/AOP/index.html","hash":"f7a6fef28e5391479559c3f3e2fb2759853b5bfb","modified":1614157020022},{"_id":"public/tags/trick/index.html","hash":"817cfdd87554ed556484282344d9adf280e01909","modified":1614157020022},{"_id":"public/tags/SpringBoot/index.html","hash":"5ae5c954a337138defa7ffb6f2306ac408324e13","modified":1614157020022},{"_id":"public/tags/ci/index.html","hash":"b455cfa3ade1781114c6432dfd7dc97b65130b53","modified":1614157020022},{"_id":"public/tags/jenkins/index.html","hash":"524c8efb42d87ab785cc56e1b70da7f90d0dd782","modified":1614157020022},{"_id":"public/tags/backend/index.html","hash":"4c3b8d65819939676570412e203a580e97968577","modified":1614157020022},{"_id":"public/tags/Mysql/index.html","hash":"5185c741658a6572d015406df824a4d781fea8ed","modified":1614157020022},{"_id":"public/tags/Nginx/index.html","hash":"f42eb32ceb97e98a1d084639834c40fe1627744a","modified":1614157020022},{"_id":"public/tags/vpn/index.html","hash":"44d10426a71cbeb8dd82225d818dced03aad7a23","modified":1614157020022},{"_id":"public/tags/google/index.html","hash":"d471a0fbeda33713261d6b053a69baca0c78a93e","modified":1614157020022},{"_id":"public/tags/gitee/index.html","hash":"84db435192f76773eb19d5abbb519cb87d775eae","modified":1614157020022},{"_id":"public/tags/oschina/index.html","hash":"98117cde56fcebd9142a526c59ea606d55d971f4","modified":1614157020022},{"_id":"public/tags/github/index.html","hash":"8f89773ca14e37a01e4a1e4f846b9fd73bef532d","modified":1614157020022},{"_id":"public/tags/travis-ci/index.html","hash":"ae2ba4a1c27feb9a977d6d9ef64351f5dc612be2","modified":1614157020022},{"_id":"public/tags/develop/index.html","hash":"69128db8b7febaef5be3565eb200464a872adc1e","modified":1614157020022},{"_id":"public/tags/App-Store/index.html","hash":"0ecfdf2fc21223c5c62778a95a8676c23487d002","modified":1614157020022},{"_id":"public/tags/mysql/index.html","hash":"5089becca1eba8aaca8bcc5dcd0a8d0e50a3e6f2","modified":1614157020022},{"_id":"public/tags/MAC-NTFS/index.html","hash":"163afe2c12f3a66d5c08b4e8e1ee5c92ebfa3e52","modified":1614157020022},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1614157020022},{"_id":"public/img/404.jpg","hash":"8cb144815552af8ca374dda8a11c14f6223cea29","modified":1614157020022},{"_id":"public/img/post_loadding.svg","hash":"549c58cd09dbeefd573ce10646c49ded8bcc48ec","modified":1614157020022},{"_id":"public/img/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1614157020022},{"_id":"public/img/favicon.ico","hash":"47877628a0f0e0f06430845b0e3a75e0ba1361ce","modified":1614157020022},{"_id":"public/img/icp.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1614157020022},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1614157020022},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1614157020022},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1614157020022},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1614157020022},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614157020022},{"_id":"public/js/runtimeshow.js","hash":"f686d28d62b6f65de47713a9da70a461a683a45d","modified":1614157020022},{"_id":"public/js/baidupush.js","hash":"276a58782b574ec42bf434e4e8bea623437634d4","modified":1614157020022},{"_id":"public/js/utils.js","hash":"95374853ae7293304091e60f87608e659e217abe","modified":1614157020022},{"_id":"public/js/search/algolia.js","hash":"09ef14408f98725970886e2851347596673f761e","modified":1614157020022},{"_id":"public/js/third-party/ClickShowText.js","hash":"466a78f63eda0469701881b97560d8b488ef3ea9","modified":1614157020022},{"_id":"public/js/third-party/activate-power-mode.js","hash":"e7ee1a178d613ba6293e4b622ea1b6ae16b0da45","modified":1614157020022},{"_id":"public/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1614157020022},{"_id":"public/js/search/local-search.js","hash":"70a3e44f5e83cb11f2c1fd5fd4515f5169ef57c7","modified":1614157020022},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"05fc79ebcf673e2d257583554eef62d162ade5e8","modified":1614157020022},{"_id":"public/js/third-party/click_heart.js","hash":"7d577520a2afbe9a02f2f16455b6fd902ce58c75","modified":1614157020022},{"_id":"public/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1614157020022},{"_id":"public/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1614157020022},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1614157020022},{"_id":"public/css/index.css","hash":"27ff2910a453e0e3fcca3885ffc7077a946d98c4","modified":1614157020022},{"_id":"public/js/main.js","hash":"bdcf3232456a179d7e5ce3ca211d10dd8a90513d","modified":1614157020022},{"_id":"public/js/tw_cn.js","hash":"602944743365332d3918c77f678f8ba45a665540","modified":1614157020022},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1614157020022},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1614157020022},{"_id":"public/img/avatar.png","hash":"dd1a6f2463665a2d3b89329f0fa2cde5ee823a2a","modified":1614157020022}],"Category":[{"name":"tool","_id":"cklj7eyoh000e3wzjfev8djee"},{"name":"vpn","parent":"cklj7eyoh000e3wzjfev8djee","_id":"cklj7eyoo000l3wzjhgt983mj"},{"name":"ci","parent":"cklj7eyoh000e3wzjfev8djee","_id":"cklj7eyos000p3wzjavju9whw"},{"name":"sql","_id":"cklj7eyp1000z3wzjfbhid0ol"},{"name":"mysql","parent":"cklj7eyp1000z3wzjfbhid0ol","_id":"cklj7eyp400163wzj6mnsdsna"}],"Data":[{"_id":"link","data":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}],"Page":[{"title":"友情链接","date":"2019-11-21T11:58:41.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2019-11-21 19:58:41\ntype: \"link\"\n---\n","updated":"2019-12-06T10:40:59.673Z","path":"link/index.html","comments":1,"layout":"page","_id":"cklj7eyny00013wzjffyccp1u","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":""},{"title":"分类","date":"2019-11-21T06:23:46.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-11-21 14:23:46\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-12-09T12:27:29.758Z","path":"categories/index.html","layout":"page","_id":"cklj7eyo100033wzjgbc3htrh","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":""},{"title":"关于我","date":"2019-11-22T02:16:34.000Z","_content":"\n画作永远没有完工的一天，你只是不再画下去而已。\n\n----\n**技术栈**\n\n\n\n - Java\n - dubbo\n - Spring\n - Python\n - CoffeeScript\n \n\n\n----------\n**联系方式**\n\n - 邮箱: reminder.forest10@gmail.com\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-11-22 10:16:34\n---\n\n画作永远没有完工的一天，你只是不再画下去而已。\n\n----\n**技术栈**\n\n\n\n - Java\n - dubbo\n - Spring\n - Python\n - CoffeeScript\n \n\n\n----------\n**联系方式**\n\n - 邮箱: reminder.forest10@gmail.com\n\n\n\n\n","updated":"2019-12-09T12:40:53.341Z","path":"about/index.html","comments":1,"layout":"page","_id":"cklj7eyo700063wzjazfdh7bz","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>画作永远没有完工的一天，你只是不再画下去而已。</p>\n<hr>\n<p><strong>技术栈</strong></p>\n<ul>\n<li>Java</li>\n<li>dubbo</li>\n<li>Spring</li>\n<li>Python</li>\n<li>CoffeeScript</li>\n</ul>\n<hr>\n<p><strong>联系方式</strong></p>\n<ul>\n<li>邮箱: <a href=\"mailto:reminder.forest10@gmail.com\">reminder.forest10@gmail.com</a></li>\n</ul>\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":"<p>画作永远没有完工的一天，你只是不再画下去而已。</p>\n<hr>\n<p><strong>技术栈</strong></p>\n<ul>\n<li>Java</li>\n<li>dubbo</li>\n<li>Spring</li>\n<li>Python</li>\n<li>CoffeeScript</li>\n</ul>\n<hr>\n<p><strong>联系方式</strong></p>\n<ul>\n<li>邮箱: <a href=\"mailto:reminder.forest10@gmail.com\">reminder.forest10@gmail.com</a></li>\n</ul>\n"},{"title":"标签","date":"2019-11-21T06:22:37.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-11-21 14:22:37\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-12-09T12:24:21.759Z","path":"tags/index.html","layout":"page","_id":"cklj7eyoa00083wzj93s4f2tt","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":""},{"title":"music","date":"2019-12-26T15:28:33.000Z","_content":"\n{% meting \"3103314909\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\"%}\n\n","source":"music/index.md","raw":"---\ntitle: music\ndate: 2019-12-26 23:28:33\n---\n\n{% meting \"3103314909\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\"%}\n\n","updated":"2021-02-24T08:42:59.015Z","path":"music/index.html","comments":1,"layout":"page","_id":"cklj7eyod000b3wzjcjtk03w5","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-RyHHPFIO\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"3103314909\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"false\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":"\n    <div id=\"aplayer-RyHHPFIO\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"3103314909\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"false\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n\n"}],"Post":[{"title":"消失的异常堆栈","date":"2019-12-10T06:24:35.000Z","_content":"\n原文引用自:[消失的异常栈][1]\n**最近在分析日志的时候发现有个日志发现了NPE，但是没有异常堆栈信息,只有java.lang.NullPointerException这一条信息,无法知道是从哪里抛出来的, 经过查找资料知道是JIT编译器对异常进行了优化，当代码中的某个位置抛出同一个异常很多次后,JIT服务端编译器(C2)会将其优化成抛出一个事先编译好的、类型匹配的异常,异常堆栈信息就看不到了。**\n\n引用R大的一段话:\n\n> HotSpot VM有个许多人觉得“匪夷所思”的优化，叫做fast\n> throw：有些特定的隐式异常类型（NullPointerException、ArithmeticException（ /\n> 0）之类）如果在代码里某个特定位置被抛出过多次的话，HotSpot Server Compiler（C2）会透明的决定用fast throw来优化这个抛出异常的地方——直接抛出一个事先分配好的、类型匹配的异常对象。这个对象的message和stack trace都被清空。抛出这个异常的速度是非常快，不但不用额外分配内存，而且也不用爬栈；但反面就是可能正好是需要知道哪里出问题的时候看不到stack trace了。从Sun JDK5开始要避免C2做这个优化还得额外传个VM参数：-XX:-OmitStackTraceInFastThrow。\n\n**问题重现\n测试代码如下,使用的是jdk1.8.0_144:**\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 200_000; i++) {\n            try {\n                String s = null;\n                s.toString();\n            } catch (Exception e) {\n                System.out.println(i + \":\" + e.getStackTrace().length);\n                if (e.getStackTrace().length == 0) {\n                    System.out.println(\"stackTrace omit after \" + i + \" times\");\n                    e.printStackTrace();\n                    break;\n                }\n            }\n        }\n\n    }\n\n**测试结果是在调用115715次后JIT做了编译优化,在第115716次时异常堆栈看不到了,stackTrace长度为0:**\n\n        \n    115709:1\n    115710:1\n    115711:1\n    115712:1\n    115713:1\n    115714:1\n    115715:0\n    stackTrace omit after 115715 times\n    java.lang.NullPointerException\n\n**解决办法**\n**JVM提供了-XX:-OmitStackTraceInFastThrow这个虚拟机参数来告诉JIT编译器禁用这种异常fastThrow的优化,当然如果你使用-Xint参数后虚拟机运行在解释器模式也不会出现这个问题，但是禁用JIT会对整体的性能有影响,因此不建议使用-Xint参数,如果想看到具体的异常堆栈,推荐使用-XX:-OmitStackTraceInFastThrow参数。\n那JVM为什么要对异常进行优化呢，这里就牵扯到另一个问题了,如果你在系统响应慢的时候分析过线程堆栈,可能遇到过线程耗在调用fillInStackTrace()这个native方法的时间非常长,fillInStackTrace()方法用来爬取线程的调用堆栈,我之前就遇到过Log4j打印日志非常慢的问题,结果抓取线程堆栈后发现线程都是卡在fillInStackTrace()这个native方法，如果有些使用场景不需要完整的调用堆栈时,建议重写fillInStackTrace()，让它直接return this，可以一定程度的提高系统的吞吐量。**\n\n**fillInStackTrace优化**\n\n> 我们知道所有的Exception和Error都是Throwable的子类，构造子类实例前都先调用父类的实例构造方法，我们看下Throwable类的源码就会发现在构造方法里调用了fillInStackTrace()方法:\n\n   \n\n     /**\n         * Constructs a new throwable with {@code null} as its detail message.\n         * The cause is not initialized, and may subsequently be initialized by a\n         * call to {@link #initCause}.\n         *\n         * <p>The {@link #fillInStackTrace()} method is called to initialize\n         * the stack trace data in the newly created throwable.\n         */\n        public Throwable() {\n            fillInStackTrace();\n        }\n        \n        public synchronized Throwable fillInStackTrace() {\n            if (stackTrace != null || backtrace != null ) {\n                //这里调用native的fillInStackTrace方法\n                fillInStackTrace(0);\n                stackTrace = UNASSIGNED_STACK;\n            }\n            return this;\n        }\n\n**可以看到当stackTrace不为null时需要调用native的fillInStackTrace()方法，那什么时候stackTrace变量为null呢，通过追踪源码可以发现Throwable类有多个重载的构造方法,其中有个方法可以传递一个writableStackTrace参数,当这个参数为false的时候stackTrace就为null，这时候就不会调用native的fillInStackTrace()方法去爬取线程堆栈，当然你也可以重写fillInStackTrace()方法，让他直接返回this,这样也可以避免爬栈,但是还是建议大家谨慎使用，毕竟需求时刻在变，说不定什么时候就需要这个堆栈来定位问题了。**\n\n\n    protected Throwable(String message, Throwable cause,\n                        boolean enableSuppression,\n                        boolean writableStackTrace) {\n        if (writableStackTrace) {\n            fillInStackTrace();\n        } else {\n            stackTrace = null;\n        }\n        detailMessage = message;\n        this.cause = cause;\n        if (!enableSuppression)\n            suppressedExceptions = null;\n    }\n\n**前面提到了Log4j打印日志慢的问题,那Log4j打印日志为什么也涉及到这个fillInStackTrace方法呢，对Log4j有研究过的同学应该知道如果Log4j配置文件里配置了%C(类全限定包名)、%F(文件名)、%M(打印日志的方法名称)和%L(行号)这几个用于定位调用者信息的pattern时,Log4J会先抛出一个异常出来，然后从异常堆栈中来获取调用者的信息,既然是抛异常出来必然涉及到调用native的fillInStackTrace方法来爬取线程堆栈,因此开启这些参数对系统的性能是有影响的。**\n\n\n  [1]: https://www.ezlippi.com/blog/2018/02/the-missing-stacktrace.html","source":"_posts/The-missing-trace.md","raw":"---\ntitle: 消失的异常堆栈\ndate: 2019-12-10 14:24:35\ntags: [JVM]\n---\n\n原文引用自:[消失的异常栈][1]\n**最近在分析日志的时候发现有个日志发现了NPE，但是没有异常堆栈信息,只有java.lang.NullPointerException这一条信息,无法知道是从哪里抛出来的, 经过查找资料知道是JIT编译器对异常进行了优化，当代码中的某个位置抛出同一个异常很多次后,JIT服务端编译器(C2)会将其优化成抛出一个事先编译好的、类型匹配的异常,异常堆栈信息就看不到了。**\n\n引用R大的一段话:\n\n> HotSpot VM有个许多人觉得“匪夷所思”的优化，叫做fast\n> throw：有些特定的隐式异常类型（NullPointerException、ArithmeticException（ /\n> 0）之类）如果在代码里某个特定位置被抛出过多次的话，HotSpot Server Compiler（C2）会透明的决定用fast throw来优化这个抛出异常的地方——直接抛出一个事先分配好的、类型匹配的异常对象。这个对象的message和stack trace都被清空。抛出这个异常的速度是非常快，不但不用额外分配内存，而且也不用爬栈；但反面就是可能正好是需要知道哪里出问题的时候看不到stack trace了。从Sun JDK5开始要避免C2做这个优化还得额外传个VM参数：-XX:-OmitStackTraceInFastThrow。\n\n**问题重现\n测试代码如下,使用的是jdk1.8.0_144:**\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 200_000; i++) {\n            try {\n                String s = null;\n                s.toString();\n            } catch (Exception e) {\n                System.out.println(i + \":\" + e.getStackTrace().length);\n                if (e.getStackTrace().length == 0) {\n                    System.out.println(\"stackTrace omit after \" + i + \" times\");\n                    e.printStackTrace();\n                    break;\n                }\n            }\n        }\n\n    }\n\n**测试结果是在调用115715次后JIT做了编译优化,在第115716次时异常堆栈看不到了,stackTrace长度为0:**\n\n        \n    115709:1\n    115710:1\n    115711:1\n    115712:1\n    115713:1\n    115714:1\n    115715:0\n    stackTrace omit after 115715 times\n    java.lang.NullPointerException\n\n**解决办法**\n**JVM提供了-XX:-OmitStackTraceInFastThrow这个虚拟机参数来告诉JIT编译器禁用这种异常fastThrow的优化,当然如果你使用-Xint参数后虚拟机运行在解释器模式也不会出现这个问题，但是禁用JIT会对整体的性能有影响,因此不建议使用-Xint参数,如果想看到具体的异常堆栈,推荐使用-XX:-OmitStackTraceInFastThrow参数。\n那JVM为什么要对异常进行优化呢，这里就牵扯到另一个问题了,如果你在系统响应慢的时候分析过线程堆栈,可能遇到过线程耗在调用fillInStackTrace()这个native方法的时间非常长,fillInStackTrace()方法用来爬取线程的调用堆栈,我之前就遇到过Log4j打印日志非常慢的问题,结果抓取线程堆栈后发现线程都是卡在fillInStackTrace()这个native方法，如果有些使用场景不需要完整的调用堆栈时,建议重写fillInStackTrace()，让它直接return this，可以一定程度的提高系统的吞吐量。**\n\n**fillInStackTrace优化**\n\n> 我们知道所有的Exception和Error都是Throwable的子类，构造子类实例前都先调用父类的实例构造方法，我们看下Throwable类的源码就会发现在构造方法里调用了fillInStackTrace()方法:\n\n   \n\n     /**\n         * Constructs a new throwable with {@code null} as its detail message.\n         * The cause is not initialized, and may subsequently be initialized by a\n         * call to {@link #initCause}.\n         *\n         * <p>The {@link #fillInStackTrace()} method is called to initialize\n         * the stack trace data in the newly created throwable.\n         */\n        public Throwable() {\n            fillInStackTrace();\n        }\n        \n        public synchronized Throwable fillInStackTrace() {\n            if (stackTrace != null || backtrace != null ) {\n                //这里调用native的fillInStackTrace方法\n                fillInStackTrace(0);\n                stackTrace = UNASSIGNED_STACK;\n            }\n            return this;\n        }\n\n**可以看到当stackTrace不为null时需要调用native的fillInStackTrace()方法，那什么时候stackTrace变量为null呢，通过追踪源码可以发现Throwable类有多个重载的构造方法,其中有个方法可以传递一个writableStackTrace参数,当这个参数为false的时候stackTrace就为null，这时候就不会调用native的fillInStackTrace()方法去爬取线程堆栈，当然你也可以重写fillInStackTrace()方法，让他直接返回this,这样也可以避免爬栈,但是还是建议大家谨慎使用，毕竟需求时刻在变，说不定什么时候就需要这个堆栈来定位问题了。**\n\n\n    protected Throwable(String message, Throwable cause,\n                        boolean enableSuppression,\n                        boolean writableStackTrace) {\n        if (writableStackTrace) {\n            fillInStackTrace();\n        } else {\n            stackTrace = null;\n        }\n        detailMessage = message;\n        this.cause = cause;\n        if (!enableSuppression)\n            suppressedExceptions = null;\n    }\n\n**前面提到了Log4j打印日志慢的问题,那Log4j打印日志为什么也涉及到这个fillInStackTrace方法呢，对Log4j有研究过的同学应该知道如果Log4j配置文件里配置了%C(类全限定包名)、%F(文件名)、%M(打印日志的方法名称)和%L(行号)这几个用于定位调用者信息的pattern时,Log4J会先抛出一个异常出来，然后从异常堆栈中来获取调用者的信息,既然是抛异常出来必然涉及到调用native的fillInStackTrace方法来爬取线程堆栈,因此开启这些参数对系统的性能是有影响的。**\n\n\n  [1]: https://www.ezlippi.com/blog/2018/02/the-missing-stacktrace.html","slug":"The-missing-trace","published":1,"updated":"2021-02-24T08:42:59.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eynr00003wzjc5lu67ks","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>原文引用自:<a href=\"https://www.ezlippi.com/blog/2018/02/the-missing-stacktrace.html\" target=\"_blank\" rel=\"noopener\">消失的异常栈</a><br><strong>最近在分析日志的时候发现有个日志发现了NPE，但是没有异常堆栈信息,只有java.lang.NullPointerException这一条信息,无法知道是从哪里抛出来的, 经过查找资料知道是JIT编译器对异常进行了优化，当代码中的某个位置抛出同一个异常很多次后,JIT服务端编译器(C2)会将其优化成抛出一个事先编译好的、类型匹配的异常,异常堆栈信息就看不到了。</strong></p>\n<p>引用R大的一段话:</p>\n<blockquote>\n<p>HotSpot VM有个许多人觉得“匪夷所思”的优化，叫做fast<br>throw：有些特定的隐式异常类型（NullPointerException、ArithmeticException（ /<br>0）之类）如果在代码里某个特定位置被抛出过多次的话，HotSpot Server Compiler（C2）会透明的决定用fast throw来优化这个抛出异常的地方——直接抛出一个事先分配好的、类型匹配的异常对象。这个对象的message和stack trace都被清空。抛出这个异常的速度是非常快，不但不用额外分配内存，而且也不用爬栈；但反面就是可能正好是需要知道哪里出问题的时候看不到stack trace了。从Sun JDK5开始要避免C2做这个优化还得额外传个VM参数：-XX:-OmitStackTraceInFastThrow。</p>\n</blockquote>\n<p><strong>问题重现<br>测试代码如下,使用的是jdk1.8.0_144:</strong></p>\n<pre><code>public static void main(String[] args) {\n    for (int i = 0; i &lt; 200_000; i++) {\n        try {\n            String s = null;\n            s.toString();\n        } catch (Exception e) {\n            System.out.println(i + &quot;:&quot; + e.getStackTrace().length);\n            if (e.getStackTrace().length == 0) {\n                System.out.println(&quot;stackTrace omit after &quot; + i + &quot; times&quot;);\n                e.printStackTrace();\n                break;\n            }\n        }\n    }\n\n}</code></pre><p><strong>测试结果是在调用115715次后JIT做了编译优化,在第115716次时异常堆栈看不到了,stackTrace长度为0:</strong></p>\n<pre><code>115709:1\n115710:1\n115711:1\n115712:1\n115713:1\n115714:1\n115715:0\nstackTrace omit after 115715 times\njava.lang.NullPointerException</code></pre><p><strong>解决办法</strong><br><strong>JVM提供了-XX:-OmitStackTraceInFastThrow这个虚拟机参数来告诉JIT编译器禁用这种异常fastThrow的优化,当然如果你使用-Xint参数后虚拟机运行在解释器模式也不会出现这个问题，但是禁用JIT会对整体的性能有影响,因此不建议使用-Xint参数,如果想看到具体的异常堆栈,推荐使用-XX:-OmitStackTraceInFastThrow参数。<br>那JVM为什么要对异常进行优化呢，这里就牵扯到另一个问题了,如果你在系统响应慢的时候分析过线程堆栈,可能遇到过线程耗在调用fillInStackTrace()这个native方法的时间非常长,fillInStackTrace()方法用来爬取线程的调用堆栈,我之前就遇到过Log4j打印日志非常慢的问题,结果抓取线程堆栈后发现线程都是卡在fillInStackTrace()这个native方法，如果有些使用场景不需要完整的调用堆栈时,建议重写fillInStackTrace()，让它直接return this，可以一定程度的提高系统的吞吐量。</strong></p>\n<p><strong>fillInStackTrace优化</strong></p>\n<blockquote>\n<p>我们知道所有的Exception和Error都是Throwable的子类，构造子类实例前都先调用父类的实例构造方法，我们看下Throwable类的源码就会发现在构造方法里调用了fillInStackTrace()方法:</p>\n</blockquote>\n<pre><code>/**\n    * Constructs a new throwable with {@code null} as its detail message.\n    * The cause is not initialized, and may subsequently be initialized by a\n    * call to {@link #initCause}.\n    *\n    * &lt;p&gt;The {@link #fillInStackTrace()} method is called to initialize\n    * the stack trace data in the newly created throwable.\n    */\n   public Throwable() {\n       fillInStackTrace();\n   }\n\n   public synchronized Throwable fillInStackTrace() {\n       if (stackTrace != null || backtrace != null ) {\n           //这里调用native的fillInStackTrace方法\n           fillInStackTrace(0);\n           stackTrace = UNASSIGNED_STACK;\n       }\n       return this;\n   }</code></pre><p><strong>可以看到当stackTrace不为null时需要调用native的fillInStackTrace()方法，那什么时候stackTrace变量为null呢，通过追踪源码可以发现Throwable类有多个重载的构造方法,其中有个方法可以传递一个writableStackTrace参数,当这个参数为false的时候stackTrace就为null，这时候就不会调用native的fillInStackTrace()方法去爬取线程堆栈，当然你也可以重写fillInStackTrace()方法，让他直接返回this,这样也可以避免爬栈,但是还是建议大家谨慎使用，毕竟需求时刻在变，说不定什么时候就需要这个堆栈来定位问题了。</strong></p>\n<pre><code>protected Throwable(String message, Throwable cause,\n                    boolean enableSuppression,\n                    boolean writableStackTrace) {\n    if (writableStackTrace) {\n        fillInStackTrace();\n    } else {\n        stackTrace = null;\n    }\n    detailMessage = message;\n    this.cause = cause;\n    if (!enableSuppression)\n        suppressedExceptions = null;\n}</code></pre><p><strong>前面提到了Log4j打印日志慢的问题,那Log4j打印日志为什么也涉及到这个fillInStackTrace方法呢，对Log4j有研究过的同学应该知道如果Log4j配置文件里配置了%C(类全限定包名)、%F(文件名)、%M(打印日志的方法名称)和%L(行号)这几个用于定位调用者信息的pattern时,Log4J会先抛出一个异常出来，然后从异常堆栈中来获取调用者的信息,既然是抛异常出来必然涉及到调用native的fillInStackTrace方法来爬取线程堆栈,因此开启这些参数对系统的性能是有影响的。</strong></p>\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":"<p>原文引用自:<a href=\"https://www.ezlippi.com/blog/2018/02/the-missing-stacktrace.html\" target=\"_blank\" rel=\"noopener\">消失的异常栈</a><br><strong>最近在分析日志的时候发现有个日志发现了NPE，但是没有异常堆栈信息,只有java.lang.NullPointerException这一条信息,无法知道是从哪里抛出来的, 经过查找资料知道是JIT编译器对异常进行了优化，当代码中的某个位置抛出同一个异常很多次后,JIT服务端编译器(C2)会将其优化成抛出一个事先编译好的、类型匹配的异常,异常堆栈信息就看不到了。</strong></p>\n<p>引用R大的一段话:</p>\n<blockquote>\n<p>HotSpot VM有个许多人觉得“匪夷所思”的优化，叫做fast<br>throw：有些特定的隐式异常类型（NullPointerException、ArithmeticException（ /<br>0）之类）如果在代码里某个特定位置被抛出过多次的话，HotSpot Server Compiler（C2）会透明的决定用fast throw来优化这个抛出异常的地方——直接抛出一个事先分配好的、类型匹配的异常对象。这个对象的message和stack trace都被清空。抛出这个异常的速度是非常快，不但不用额外分配内存，而且也不用爬栈；但反面就是可能正好是需要知道哪里出问题的时候看不到stack trace了。从Sun JDK5开始要避免C2做这个优化还得额外传个VM参数：-XX:-OmitStackTraceInFastThrow。</p>\n</blockquote>\n<p><strong>问题重现<br>测试代码如下,使用的是jdk1.8.0_144:</strong></p>\n<pre><code>public static void main(String[] args) {\n    for (int i = 0; i &lt; 200_000; i++) {\n        try {\n            String s = null;\n            s.toString();\n        } catch (Exception e) {\n            System.out.println(i + &quot;:&quot; + e.getStackTrace().length);\n            if (e.getStackTrace().length == 0) {\n                System.out.println(&quot;stackTrace omit after &quot; + i + &quot; times&quot;);\n                e.printStackTrace();\n                break;\n            }\n        }\n    }\n\n}</code></pre><p><strong>测试结果是在调用115715次后JIT做了编译优化,在第115716次时异常堆栈看不到了,stackTrace长度为0:</strong></p>\n<pre><code>115709:1\n115710:1\n115711:1\n115712:1\n115713:1\n115714:1\n115715:0\nstackTrace omit after 115715 times\njava.lang.NullPointerException</code></pre><p><strong>解决办法</strong><br><strong>JVM提供了-XX:-OmitStackTraceInFastThrow这个虚拟机参数来告诉JIT编译器禁用这种异常fastThrow的优化,当然如果你使用-Xint参数后虚拟机运行在解释器模式也不会出现这个问题，但是禁用JIT会对整体的性能有影响,因此不建议使用-Xint参数,如果想看到具体的异常堆栈,推荐使用-XX:-OmitStackTraceInFastThrow参数。<br>那JVM为什么要对异常进行优化呢，这里就牵扯到另一个问题了,如果你在系统响应慢的时候分析过线程堆栈,可能遇到过线程耗在调用fillInStackTrace()这个native方法的时间非常长,fillInStackTrace()方法用来爬取线程的调用堆栈,我之前就遇到过Log4j打印日志非常慢的问题,结果抓取线程堆栈后发现线程都是卡在fillInStackTrace()这个native方法，如果有些使用场景不需要完整的调用堆栈时,建议重写fillInStackTrace()，让它直接return this，可以一定程度的提高系统的吞吐量。</strong></p>\n<p><strong>fillInStackTrace优化</strong></p>\n<blockquote>\n<p>我们知道所有的Exception和Error都是Throwable的子类，构造子类实例前都先调用父类的实例构造方法，我们看下Throwable类的源码就会发现在构造方法里调用了fillInStackTrace()方法:</p>\n</blockquote>\n<pre><code>/**\n    * Constructs a new throwable with {@code null} as its detail message.\n    * The cause is not initialized, and may subsequently be initialized by a\n    * call to {@link #initCause}.\n    *\n    * &lt;p&gt;The {@link #fillInStackTrace()} method is called to initialize\n    * the stack trace data in the newly created throwable.\n    */\n   public Throwable() {\n       fillInStackTrace();\n   }\n\n   public synchronized Throwable fillInStackTrace() {\n       if (stackTrace != null || backtrace != null ) {\n           //这里调用native的fillInStackTrace方法\n           fillInStackTrace(0);\n           stackTrace = UNASSIGNED_STACK;\n       }\n       return this;\n   }</code></pre><p><strong>可以看到当stackTrace不为null时需要调用native的fillInStackTrace()方法，那什么时候stackTrace变量为null呢，通过追踪源码可以发现Throwable类有多个重载的构造方法,其中有个方法可以传递一个writableStackTrace参数,当这个参数为false的时候stackTrace就为null，这时候就不会调用native的fillInStackTrace()方法去爬取线程堆栈，当然你也可以重写fillInStackTrace()方法，让他直接返回this,这样也可以避免爬栈,但是还是建议大家谨慎使用，毕竟需求时刻在变，说不定什么时候就需要这个堆栈来定位问题了。</strong></p>\n<pre><code>protected Throwable(String message, Throwable cause,\n                    boolean enableSuppression,\n                    boolean writableStackTrace) {\n    if (writableStackTrace) {\n        fillInStackTrace();\n    } else {\n        stackTrace = null;\n    }\n    detailMessage = message;\n    this.cause = cause;\n    if (!enableSuppression)\n        suppressedExceptions = null;\n}</code></pre><p><strong>前面提到了Log4j打印日志慢的问题,那Log4j打印日志为什么也涉及到这个fillInStackTrace方法呢，对Log4j有研究过的同学应该知道如果Log4j配置文件里配置了%C(类全限定包名)、%F(文件名)、%M(打印日志的方法名称)和%L(行号)这几个用于定位调用者信息的pattern时,Log4J会先抛出一个异常出来，然后从异常堆栈中来获取调用者的信息,既然是抛异常出来必然涉及到调用native的fillInStackTrace方法来爬取线程堆栈,因此开启这些参数对系统的性能是有影响的。</strong></p>\n"},{"title":"Linux下为Tomcat安装APR","date":"2019-12-10T14:24:35.000Z","_content":"\n\n\n\n\n\n**一、简介** \n\n----------\n\n`APR：Apache Portable  Run-timelibraries，Apache可移植运行库。`\n在早期的Apache版本中，应用程序本身必须能够处理各种具体操作系统平台的细节，并针对不同的平台调用不同的处理函数。随着Apache的进一步开发，Apache组织决定将这些通用的函数独立出来并发展成为一个新的项目。这样，APR的开发就从Apache中独立出来，Apache仅仅是使用APR而已。 \n`Tomcat Native`：这个项目可以让 Tomcat 使用 Apache 的 apr 包来处理包括文件和网络IO操作，以提升性能。 \n\n**二、需要安装的程序** \n\n\n----------\n\n\n 1. 最新版的apr \n 2. 最新版的apr-util \n 3. tomcat-native.tar.gz \n \n前两个可以从http://apr.apache.org/下载，最后一个位于tomcat的bin目录下。 \n\n**三、安装** \n\n\n----------\n\n1. 安装apr \n\n    将最新的apr安装程序apr-1.5.2.tar.gz下载到任意一个目录下，比如/root/目录下。\n     \n```\n    cd /root/ \n    wget http://apr.apache.org/apr-1.5.2.tar.gz \n    tar zxvf apr-1.5.2.tar.gz \n    cd apr-1.5.2/ \n    ./configure --prefix=/usr/local/apr \n    make \n    make install \n```\n\n    \n   注意，这里的prefix参数用于指定安装路径。 \n\n2. 安装apr-util \n\n```\n    cd /root/ \n    wget http://apr.apache.org/apr-util-1.5.4.tar.gz \n    tar zxvf apr-util-1.5.4.tar.gz \n    cd apr-util-1.5.4/ \n    ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr \n    make \n    make install \n    ```\n\n3. 安装tomcat-native \n\n    我的tomcat目录为/usr/local/apache-tomcat-7.0.63 \n    \n```\n    cd /usr/local/apache-tomcat-7.0.63/bin/ \n    tar zxvf tomcat-native.tar.gz \n    cd tomcat-native-1.1.33-src/jni/native/ \n    ./configure --with-apr=/usr/local/apr --with-java-home=/etc/alternatives/java_sdk_1.7.0 \n    make \n    make install\n```\n\n \n\n**四、设置apr的环境变量** \n\n\n----------\n\n\n在/etc/profile中添加以下内容 \n\n```\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/apr/lib \n```\n\n保存后使profile生效 \n```\n    source /etc/profile \n```\n\n**五、验证** \n\n\n----------\n\n```\n    cd /usr/local/apache-tomcat-7.0.63/bin/ \n    ./catalina.sh run \n    ```\n\n在第35行附近若看到如下的日志输出则表示安装成功 \n```\n    INFO: Loaded APR based Apache Tomcat Native library 1.1.33 using APR version 1.5.2. \n    Jan 30, 2016 4:46:57 PM org.apache.catalina.core.AprLifecycleListener lifecycleEvent \n    INFO: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true]. \n```\n\n","source":"_posts/Linux下为Tomcat安装APR.md","raw":"---\ntitle: Linux下为Tomcat安装APR\ndate: 2019-12-10 22:24:35\ntags: [LINUX,TOMCAT,APR]\n---\n\n\n\n\n\n\n**一、简介** \n\n----------\n\n`APR：Apache Portable  Run-timelibraries，Apache可移植运行库。`\n在早期的Apache版本中，应用程序本身必须能够处理各种具体操作系统平台的细节，并针对不同的平台调用不同的处理函数。随着Apache的进一步开发，Apache组织决定将这些通用的函数独立出来并发展成为一个新的项目。这样，APR的开发就从Apache中独立出来，Apache仅仅是使用APR而已。 \n`Tomcat Native`：这个项目可以让 Tomcat 使用 Apache 的 apr 包来处理包括文件和网络IO操作，以提升性能。 \n\n**二、需要安装的程序** \n\n\n----------\n\n\n 1. 最新版的apr \n 2. 最新版的apr-util \n 3. tomcat-native.tar.gz \n \n前两个可以从http://apr.apache.org/下载，最后一个位于tomcat的bin目录下。 \n\n**三、安装** \n\n\n----------\n\n1. 安装apr \n\n    将最新的apr安装程序apr-1.5.2.tar.gz下载到任意一个目录下，比如/root/目录下。\n     \n```\n    cd /root/ \n    wget http://apr.apache.org/apr-1.5.2.tar.gz \n    tar zxvf apr-1.5.2.tar.gz \n    cd apr-1.5.2/ \n    ./configure --prefix=/usr/local/apr \n    make \n    make install \n```\n\n    \n   注意，这里的prefix参数用于指定安装路径。 \n\n2. 安装apr-util \n\n```\n    cd /root/ \n    wget http://apr.apache.org/apr-util-1.5.4.tar.gz \n    tar zxvf apr-util-1.5.4.tar.gz \n    cd apr-util-1.5.4/ \n    ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr \n    make \n    make install \n    ```\n\n3. 安装tomcat-native \n\n    我的tomcat目录为/usr/local/apache-tomcat-7.0.63 \n    \n```\n    cd /usr/local/apache-tomcat-7.0.63/bin/ \n    tar zxvf tomcat-native.tar.gz \n    cd tomcat-native-1.1.33-src/jni/native/ \n    ./configure --with-apr=/usr/local/apr --with-java-home=/etc/alternatives/java_sdk_1.7.0 \n    make \n    make install\n```\n\n \n\n**四、设置apr的环境变量** \n\n\n----------\n\n\n在/etc/profile中添加以下内容 \n\n```\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/apr/lib \n```\n\n保存后使profile生效 \n```\n    source /etc/profile \n```\n\n**五、验证** \n\n\n----------\n\n```\n    cd /usr/local/apache-tomcat-7.0.63/bin/ \n    ./catalina.sh run \n    ```\n\n在第35行附近若看到如下的日志输出则表示安装成功 \n```\n    INFO: Loaded APR based Apache Tomcat Native library 1.1.33 using APR version 1.5.2. \n    Jan 30, 2016 4:46:57 PM org.apache.catalina.core.AprLifecycleListener lifecycleEvent \n    INFO: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true]. \n```\n\n","slug":"Linux下为Tomcat安装APR","published":1,"updated":"2019-12-16T08:16:47.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eyo000023wzjbfss7q72","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><strong>一、简介</strong> </p>\n<hr>\n<p><code>APR：Apache Portable  Run-timelibraries，Apache可移植运行库。</code><br>在早期的Apache版本中，应用程序本身必须能够处理各种具体操作系统平台的细节，并针对不同的平台调用不同的处理函数。随着Apache的进一步开发，Apache组织决定将这些通用的函数独立出来并发展成为一个新的项目。这样，APR的开发就从Apache中独立出来，Apache仅仅是使用APR而已。<br><code>Tomcat Native</code>：这个项目可以让 Tomcat 使用 Apache 的 apr 包来处理包括文件和网络IO操作，以提升性能。 </p>\n<p><strong>二、需要安装的程序</strong> </p>\n<hr>\n<ol>\n<li>最新版的apr </li>\n<li>最新版的apr-util </li>\n<li>tomcat-native.tar.gz </li>\n</ol>\n<p>前两个可以从<a href=\"http://apr.apache.org/下载，最后一个位于tomcat的bin目录下。\" target=\"_blank\" rel=\"noopener\">http://apr.apache.org/下载，最后一个位于tomcat的bin目录下。</a> </p>\n<p><strong>三、安装</strong> </p>\n<hr>\n<ol>\n<li><p>安装apr </p>\n<p> 将最新的apr安装程序apr-1.5.2.tar.gz下载到任意一个目录下，比如/root/目录下。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;root&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;apr.apache.org&#x2F;apr-1.5.2.tar.gz </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf apr-1.5.2.tar.gz </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd apr-1.5.2&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;apr </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">make </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span></pre></td></tr></table></figure>\n\n\n<p>   注意，这里的prefix参数用于指定安装路径。 </p>\n<ol start=\"2\">\n<li>安装apr-util </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;root&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;apr.apache.org&#x2F;apr-util-1.5.4.tar.gz </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf apr-util-1.5.4.tar.gz </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd apr-util-1.5.4&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;apr-util --with-apr&#x3D;&#x2F;usr&#x2F;local&#x2F;apr </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">make </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>安装tomcat-native </p>\n<p> 我的tomcat目录为/usr/local/apache-tomcat-7.0.63 </p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;apache-tomcat-7.0.63&#x2F;bin&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf tomcat-native.tar.gz </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd tomcat-native-1.1.33-src&#x2F;jni&#x2F;native&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure --with-apr&#x3D;&#x2F;usr&#x2F;local&#x2F;apr --with-java-home&#x3D;&#x2F;etc&#x2F;alternatives&#x2F;java_sdk_1.7.0 </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">make </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span></pre></td></tr></table></figure>\n\n\n\n<p><strong>四、设置apr的环境变量</strong> </p>\n<hr>\n<p>在/etc/profile中添加以下内容 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:&#x2F;usr&#x2F;local&#x2F;apr&#x2F;lib</span></pre></td></tr></table></figure>\n\n<p>保存后使profile生效 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">source &#x2F;etc&#x2F;profile</span></pre></td></tr></table></figure>\n\n<p><strong>五、验证</strong> </p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;apache-tomcat-7.0.63&#x2F;bin&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;catalina.sh run</span></pre></td></tr></table></figure>\n\n<p>在第35行附近若看到如下的日志输出则表示安装成功 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">INFO: Loaded APR based Apache Tomcat Native library 1.1.33 using APR version 1.5.2. </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">Jan 30, 2016 4:46:57 PM org.apache.catalina.core.AprLifecycleListener lifecycleEvent </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">INFO: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].</span></pre></td></tr></table></figure>\n\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":"<p><strong>一、简介</strong> </p>\n<hr>\n<p><code>APR：Apache Portable  Run-timelibraries，Apache可移植运行库。</code><br>在早期的Apache版本中，应用程序本身必须能够处理各种具体操作系统平台的细节，并针对不同的平台调用不同的处理函数。随着Apache的进一步开发，Apache组织决定将这些通用的函数独立出来并发展成为一个新的项目。这样，APR的开发就从Apache中独立出来，Apache仅仅是使用APR而已。<br><code>Tomcat Native</code>：这个项目可以让 Tomcat 使用 Apache 的 apr 包来处理包括文件和网络IO操作，以提升性能。 </p>\n<p><strong>二、需要安装的程序</strong> </p>\n<hr>\n<ol>\n<li>最新版的apr </li>\n<li>最新版的apr-util </li>\n<li>tomcat-native.tar.gz </li>\n</ol>\n<p>前两个可以从<a href=\"http://apr.apache.org/下载，最后一个位于tomcat的bin目录下。\" target=\"_blank\" rel=\"noopener\">http://apr.apache.org/下载，最后一个位于tomcat的bin目录下。</a> </p>\n<p><strong>三、安装</strong> </p>\n<hr>\n<ol>\n<li><p>安装apr </p>\n<p> 将最新的apr安装程序apr-1.5.2.tar.gz下载到任意一个目录下，比如/root/目录下。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;root&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;apr.apache.org&#x2F;apr-1.5.2.tar.gz </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf apr-1.5.2.tar.gz </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd apr-1.5.2&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;apr </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">make </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span></pre></td></tr></table></figure>\n\n\n<p>   注意，这里的prefix参数用于指定安装路径。 </p>\n<ol start=\"2\">\n<li>安装apr-util </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;root&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;apr.apache.org&#x2F;apr-util-1.5.4.tar.gz </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf apr-util-1.5.4.tar.gz </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd apr-util-1.5.4&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;apr-util --with-apr&#x3D;&#x2F;usr&#x2F;local&#x2F;apr </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">make </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>安装tomcat-native </p>\n<p> 我的tomcat目录为/usr/local/apache-tomcat-7.0.63 </p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;apache-tomcat-7.0.63&#x2F;bin&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf tomcat-native.tar.gz </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd tomcat-native-1.1.33-src&#x2F;jni&#x2F;native&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure --with-apr&#x3D;&#x2F;usr&#x2F;local&#x2F;apr --with-java-home&#x3D;&#x2F;etc&#x2F;alternatives&#x2F;java_sdk_1.7.0 </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">make </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span></pre></td></tr></table></figure>\n\n\n\n<p><strong>四、设置apr的环境变量</strong> </p>\n<hr>\n<p>在/etc/profile中添加以下内容 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:&#x2F;usr&#x2F;local&#x2F;apr&#x2F;lib</span></pre></td></tr></table></figure>\n\n<p>保存后使profile生效 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">source &#x2F;etc&#x2F;profile</span></pre></td></tr></table></figure>\n\n<p><strong>五、验证</strong> </p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;apache-tomcat-7.0.63&#x2F;bin&#x2F; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;catalina.sh run</span></pre></td></tr></table></figure>\n\n<p>在第35行附近若看到如下的日志输出则表示安装成功 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">INFO: Loaded APR based Apache Tomcat Native library 1.1.33 using APR version 1.5.2. </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">Jan 30, 2016 4:46:57 PM org.apache.catalina.core.AprLifecycleListener lifecycleEvent </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">INFO: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].</span></pre></td></tr></table></figure>\n\n"},{"title":"Spring-aop的小把戏","date":"2019-12-11T02:56:15.000Z","_content":"**背景：**\n   多核CPU的普及对于多线程是契机.但是异步使用不当就会造成\"困扰\".\n\n**原因：**\nBeanPostProcessor是一个工厂钩子，允许Spring框架在新创建Bean实例时对其进行定制化修改。例如：通过检查其标注的接口或者使用代理对其进行包裹。应用上下文会从Bean定义中自动检测出BeanPostProcessor并将它们应用到随后创建的任何Bean上。\n普通Bean对象的工厂允许在程序中注册post-processors，应用到随后在本工厂中创建的所有Bean上。典型的场景如：post-processors使用postProcessBeforeInitialization方法通过特征接口或其他类似的方式来填充Bean；而为创建好的Bean创建代理则一般使用postProcessAfterInitialization方法。\nBeanPostProcessor本身也是一个Bean，一般而言其实例化时机要早过普通的Bean，但是BeanPostProcessor也会依赖一些Bean，这就导致了一些Bean的实例化早于BeanPostProcessor，由此会导致一些问题\n\n **1. 问题场景**\n\n\n----------\n\n\n邮件异步发送可参考[程序猿DD的文章][1]\n异步配置\n```\n@Slf4j\n@EnableAsync\n@Configuration\npublic class AsyncTaskPoolConfig extends AsyncConfigurerSupport {\n\n    @Lazy\n    @Resource\n    private MailService mailService;\n\n    @Override\n    public Executor getAsyncExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(10);\n        executor.setMaxPoolSize(20);\n        executor.setQueueCapacity(100);\n        executor.setKeepAliveSeconds(60);\n        executor.setThreadNamePrefix(\"Hi-AsyncExecutor-\");\n        executor.setRejectedExecutionHandler(getRejectedExecutionHandler());\n        //防止任务未执行完毕就关闭线程池\n        executor.setWaitForTasksToCompleteOnShutdown(true);\n        executor.setAwaitTerminationSeconds(60);\n        return executor;\n    }\n\n\n    private RejectedExecutionHandler getRejectedExecutionHandler() {\n        return new SpringRejectedExecutionHandler();\n    }\n\n    class SpringRejectedExecutionHandler implements RejectedExecutionHandler {\n\n        @Override\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n            if (!executor.isShutdown()) {\n                r.run();\n            }\n            log.error(\"rejectedTask in async method\");\n            sendMail(\"发生线程池堵塞\", \"发生线程池堵塞.由主线程自己执行\");\n        }\n    }\n    private void sendMail(String setSubject, String content) {\n        mailService.send();\n    }\n\n}\n```\n\n按理说这样的配置在直接或者间接发送邮件时候应该都是异步的才对.可是这样配置过后邮件发送就莫名的成了同步阻塞了.\n\n**2、解决问题**\n\n\n----------\n\n\n2.1 spring async失效的表象原因\n首先找到spring async失效的表象/直接原因.我们知道spring async使用Spring AOP和拦截器的方式拦截定义了特定标注的方法，然后执行特定逻辑。因此其实现依赖于动态代理机制auto-proxy，而经过初步调试发现，当被AsyncTaskPoolConfig依赖以后，mailService就不会被代理了，因此无从进入AOP的pointcut，也就是说AOP切面失效了！\n\n2.2 从spring async的集成机制分析\n\n为何没有被代理呢，我们先来确认一下正常情况下什么时候进行代理封装，根据Spring加载机制 BeanPostProcessor允许在Bean实例化的前后对其做一些特定的处理，比如代理。我们在BeanPostProcessor的实现类中发现了InstantiationAwareBeanPostProcessor、SmartInstantiationAwareBeanPostProcessor、AbstractAutoProxyCreator、InfrastructureAdvisorAutoProxyCreator等等。而反观@EnableAsync标注在启动的时候会@import AsyncConfigurationSelector，其selectImports方法会返回ProxyAsyncConfiguration和rg.springframework.scheduling.aspectj.AspectJAsyncConfiguration的全类名（我们定义了mode=AdviceMode.PROXY），也就是加载ProxyAsyncConfiguration。第一个的作用就是实例化AsyncAnnotationBeanPostProcessor便于进行addBeanPostProcessor操作。第二个的作用就是注册了AsyncAnnotationAdvisor和AnnotationAsyncExecutionInterceptor。\n因此，当正常情况下，一个添加了spring async标注的bean会在创建后被InfrastructureAdvisorAutoProxyCreator基于advisor进行代理增强，代理后便可在拦截器AnnotationAsyncExecutionInterceptor中对其方法进行拦截，然后执行async相关逻辑。\n\n所以第一怀疑就是mailService没有经过InfrastructureAdvisorAutoProxyCreator的代理增强。果然调试发现，被AsyncTaskPoolConfig依赖的情况下在MailService的Bean实例化时，用于处理该Bean的PostBeanProcessor明显比没被AsyncTaskPoolConfig依赖时少，并且不含有InfrastructureAdvisorAutoProxyCreator。\n\n\n\n而且，被依赖时会多打出来一行信息：\n```\nINFO   o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mailService' of type [com.forest10.spring.boot.family.async.MailService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n```\n据此推断，可能是MailService启动实例化时机过早，导致的后面那些BeanPostProcessor们来没来得及实例化及注册\n\n2.3 BeanPostProcessor启动阶段对其依赖的Bean造成的影响\n\nBeanPostProcessor的启动时机。在AbstractBeanFactory中维护了BeanPostProcessor的列表：\n```\nprivate final List<BeanPostProcessor> beanPostProcessors = new ArrayList<BeanPostProcessor>();\n```\n并实现了ConfigurableBeanFactory定义的方法：\n```\nvoid addBeanPostProcessor(BeanPostProcessor beanPostProcessor);\n```\n第一阶段是在启动时调用过程会调用AbstractApplicationContext.refresh()，其中的prepareBeanFactory方法中注册了ApplicationContextAwareProcessor、ApplicationListenerDetector：\n```\nbeanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));\nbeanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));\n```\n其中对已经注册的BeanFactoryPostProcessors挨个调用其postProcessBeanFactory方法，其中有一个ConfigurationClassPostProcessor，其postProcessBeanFactory方法中注册了一个ImportAwareBeanPostProcessor：\n```\nbeanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory));\n```\n最后在registerBeanPostProcessors方法中调用\n```\nPostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);\n```\n在该方法中，首先注册BeanPostProcessorChecker：\n```\nbeanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));\n```\n它会在Bean创建完后检查可在当前Bean上起作用的BeanPostProcessor个数与总的BeanPostProcessor个数，如果起作用的个数少于总数，则报出上面那句信息。\n\n然后分成三个阶段依次实例化并注册实现了PriorityOrdered的BeanPostProcessor、实现了Ordered的BeanPostProcessor、没实现Ordered的BeanPostProcessor\n\n```\n// Separate between BeanPostProcessors that implement PriorityOrdered,\n        // Ordered, and the rest.\n        List<BeanPostProcessor> priorityOrderedPostProcessors = new ArrayList<BeanPostProcessor>();\n        List<BeanPostProcessor> internalPostProcessors = new ArrayList<BeanPostProcessor>();\n        List<String> orderedPostProcessorNames = new ArrayList<String>();\n        List<String> nonOrderedPostProcessorNames = new ArrayList<String>();\n        for (String ppName : postProcessorNames) {\n            if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {\n                BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);\n                priorityOrderedPostProcessors.add(pp);\n                if (pp instanceof MergedBeanDefinitionPostProcessor) {\n                    internalPostProcessors.add(pp);\n                }\n            }\n            else if (beanFactory.isTypeMatch(ppName, Ordered.class)) {\n                orderedPostProcessorNames.add(ppName);\n            }\n            else {\n                nonOrderedPostProcessorNames.add(ppName);\n            }\n        }\n \n \n        // First, register the BeanPostProcessors that implement PriorityOrdered.\n        sortPostProcessors(priorityOrderedPostProcessors, beanFactory);\n        registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);\n \n \n        // Next, register the BeanPostProcessors that implement Ordered.\n        List<BeanPostProcessor> orderedPostProcessors = new ArrayList<BeanPostProcessor>();\n        for (String ppName : orderedPostProcessorNames) {\n            BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);\n            orderedPostProcessors.add(pp);\n            if (pp instanceof MergedBeanDefinitionPostProcessor) {\n                internalPostProcessors.add(pp);\n            }\n        }\n        sortPostProcessors(orderedPostProcessors, beanFactory);\n        registerBeanPostProcessors(beanFactory, orderedPostProcessors);\n \n \n        // Now, register all regular BeanPostProcessors.\n        List<BeanPostProcessor> nonOrderedPostProcessors = new ArrayList<BeanPostProcessor>();\n        for (String ppName : nonOrderedPostProcessorNames) {\n            BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);\n            nonOrderedPostProcessors.add(pp);\n            if (pp instanceof MergedBeanDefinitionPostProcessor) {\n                internalPostProcessors.add(pp);\n            }\n        }\n        registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);\n \n \n        // Finally, re-register all internal BeanPostProcessors.\n        sortPostProcessors(internalPostProcessors, beanFactory);\n        registerBeanPostProcessors(beanFactory, internalPostProcessors);\n \n \n        // Re-register post-processor for detecting inner beans as ApplicationListeners,\n        // moving it to the end of the processor chain (for picking up proxies etc).\n        beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));\n```\n\n\n\n需要注意的是，除了第一个阶段，其他阶段同一个阶段的BeanPostProcessor是在全部实例化完成以后才会统一注册到beanFactory的，因此，同一个阶段的BeanPostProcessor及其依赖的Bean在实例化的时候是无法享受到相同阶段但是先实例化的BeanPostProcessor的“服务”的，因为它们还没有注册。\n\n从上面调试与源代码分析，BeanPostProcessor的实例化与注册分为四个阶段，第一阶段applicationContext内置阶段、第二阶段priorityOrdered阶段、第三阶段Ordered阶段、第四阶段nonOrdered阶段。而BeanPostProcessor同时也是Bean，其注册之前一定先实例化。而且是分批实例化和注册，也就是属于同一批的BeanPostProcesser全部实例化完成后，再全部注册，不存在先实例化先注册的问题。而在实例化的时候其依赖的Bean同样要先实例化。\n\n因此导致一个结果就是，被PriorityOrderedBeanPostProcessor所依赖的Bean其初始化时无法享受到PriorityOrdered、Ordered、和nonOrdered的BeanPostProcessor的服务。而被OrderedBeanPostProcessor所依赖的Bean无法享受Ordered、和nonOrdered的BeanPostProcessor的服务。最后被nonOrderedBeanPostProcessor所依赖的Bean无法享受到nonOrderedBeanPostProcessor的服务。\n\n\n\n由于AsyncAnnotationBeanPostProcessor的启动阶段是Ordered(下面代码取自EnableAsync)，因此我们需要确保没有任何priorityOrdered和Ordered的BeanPostProcessor直接或间接的依赖到MailService。\n\n```\n/**\n     * Indicate the order in which the {@link AsyncAnnotationBeanPostProcessor}\n     * should be applied.\n     * <p>The default is {@link Ordered#LOWEST_PRECEDENCE} in order to run\n     * after all other post-processors, so that it can add an advisor to\n     * existing proxies rather than double-proxy.\n     */\n    int order() default Ordered.LOWEST_PRECEDENCE;\n```\n\n\n----------\n\n\n - **总结**\n\nBeanPostProcessor的启动时机。分为四个阶段，第一阶段context内置阶段、第二阶段priorityOrdered阶段、第三阶段Ordered阶段、第四阶段nonOrdered阶段。\n而BeanPostProcessor同时也是Bean，其注册之前一定先实例化。而且是分批实例化和注册，也就是属于同一批的BeanPostProcesser全部实例化完成后，再全部注册，不存在先实例化先注册的问题。而在实例化的时候其依赖的Bean同样要先实例化。\nBeanPostProcessor实例化时，自动依赖注入根据类型获得需要注入的Bean时，会将某些符合条件的Bean（FactoryBean并且其FactoryBeanFactory已经实例化的）先实例化，如果此FacotryBean又依赖其他普通Bean，会导致该Bean提前启动，造成误伤（无法享受部分BeanPostProcessor的后处理，例如典型的auto-proxy）\n\n\n  [1]: http://blog.didispace.com/springbootmailsender\n","source":"_posts/Spring-aop-Trick.md","raw":"---\ntitle: Spring-aop的小把戏\ndate: 2019-12-11 10:56:15\ntags: [Spring,AOP,trick]\n---\n**背景：**\n   多核CPU的普及对于多线程是契机.但是异步使用不当就会造成\"困扰\".\n\n**原因：**\nBeanPostProcessor是一个工厂钩子，允许Spring框架在新创建Bean实例时对其进行定制化修改。例如：通过检查其标注的接口或者使用代理对其进行包裹。应用上下文会从Bean定义中自动检测出BeanPostProcessor并将它们应用到随后创建的任何Bean上。\n普通Bean对象的工厂允许在程序中注册post-processors，应用到随后在本工厂中创建的所有Bean上。典型的场景如：post-processors使用postProcessBeforeInitialization方法通过特征接口或其他类似的方式来填充Bean；而为创建好的Bean创建代理则一般使用postProcessAfterInitialization方法。\nBeanPostProcessor本身也是一个Bean，一般而言其实例化时机要早过普通的Bean，但是BeanPostProcessor也会依赖一些Bean，这就导致了一些Bean的实例化早于BeanPostProcessor，由此会导致一些问题\n\n **1. 问题场景**\n\n\n----------\n\n\n邮件异步发送可参考[程序猿DD的文章][1]\n异步配置\n```\n@Slf4j\n@EnableAsync\n@Configuration\npublic class AsyncTaskPoolConfig extends AsyncConfigurerSupport {\n\n    @Lazy\n    @Resource\n    private MailService mailService;\n\n    @Override\n    public Executor getAsyncExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(10);\n        executor.setMaxPoolSize(20);\n        executor.setQueueCapacity(100);\n        executor.setKeepAliveSeconds(60);\n        executor.setThreadNamePrefix(\"Hi-AsyncExecutor-\");\n        executor.setRejectedExecutionHandler(getRejectedExecutionHandler());\n        //防止任务未执行完毕就关闭线程池\n        executor.setWaitForTasksToCompleteOnShutdown(true);\n        executor.setAwaitTerminationSeconds(60);\n        return executor;\n    }\n\n\n    private RejectedExecutionHandler getRejectedExecutionHandler() {\n        return new SpringRejectedExecutionHandler();\n    }\n\n    class SpringRejectedExecutionHandler implements RejectedExecutionHandler {\n\n        @Override\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n            if (!executor.isShutdown()) {\n                r.run();\n            }\n            log.error(\"rejectedTask in async method\");\n            sendMail(\"发生线程池堵塞\", \"发生线程池堵塞.由主线程自己执行\");\n        }\n    }\n    private void sendMail(String setSubject, String content) {\n        mailService.send();\n    }\n\n}\n```\n\n按理说这样的配置在直接或者间接发送邮件时候应该都是异步的才对.可是这样配置过后邮件发送就莫名的成了同步阻塞了.\n\n**2、解决问题**\n\n\n----------\n\n\n2.1 spring async失效的表象原因\n首先找到spring async失效的表象/直接原因.我们知道spring async使用Spring AOP和拦截器的方式拦截定义了特定标注的方法，然后执行特定逻辑。因此其实现依赖于动态代理机制auto-proxy，而经过初步调试发现，当被AsyncTaskPoolConfig依赖以后，mailService就不会被代理了，因此无从进入AOP的pointcut，也就是说AOP切面失效了！\n\n2.2 从spring async的集成机制分析\n\n为何没有被代理呢，我们先来确认一下正常情况下什么时候进行代理封装，根据Spring加载机制 BeanPostProcessor允许在Bean实例化的前后对其做一些特定的处理，比如代理。我们在BeanPostProcessor的实现类中发现了InstantiationAwareBeanPostProcessor、SmartInstantiationAwareBeanPostProcessor、AbstractAutoProxyCreator、InfrastructureAdvisorAutoProxyCreator等等。而反观@EnableAsync标注在启动的时候会@import AsyncConfigurationSelector，其selectImports方法会返回ProxyAsyncConfiguration和rg.springframework.scheduling.aspectj.AspectJAsyncConfiguration的全类名（我们定义了mode=AdviceMode.PROXY），也就是加载ProxyAsyncConfiguration。第一个的作用就是实例化AsyncAnnotationBeanPostProcessor便于进行addBeanPostProcessor操作。第二个的作用就是注册了AsyncAnnotationAdvisor和AnnotationAsyncExecutionInterceptor。\n因此，当正常情况下，一个添加了spring async标注的bean会在创建后被InfrastructureAdvisorAutoProxyCreator基于advisor进行代理增强，代理后便可在拦截器AnnotationAsyncExecutionInterceptor中对其方法进行拦截，然后执行async相关逻辑。\n\n所以第一怀疑就是mailService没有经过InfrastructureAdvisorAutoProxyCreator的代理增强。果然调试发现，被AsyncTaskPoolConfig依赖的情况下在MailService的Bean实例化时，用于处理该Bean的PostBeanProcessor明显比没被AsyncTaskPoolConfig依赖时少，并且不含有InfrastructureAdvisorAutoProxyCreator。\n\n\n\n而且，被依赖时会多打出来一行信息：\n```\nINFO   o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mailService' of type [com.forest10.spring.boot.family.async.MailService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n```\n据此推断，可能是MailService启动实例化时机过早，导致的后面那些BeanPostProcessor们来没来得及实例化及注册\n\n2.3 BeanPostProcessor启动阶段对其依赖的Bean造成的影响\n\nBeanPostProcessor的启动时机。在AbstractBeanFactory中维护了BeanPostProcessor的列表：\n```\nprivate final List<BeanPostProcessor> beanPostProcessors = new ArrayList<BeanPostProcessor>();\n```\n并实现了ConfigurableBeanFactory定义的方法：\n```\nvoid addBeanPostProcessor(BeanPostProcessor beanPostProcessor);\n```\n第一阶段是在启动时调用过程会调用AbstractApplicationContext.refresh()，其中的prepareBeanFactory方法中注册了ApplicationContextAwareProcessor、ApplicationListenerDetector：\n```\nbeanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));\nbeanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));\n```\n其中对已经注册的BeanFactoryPostProcessors挨个调用其postProcessBeanFactory方法，其中有一个ConfigurationClassPostProcessor，其postProcessBeanFactory方法中注册了一个ImportAwareBeanPostProcessor：\n```\nbeanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory));\n```\n最后在registerBeanPostProcessors方法中调用\n```\nPostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);\n```\n在该方法中，首先注册BeanPostProcessorChecker：\n```\nbeanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));\n```\n它会在Bean创建完后检查可在当前Bean上起作用的BeanPostProcessor个数与总的BeanPostProcessor个数，如果起作用的个数少于总数，则报出上面那句信息。\n\n然后分成三个阶段依次实例化并注册实现了PriorityOrdered的BeanPostProcessor、实现了Ordered的BeanPostProcessor、没实现Ordered的BeanPostProcessor\n\n```\n// Separate between BeanPostProcessors that implement PriorityOrdered,\n        // Ordered, and the rest.\n        List<BeanPostProcessor> priorityOrderedPostProcessors = new ArrayList<BeanPostProcessor>();\n        List<BeanPostProcessor> internalPostProcessors = new ArrayList<BeanPostProcessor>();\n        List<String> orderedPostProcessorNames = new ArrayList<String>();\n        List<String> nonOrderedPostProcessorNames = new ArrayList<String>();\n        for (String ppName : postProcessorNames) {\n            if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {\n                BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);\n                priorityOrderedPostProcessors.add(pp);\n                if (pp instanceof MergedBeanDefinitionPostProcessor) {\n                    internalPostProcessors.add(pp);\n                }\n            }\n            else if (beanFactory.isTypeMatch(ppName, Ordered.class)) {\n                orderedPostProcessorNames.add(ppName);\n            }\n            else {\n                nonOrderedPostProcessorNames.add(ppName);\n            }\n        }\n \n \n        // First, register the BeanPostProcessors that implement PriorityOrdered.\n        sortPostProcessors(priorityOrderedPostProcessors, beanFactory);\n        registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);\n \n \n        // Next, register the BeanPostProcessors that implement Ordered.\n        List<BeanPostProcessor> orderedPostProcessors = new ArrayList<BeanPostProcessor>();\n        for (String ppName : orderedPostProcessorNames) {\n            BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);\n            orderedPostProcessors.add(pp);\n            if (pp instanceof MergedBeanDefinitionPostProcessor) {\n                internalPostProcessors.add(pp);\n            }\n        }\n        sortPostProcessors(orderedPostProcessors, beanFactory);\n        registerBeanPostProcessors(beanFactory, orderedPostProcessors);\n \n \n        // Now, register all regular BeanPostProcessors.\n        List<BeanPostProcessor> nonOrderedPostProcessors = new ArrayList<BeanPostProcessor>();\n        for (String ppName : nonOrderedPostProcessorNames) {\n            BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);\n            nonOrderedPostProcessors.add(pp);\n            if (pp instanceof MergedBeanDefinitionPostProcessor) {\n                internalPostProcessors.add(pp);\n            }\n        }\n        registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);\n \n \n        // Finally, re-register all internal BeanPostProcessors.\n        sortPostProcessors(internalPostProcessors, beanFactory);\n        registerBeanPostProcessors(beanFactory, internalPostProcessors);\n \n \n        // Re-register post-processor for detecting inner beans as ApplicationListeners,\n        // moving it to the end of the processor chain (for picking up proxies etc).\n        beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));\n```\n\n\n\n需要注意的是，除了第一个阶段，其他阶段同一个阶段的BeanPostProcessor是在全部实例化完成以后才会统一注册到beanFactory的，因此，同一个阶段的BeanPostProcessor及其依赖的Bean在实例化的时候是无法享受到相同阶段但是先实例化的BeanPostProcessor的“服务”的，因为它们还没有注册。\n\n从上面调试与源代码分析，BeanPostProcessor的实例化与注册分为四个阶段，第一阶段applicationContext内置阶段、第二阶段priorityOrdered阶段、第三阶段Ordered阶段、第四阶段nonOrdered阶段。而BeanPostProcessor同时也是Bean，其注册之前一定先实例化。而且是分批实例化和注册，也就是属于同一批的BeanPostProcesser全部实例化完成后，再全部注册，不存在先实例化先注册的问题。而在实例化的时候其依赖的Bean同样要先实例化。\n\n因此导致一个结果就是，被PriorityOrderedBeanPostProcessor所依赖的Bean其初始化时无法享受到PriorityOrdered、Ordered、和nonOrdered的BeanPostProcessor的服务。而被OrderedBeanPostProcessor所依赖的Bean无法享受Ordered、和nonOrdered的BeanPostProcessor的服务。最后被nonOrderedBeanPostProcessor所依赖的Bean无法享受到nonOrderedBeanPostProcessor的服务。\n\n\n\n由于AsyncAnnotationBeanPostProcessor的启动阶段是Ordered(下面代码取自EnableAsync)，因此我们需要确保没有任何priorityOrdered和Ordered的BeanPostProcessor直接或间接的依赖到MailService。\n\n```\n/**\n     * Indicate the order in which the {@link AsyncAnnotationBeanPostProcessor}\n     * should be applied.\n     * <p>The default is {@link Ordered#LOWEST_PRECEDENCE} in order to run\n     * after all other post-processors, so that it can add an advisor to\n     * existing proxies rather than double-proxy.\n     */\n    int order() default Ordered.LOWEST_PRECEDENCE;\n```\n\n\n----------\n\n\n - **总结**\n\nBeanPostProcessor的启动时机。分为四个阶段，第一阶段context内置阶段、第二阶段priorityOrdered阶段、第三阶段Ordered阶段、第四阶段nonOrdered阶段。\n而BeanPostProcessor同时也是Bean，其注册之前一定先实例化。而且是分批实例化和注册，也就是属于同一批的BeanPostProcesser全部实例化完成后，再全部注册，不存在先实例化先注册的问题。而在实例化的时候其依赖的Bean同样要先实例化。\nBeanPostProcessor实例化时，自动依赖注入根据类型获得需要注入的Bean时，会将某些符合条件的Bean（FactoryBean并且其FactoryBeanFactory已经实例化的）先实例化，如果此FacotryBean又依赖其他普通Bean，会导致该Bean提前启动，造成误伤（无法享受部分BeanPostProcessor的后处理，例如典型的auto-proxy）\n\n\n  [1]: http://blog.didispace.com/springbootmailsender\n","slug":"Spring-aop-Trick","published":1,"updated":"2019-12-11T07:45:41.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eyo600053wzjfl4hei40","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><strong>背景：</strong><br>   多核CPU的普及对于多线程是契机.但是异步使用不当就会造成”困扰”.</p>\n<p><strong>原因：</strong><br>BeanPostProcessor是一个工厂钩子，允许Spring框架在新创建Bean实例时对其进行定制化修改。例如：通过检查其标注的接口或者使用代理对其进行包裹。应用上下文会从Bean定义中自动检测出BeanPostProcessor并将它们应用到随后创建的任何Bean上。<br>普通Bean对象的工厂允许在程序中注册post-processors，应用到随后在本工厂中创建的所有Bean上。典型的场景如：post-processors使用postProcessBeforeInitialization方法通过特征接口或其他类似的方式来填充Bean；而为创建好的Bean创建代理则一般使用postProcessAfterInitialization方法。<br>BeanPostProcessor本身也是一个Bean，一般而言其实例化时机要早过普通的Bean，但是BeanPostProcessor也会依赖一些Bean，这就导致了一些Bean的实例化早于BeanPostProcessor，由此会导致一些问题</p>\n<p> <strong>1. 问题场景</strong></p>\n<hr>\n<p>邮件异步发送可参考<a href=\"http://blog.didispace.com/springbootmailsender\" target=\"_blank\" rel=\"noopener\">程序猿DD的文章</a><br>异步配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">@EnableAsync</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">public class AsyncTaskPoolConfig extends AsyncConfigurerSupport &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    @Lazy</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    @Resource</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    private MailService mailService;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    @Override</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    public Executor getAsyncExecutor() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ThreadPoolTaskExecutor executor &#x3D; new ThreadPoolTaskExecutor();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setCorePoolSize(10);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setMaxPoolSize(20);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setQueueCapacity(100);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setKeepAliveSeconds(60);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setThreadNamePrefix(&quot;Hi-AsyncExecutor-&quot;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setRejectedExecutionHandler(getRejectedExecutionHandler());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F;防止任务未执行完毕就关闭线程池</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setWaitForTasksToCompleteOnShutdown(true);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setAwaitTerminationSeconds(60);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        return executor;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    private RejectedExecutionHandler getRejectedExecutionHandler() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        return new SpringRejectedExecutionHandler();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    class SpringRejectedExecutionHandler implements RejectedExecutionHandler &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">        @Override</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">        public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">            if (!executor.isShutdown()) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">                r.run();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">            log.error(&quot;rejectedTask in async method&quot;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">            sendMail(&quot;发生线程池堵塞&quot;, &quot;发生线程池堵塞.由主线程自己执行&quot;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    private void sendMail(String setSubject, String content) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">        mailService.send();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>按理说这样的配置在直接或者间接发送邮件时候应该都是异步的才对.可是这样配置过后邮件发送就莫名的成了同步阻塞了.</p>\n<p><strong>2、解决问题</strong></p>\n<hr>\n<p>2.1 spring async失效的表象原因<br>首先找到spring async失效的表象/直接原因.我们知道spring async使用Spring AOP和拦截器的方式拦截定义了特定标注的方法，然后执行特定逻辑。因此其实现依赖于动态代理机制auto-proxy，而经过初步调试发现，当被AsyncTaskPoolConfig依赖以后，mailService就不会被代理了，因此无从进入AOP的pointcut，也就是说AOP切面失效了！</p>\n<p>2.2 从spring async的集成机制分析</p>\n<p>为何没有被代理呢，我们先来确认一下正常情况下什么时候进行代理封装，根据Spring加载机制 BeanPostProcessor允许在Bean实例化的前后对其做一些特定的处理，比如代理。我们在BeanPostProcessor的实现类中发现了InstantiationAwareBeanPostProcessor、SmartInstantiationAwareBeanPostProcessor、AbstractAutoProxyCreator、InfrastructureAdvisorAutoProxyCreator等等。而反观@EnableAsync标注在启动的时候会@import AsyncConfigurationSelector，其selectImports方法会返回ProxyAsyncConfiguration和rg.springframework.scheduling.aspectj.AspectJAsyncConfiguration的全类名（我们定义了mode=AdviceMode.PROXY），也就是加载ProxyAsyncConfiguration。第一个的作用就是实例化AsyncAnnotationBeanPostProcessor便于进行addBeanPostProcessor操作。第二个的作用就是注册了AsyncAnnotationAdvisor和AnnotationAsyncExecutionInterceptor。<br>因此，当正常情况下，一个添加了spring async标注的bean会在创建后被InfrastructureAdvisorAutoProxyCreator基于advisor进行代理增强，代理后便可在拦截器AnnotationAsyncExecutionInterceptor中对其方法进行拦截，然后执行async相关逻辑。</p>\n<p>所以第一怀疑就是mailService没有经过InfrastructureAdvisorAutoProxyCreator的代理增强。果然调试发现，被AsyncTaskPoolConfig依赖的情况下在MailService的Bean实例化时，用于处理该Bean的PostBeanProcessor明显比没被AsyncTaskPoolConfig依赖时少，并且不含有InfrastructureAdvisorAutoProxyCreator。</p>\n<p>而且，被依赖时会多打出来一行信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">INFO   o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean &#39;mailService&#39; of type [com.forest10.spring.boot.family.async.MailService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span></pre></td></tr></table></figure>\n<p>据此推断，可能是MailService启动实例化时机过早，导致的后面那些BeanPostProcessor们来没来得及实例化及注册</p>\n<p>2.3 BeanPostProcessor启动阶段对其依赖的Bean造成的影响</p>\n<p>BeanPostProcessor的启动时机。在AbstractBeanFactory中维护了BeanPostProcessor的列表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">private final List&lt;BeanPostProcessor&gt; beanPostProcessors &#x3D; new ArrayList&lt;BeanPostProcessor&gt;();</span></pre></td></tr></table></figure>\n<p>并实现了ConfigurableBeanFactory定义的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">void addBeanPostProcessor(BeanPostProcessor beanPostProcessor);</span></pre></td></tr></table></figure>\n<p>第一阶段是在启动时调用过程会调用AbstractApplicationContext.refresh()，其中的prepareBeanFactory方法中注册了ApplicationContextAwareProcessor、ApplicationListenerDetector：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));</span></pre></td></tr></table></figure>\n<p>其中对已经注册的BeanFactoryPostProcessors挨个调用其postProcessBeanFactory方法，其中有一个ConfigurationClassPostProcessor，其postProcessBeanFactory方法中注册了一个ImportAwareBeanPostProcessor：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory));</span></pre></td></tr></table></figure>\n<p>最后在registerBeanPostProcessors方法中调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);</span></pre></td></tr></table></figure>\n<p>在该方法中，首先注册BeanPostProcessorChecker：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</span></pre></td></tr></table></figure>\n<p>它会在Bean创建完后检查可在当前Bean上起作用的BeanPostProcessor个数与总的BeanPostProcessor个数，如果起作用的个数少于总数，则报出上面那句信息。</p>\n<p>然后分成三个阶段依次实例化并注册实现了PriorityOrdered的BeanPostProcessor、实现了Ordered的BeanPostProcessor、没实现Ordered的BeanPostProcessor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Separate between BeanPostProcessors that implement PriorityOrdered,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; Ordered, and the rest.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors &#x3D; new ArrayList&lt;BeanPostProcessor&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">        List&lt;BeanPostProcessor&gt; internalPostProcessors &#x3D; new ArrayList&lt;BeanPostProcessor&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        List&lt;String&gt; orderedPostProcessorNames &#x3D; new ArrayList&lt;String&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        List&lt;String&gt; nonOrderedPostProcessorNames &#x3D; new ArrayList&lt;String&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        for (String ppName : postProcessorNames) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">            if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">                BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">                priorityOrderedPostProcessors.add(pp);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">                if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    internalPostProcessors.add(pp);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">            else if (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">                orderedPostProcessorNames.add(ppName);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">            else &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">                nonOrderedPostProcessorNames.add(ppName);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; First, register the BeanPostProcessors that implement PriorityOrdered.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">        sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; Next, register the BeanPostProcessors that implement Ordered.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">        List&lt;BeanPostProcessor&gt; orderedPostProcessors &#x3D; new ArrayList&lt;BeanPostProcessor&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">        for (String ppName : orderedPostProcessorNames) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">            BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">            orderedPostProcessors.add(pp);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">            if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">                internalPostProcessors.add(pp);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">        sortPostProcessors(orderedPostProcessors, beanFactory);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">        registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; Now, register all regular BeanPostProcessors.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">        List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors &#x3D; new ArrayList&lt;BeanPostProcessor&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">        for (String ppName : nonOrderedPostProcessorNames) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">            BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">            nonOrderedPostProcessors.add(pp);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">            if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">                internalPostProcessors.add(pp);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">        registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; Finally, re-register all internal BeanPostProcessors.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">        sortPostProcessors(internalPostProcessors, beanFactory);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">        registerBeanPostProcessors(beanFactory, internalPostProcessors);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; Re-register post-processor for detecting inner beans as ApplicationListeners,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; moving it to the end of the processor chain (for picking up proxies etc).</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">        beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));</span></pre></td></tr></table></figure>\n\n\n\n<p>需要注意的是，除了第一个阶段，其他阶段同一个阶段的BeanPostProcessor是在全部实例化完成以后才会统一注册到beanFactory的，因此，同一个阶段的BeanPostProcessor及其依赖的Bean在实例化的时候是无法享受到相同阶段但是先实例化的BeanPostProcessor的“服务”的，因为它们还没有注册。</p>\n<p>从上面调试与源代码分析，BeanPostProcessor的实例化与注册分为四个阶段，第一阶段applicationContext内置阶段、第二阶段priorityOrdered阶段、第三阶段Ordered阶段、第四阶段nonOrdered阶段。而BeanPostProcessor同时也是Bean，其注册之前一定先实例化。而且是分批实例化和注册，也就是属于同一批的BeanPostProcesser全部实例化完成后，再全部注册，不存在先实例化先注册的问题。而在实例化的时候其依赖的Bean同样要先实例化。</p>\n<p>因此导致一个结果就是，被PriorityOrderedBeanPostProcessor所依赖的Bean其初始化时无法享受到PriorityOrdered、Ordered、和nonOrdered的BeanPostProcessor的服务。而被OrderedBeanPostProcessor所依赖的Bean无法享受Ordered、和nonOrdered的BeanPostProcessor的服务。最后被nonOrderedBeanPostProcessor所依赖的Bean无法享受到nonOrderedBeanPostProcessor的服务。</p>\n<p>由于AsyncAnnotationBeanPostProcessor的启动阶段是Ordered(下面代码取自EnableAsync)，因此我们需要确保没有任何priorityOrdered和Ordered的BeanPostProcessor直接或间接的依赖到MailService。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">     * Indicate the order in which the &#123;@link AsyncAnnotationBeanPostProcessor&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">     * should be applied.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">     * &lt;p&gt;The default is &#123;@link Ordered#LOWEST_PRECEDENCE&#125; in order to run</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">     * after all other post-processors, so that it can add an advisor to</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">     * existing proxies rather than double-proxy.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">     *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    int order() default Ordered.LOWEST_PRECEDENCE;</span></pre></td></tr></table></figure>\n\n\n<hr>\n<ul>\n<li><strong>总结</strong></li>\n</ul>\n<p>BeanPostProcessor的启动时机。分为四个阶段，第一阶段context内置阶段、第二阶段priorityOrdered阶段、第三阶段Ordered阶段、第四阶段nonOrdered阶段。<br>而BeanPostProcessor同时也是Bean，其注册之前一定先实例化。而且是分批实例化和注册，也就是属于同一批的BeanPostProcesser全部实例化完成后，再全部注册，不存在先实例化先注册的问题。而在实例化的时候其依赖的Bean同样要先实例化。<br>BeanPostProcessor实例化时，自动依赖注入根据类型获得需要注入的Bean时，会将某些符合条件的Bean（FactoryBean并且其FactoryBeanFactory已经实例化的）先实例化，如果此FacotryBean又依赖其他普通Bean，会导致该Bean提前启动，造成误伤（无法享受部分BeanPostProcessor的后处理，例如典型的auto-proxy）</p>\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":"<p><strong>背景：</strong><br>   多核CPU的普及对于多线程是契机.但是异步使用不当就会造成”困扰”.</p>\n<p><strong>原因：</strong><br>BeanPostProcessor是一个工厂钩子，允许Spring框架在新创建Bean实例时对其进行定制化修改。例如：通过检查其标注的接口或者使用代理对其进行包裹。应用上下文会从Bean定义中自动检测出BeanPostProcessor并将它们应用到随后创建的任何Bean上。<br>普通Bean对象的工厂允许在程序中注册post-processors，应用到随后在本工厂中创建的所有Bean上。典型的场景如：post-processors使用postProcessBeforeInitialization方法通过特征接口或其他类似的方式来填充Bean；而为创建好的Bean创建代理则一般使用postProcessAfterInitialization方法。<br>BeanPostProcessor本身也是一个Bean，一般而言其实例化时机要早过普通的Bean，但是BeanPostProcessor也会依赖一些Bean，这就导致了一些Bean的实例化早于BeanPostProcessor，由此会导致一些问题</p>\n<p> <strong>1. 问题场景</strong></p>\n<hr>\n<p>邮件异步发送可参考<a href=\"http://blog.didispace.com/springbootmailsender\" target=\"_blank\" rel=\"noopener\">程序猿DD的文章</a><br>异步配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">@EnableAsync</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">public class AsyncTaskPoolConfig extends AsyncConfigurerSupport &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    @Lazy</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    @Resource</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    private MailService mailService;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    @Override</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    public Executor getAsyncExecutor() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ThreadPoolTaskExecutor executor &#x3D; new ThreadPoolTaskExecutor();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setCorePoolSize(10);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setMaxPoolSize(20);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setQueueCapacity(100);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setKeepAliveSeconds(60);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setThreadNamePrefix(&quot;Hi-AsyncExecutor-&quot;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setRejectedExecutionHandler(getRejectedExecutionHandler());</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F;防止任务未执行完毕就关闭线程池</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setWaitForTasksToCompleteOnShutdown(true);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        executor.setAwaitTerminationSeconds(60);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        return executor;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    private RejectedExecutionHandler getRejectedExecutionHandler() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        return new SpringRejectedExecutionHandler();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    class SpringRejectedExecutionHandler implements RejectedExecutionHandler &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">        @Override</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">        public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">            if (!executor.isShutdown()) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">                r.run();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">            log.error(&quot;rejectedTask in async method&quot;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">            sendMail(&quot;发生线程池堵塞&quot;, &quot;发生线程池堵塞.由主线程自己执行&quot;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    private void sendMail(String setSubject, String content) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">        mailService.send();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>按理说这样的配置在直接或者间接发送邮件时候应该都是异步的才对.可是这样配置过后邮件发送就莫名的成了同步阻塞了.</p>\n<p><strong>2、解决问题</strong></p>\n<hr>\n<p>2.1 spring async失效的表象原因<br>首先找到spring async失效的表象/直接原因.我们知道spring async使用Spring AOP和拦截器的方式拦截定义了特定标注的方法，然后执行特定逻辑。因此其实现依赖于动态代理机制auto-proxy，而经过初步调试发现，当被AsyncTaskPoolConfig依赖以后，mailService就不会被代理了，因此无从进入AOP的pointcut，也就是说AOP切面失效了！</p>\n<p>2.2 从spring async的集成机制分析</p>\n<p>为何没有被代理呢，我们先来确认一下正常情况下什么时候进行代理封装，根据Spring加载机制 BeanPostProcessor允许在Bean实例化的前后对其做一些特定的处理，比如代理。我们在BeanPostProcessor的实现类中发现了InstantiationAwareBeanPostProcessor、SmartInstantiationAwareBeanPostProcessor、AbstractAutoProxyCreator、InfrastructureAdvisorAutoProxyCreator等等。而反观@EnableAsync标注在启动的时候会@import AsyncConfigurationSelector，其selectImports方法会返回ProxyAsyncConfiguration和rg.springframework.scheduling.aspectj.AspectJAsyncConfiguration的全类名（我们定义了mode=AdviceMode.PROXY），也就是加载ProxyAsyncConfiguration。第一个的作用就是实例化AsyncAnnotationBeanPostProcessor便于进行addBeanPostProcessor操作。第二个的作用就是注册了AsyncAnnotationAdvisor和AnnotationAsyncExecutionInterceptor。<br>因此，当正常情况下，一个添加了spring async标注的bean会在创建后被InfrastructureAdvisorAutoProxyCreator基于advisor进行代理增强，代理后便可在拦截器AnnotationAsyncExecutionInterceptor中对其方法进行拦截，然后执行async相关逻辑。</p>\n<p>所以第一怀疑就是mailService没有经过InfrastructureAdvisorAutoProxyCreator的代理增强。果然调试发现，被AsyncTaskPoolConfig依赖的情况下在MailService的Bean实例化时，用于处理该Bean的PostBeanProcessor明显比没被AsyncTaskPoolConfig依赖时少，并且不含有InfrastructureAdvisorAutoProxyCreator。</p>\n<p>而且，被依赖时会多打出来一行信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">INFO   o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean &#39;mailService&#39; of type [com.forest10.spring.boot.family.async.MailService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span></pre></td></tr></table></figure>\n<p>据此推断，可能是MailService启动实例化时机过早，导致的后面那些BeanPostProcessor们来没来得及实例化及注册</p>\n<p>2.3 BeanPostProcessor启动阶段对其依赖的Bean造成的影响</p>\n<p>BeanPostProcessor的启动时机。在AbstractBeanFactory中维护了BeanPostProcessor的列表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">private final List&lt;BeanPostProcessor&gt; beanPostProcessors &#x3D; new ArrayList&lt;BeanPostProcessor&gt;();</span></pre></td></tr></table></figure>\n<p>并实现了ConfigurableBeanFactory定义的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">void addBeanPostProcessor(BeanPostProcessor beanPostProcessor);</span></pre></td></tr></table></figure>\n<p>第一阶段是在启动时调用过程会调用AbstractApplicationContext.refresh()，其中的prepareBeanFactory方法中注册了ApplicationContextAwareProcessor、ApplicationListenerDetector：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));</span></pre></td></tr></table></figure>\n<p>其中对已经注册的BeanFactoryPostProcessors挨个调用其postProcessBeanFactory方法，其中有一个ConfigurationClassPostProcessor，其postProcessBeanFactory方法中注册了一个ImportAwareBeanPostProcessor：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory));</span></pre></td></tr></table></figure>\n<p>最后在registerBeanPostProcessors方法中调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);</span></pre></td></tr></table></figure>\n<p>在该方法中，首先注册BeanPostProcessorChecker：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</span></pre></td></tr></table></figure>\n<p>它会在Bean创建完后检查可在当前Bean上起作用的BeanPostProcessor个数与总的BeanPostProcessor个数，如果起作用的个数少于总数，则报出上面那句信息。</p>\n<p>然后分成三个阶段依次实例化并注册实现了PriorityOrdered的BeanPostProcessor、实现了Ordered的BeanPostProcessor、没实现Ordered的BeanPostProcessor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Separate between BeanPostProcessors that implement PriorityOrdered,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; Ordered, and the rest.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors &#x3D; new ArrayList&lt;BeanPostProcessor&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">        List&lt;BeanPostProcessor&gt; internalPostProcessors &#x3D; new ArrayList&lt;BeanPostProcessor&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        List&lt;String&gt; orderedPostProcessorNames &#x3D; new ArrayList&lt;String&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        List&lt;String&gt; nonOrderedPostProcessorNames &#x3D; new ArrayList&lt;String&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        for (String ppName : postProcessorNames) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">            if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">                BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">                priorityOrderedPostProcessors.add(pp);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">                if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    internalPostProcessors.add(pp);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">            else if (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">                orderedPostProcessorNames.add(ppName);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">            else &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">                nonOrderedPostProcessorNames.add(ppName);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; First, register the BeanPostProcessors that implement PriorityOrdered.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">        sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; Next, register the BeanPostProcessors that implement Ordered.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">        List&lt;BeanPostProcessor&gt; orderedPostProcessors &#x3D; new ArrayList&lt;BeanPostProcessor&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">        for (String ppName : orderedPostProcessorNames) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">            BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">            orderedPostProcessors.add(pp);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">            if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">                internalPostProcessors.add(pp);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">        sortPostProcessors(orderedPostProcessors, beanFactory);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">        registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; Now, register all regular BeanPostProcessors.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">        List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors &#x3D; new ArrayList&lt;BeanPostProcessor&gt;();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">        for (String ppName : nonOrderedPostProcessorNames) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">            BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">            nonOrderedPostProcessors.add(pp);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">            if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">                internalPostProcessors.add(pp);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">        registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; Finally, re-register all internal BeanPostProcessors.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">        sortPostProcessors(internalPostProcessors, beanFactory);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">        registerBeanPostProcessors(beanFactory, internalPostProcessors);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; Re-register post-processor for detecting inner beans as ApplicationListeners,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; moving it to the end of the processor chain (for picking up proxies etc).</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">        beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));</span></pre></td></tr></table></figure>\n\n\n\n<p>需要注意的是，除了第一个阶段，其他阶段同一个阶段的BeanPostProcessor是在全部实例化完成以后才会统一注册到beanFactory的，因此，同一个阶段的BeanPostProcessor及其依赖的Bean在实例化的时候是无法享受到相同阶段但是先实例化的BeanPostProcessor的“服务”的，因为它们还没有注册。</p>\n<p>从上面调试与源代码分析，BeanPostProcessor的实例化与注册分为四个阶段，第一阶段applicationContext内置阶段、第二阶段priorityOrdered阶段、第三阶段Ordered阶段、第四阶段nonOrdered阶段。而BeanPostProcessor同时也是Bean，其注册之前一定先实例化。而且是分批实例化和注册，也就是属于同一批的BeanPostProcesser全部实例化完成后，再全部注册，不存在先实例化先注册的问题。而在实例化的时候其依赖的Bean同样要先实例化。</p>\n<p>因此导致一个结果就是，被PriorityOrderedBeanPostProcessor所依赖的Bean其初始化时无法享受到PriorityOrdered、Ordered、和nonOrdered的BeanPostProcessor的服务。而被OrderedBeanPostProcessor所依赖的Bean无法享受Ordered、和nonOrdered的BeanPostProcessor的服务。最后被nonOrderedBeanPostProcessor所依赖的Bean无法享受到nonOrderedBeanPostProcessor的服务。</p>\n<p>由于AsyncAnnotationBeanPostProcessor的启动阶段是Ordered(下面代码取自EnableAsync)，因此我们需要确保没有任何priorityOrdered和Ordered的BeanPostProcessor直接或间接的依赖到MailService。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">     * Indicate the order in which the &#123;@link AsyncAnnotationBeanPostProcessor&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">     * should be applied.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">     * &lt;p&gt;The default is &#123;@link Ordered#LOWEST_PRECEDENCE&#125; in order to run</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">     * after all other post-processors, so that it can add an advisor to</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">     * existing proxies rather than double-proxy.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">     *&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    int order() default Ordered.LOWEST_PRECEDENCE;</span></pre></td></tr></table></figure>\n\n\n<hr>\n<ul>\n<li><strong>总结</strong></li>\n</ul>\n<p>BeanPostProcessor的启动时机。分为四个阶段，第一阶段context内置阶段、第二阶段priorityOrdered阶段、第三阶段Ordered阶段、第四阶段nonOrdered阶段。<br>而BeanPostProcessor同时也是Bean，其注册之前一定先实例化。而且是分批实例化和注册，也就是属于同一批的BeanPostProcesser全部实例化完成后，再全部注册，不存在先实例化先注册的问题。而在实例化的时候其依赖的Bean同样要先实例化。<br>BeanPostProcessor实例化时，自动依赖注入根据类型获得需要注入的Bean时，会将某些符合条件的Bean（FactoryBean并且其FactoryBeanFactory已经实例化的）先实例化，如果此FacotryBean又依赖其他普通Bean，会导致该Bean提前启动，造成误伤（无法享受部分BeanPostProcessor的后处理，例如典型的auto-proxy）</p>\n"},{"title":"SpringBoot集锦","date":"2018-07-08T04:25:19.000Z","_content":"\n一.在做与JPA集成时，出现问题如下：\n\nCaused by: java.lang.IllegalArgumentException: Not an managed type: class com.entity.****\n\n解决：\n```\n1.确保实体类中@Entity使用的是javax.persistence.Entity，@Id使用的是javax.persistence.Id。\n\n2.SpringBoot main 启动类加入@EntityScan(value = \"com.xxxx.domain\")\n\n```\n\n二:与 mybatis 做集成时打印 log(sql和参数)\n解决：\n```\n1. mybtias.config 里 <setting name=\"logImpl\" value=\"STDOUT_LOGGING\" />。\n\n2.logback 加入    <logger name=\"mapper xml具体的包路径\" level=\"debug\" />\n\n\n```","source":"_posts/SpringBoot集锦.md","raw":"---\ntitle: SpringBoot集锦\ndate: 2018-07-08 12:25:19\ntags: [Spring,SpringBoot]\n---\n\n一.在做与JPA集成时，出现问题如下：\n\nCaused by: java.lang.IllegalArgumentException: Not an managed type: class com.entity.****\n\n解决：\n```\n1.确保实体类中@Entity使用的是javax.persistence.Entity，@Id使用的是javax.persistence.Id。\n\n2.SpringBoot main 启动类加入@EntityScan(value = \"com.xxxx.domain\")\n\n```\n\n二:与 mybatis 做集成时打印 log(sql和参数)\n解决：\n```\n1. mybtias.config 里 <setting name=\"logImpl\" value=\"STDOUT_LOGGING\" />。\n\n2.logback 加入    <logger name=\"mapper xml具体的包路径\" level=\"debug\" />\n\n\n```","slug":"SpringBoot集锦","published":1,"updated":"2019-12-16T08:16:47.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eyo900073wzjhtxf9tm0","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>一.在做与JPA集成时，出现问题如下：</p>\n<p>Caused by: java.lang.IllegalArgumentException: Not an managed type: class com.entity.****</p>\n<p>解决：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">1.确保实体类中@Entity使用的是javax.persistence.Entity，@Id使用的是javax.persistence.Id。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">2.SpringBoot main 启动类加入@EntityScan(value &#x3D; &quot;com.xxxx.domain&quot;)</span></pre></td></tr></table></figure>\n\n<p>二:与 mybatis 做集成时打印 log(sql和参数)<br>解决：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">1. mybtias.config 里 &lt;setting name&#x3D;&quot;logImpl&quot; value&#x3D;&quot;STDOUT_LOGGING&quot; &#x2F;&gt;。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">2.logback 加入    &lt;logger name&#x3D;&quot;mapper xml具体的包路径&quot; level&#x3D;&quot;debug&quot; &#x2F;&gt;</span></pre></td></tr></table></figure>","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":"<p>一.在做与JPA集成时，出现问题如下：</p>\n<p>Caused by: java.lang.IllegalArgumentException: Not an managed type: class com.entity.****</p>\n<p>解决：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">1.确保实体类中@Entity使用的是javax.persistence.Entity，@Id使用的是javax.persistence.Id。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">2.SpringBoot main 启动类加入@EntityScan(value &#x3D; &quot;com.xxxx.domain&quot;)</span></pre></td></tr></table></figure>\n\n<p>二:与 mybatis 做集成时打印 log(sql和参数)<br>解决：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">1. mybtias.config 里 &lt;setting name&#x3D;&quot;logImpl&quot; value&#x3D;&quot;STDOUT_LOGGING&quot; &#x2F;&gt;。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">2.logback 加入    &lt;logger name&#x3D;&quot;mapper xml具体的包路径&quot; level&#x3D;&quot;debug&quot; &#x2F;&gt;</span></pre></td></tr></table></figure>"},{"title":"jenkins几种远程构建方式","date":"2018-09-18T10:47:47.000Z","_content":"\n\n# 一 : 纯粹的WEB-URL调用(适合 github,阿里git)\n------\n### 1、首先去系统管理->管理插件里边，搜索并安装插件 Build Authorization Token Root Plugin\n\n \n### 2、然后点击右上角，你登录的用户名，再点击设置，找到API Token，复制下来你这个用户的Token，用于远程访问Job用。\n\n![avatar](http://image.forest10.com/pic/hexo/jenkins%E8%BF%9C%E7%A8%8B%E6%9E%84%E5%BB%BA%E7%9A%84Job%E7%9A%84Token.png)\n \n### 3、找到你要触发远程构建的Job，把这个复制的Token粘贴进去，点击保存\n![avatar](http://image.forest10.com/pic/hexo/jenkins%E8%BF%9C%E7%A8%8B%E6%9E%84%E5%BB%BA%E7%9A%84Job%E7%9A%84Token%E7%B2%98%E8%B4%B4.png)\n \n### 4、这样你就可以用如下地址来远程触发这个Job执行了，并且不用登录系统就可以触发\nhttp://192.168.3.11:8848/buildByToken/build?job=FlashRegistration&token=6f8ab858888888f844ab5e27a206692\nhttp://{IP}:{端口号}/buildByToken/build?job={Job名称}&token={Token}\n\n\nJob有参数，怎么在调用Job时传参数，好办，用下边的地址\nhttp://192.168.3.11:8848/buildByToken/buildWithParameters?job=FlashRegistration&token=6f8ab85afbda2f8f844ab5e27a206692&branch=master\nhttp://{IP}:{端口号}/buildByToken/buildWithParameters?job={Job名称}&token={Token}&{参数名}={参数值}\n\n# 二 : WEB_HOOK(适合 github,阿里git)\n### 1.阿里git使用 webhook\n\n\n#### step 1\n![avatar](http://image.forest10.com/pic/hexo/ali-git-webhook-first-setting.png)\n#### step 2\n![avatar](http://image.forest10.com/pic/hexo/ali-git-webhook-second-setting.png)\n\n### 2.github 使用 webhook\n\n\n\n#### step 1\n![avatar](http://image.forest10.com/pic/hexo/github-webhook-first-settings.png)\n\n#### step 2\n![avatar](http://image.forest10.com/pic/hexo/github-webhook-second-settings.png)\n\n------","source":"_posts/jenkins几种远程构建方式.md","raw":"---\ntitle: jenkins几种远程构建方式\ndate: 2018-09-18 18:47:47\ntags: [ci,jenkins]\ncategories: [tool,ci]\n---\n\n\n# 一 : 纯粹的WEB-URL调用(适合 github,阿里git)\n------\n### 1、首先去系统管理->管理插件里边，搜索并安装插件 Build Authorization Token Root Plugin\n\n \n### 2、然后点击右上角，你登录的用户名，再点击设置，找到API Token，复制下来你这个用户的Token，用于远程访问Job用。\n\n![avatar](http://image.forest10.com/pic/hexo/jenkins%E8%BF%9C%E7%A8%8B%E6%9E%84%E5%BB%BA%E7%9A%84Job%E7%9A%84Token.png)\n \n### 3、找到你要触发远程构建的Job，把这个复制的Token粘贴进去，点击保存\n![avatar](http://image.forest10.com/pic/hexo/jenkins%E8%BF%9C%E7%A8%8B%E6%9E%84%E5%BB%BA%E7%9A%84Job%E7%9A%84Token%E7%B2%98%E8%B4%B4.png)\n \n### 4、这样你就可以用如下地址来远程触发这个Job执行了，并且不用登录系统就可以触发\nhttp://192.168.3.11:8848/buildByToken/build?job=FlashRegistration&token=6f8ab858888888f844ab5e27a206692\nhttp://{IP}:{端口号}/buildByToken/build?job={Job名称}&token={Token}\n\n\nJob有参数，怎么在调用Job时传参数，好办，用下边的地址\nhttp://192.168.3.11:8848/buildByToken/buildWithParameters?job=FlashRegistration&token=6f8ab85afbda2f8f844ab5e27a206692&branch=master\nhttp://{IP}:{端口号}/buildByToken/buildWithParameters?job={Job名称}&token={Token}&{参数名}={参数值}\n\n# 二 : WEB_HOOK(适合 github,阿里git)\n### 1.阿里git使用 webhook\n\n\n#### step 1\n![avatar](http://image.forest10.com/pic/hexo/ali-git-webhook-first-setting.png)\n#### step 2\n![avatar](http://image.forest10.com/pic/hexo/ali-git-webhook-second-setting.png)\n\n### 2.github 使用 webhook\n\n\n\n#### step 1\n![avatar](http://image.forest10.com/pic/hexo/github-webhook-first-settings.png)\n\n#### step 2\n![avatar](http://image.forest10.com/pic/hexo/github-webhook-second-settings.png)\n\n------","slug":"jenkins几种远程构建方式","published":1,"updated":"2021-02-24T08:42:59.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eyob00093wzj6z4ld980","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"一-纯粹的WEB-URL调用-适合-github-阿里git\"><a href=\"#一-纯粹的WEB-URL调用-适合-github-阿里git\" class=\"headerlink\" title=\"一 : 纯粹的WEB-URL调用(适合 github,阿里git)\"></a>一 : 纯粹的WEB-URL调用(适合 github,阿里git)</h1><hr>\n<h3 id=\"1、首先去系统管理-gt-管理插件里边，搜索并安装插件-Build-Authorization-Token-Root-Plugin\"><a href=\"#1、首先去系统管理-gt-管理插件里边，搜索并安装插件-Build-Authorization-Token-Root-Plugin\" class=\"headerlink\" title=\"1、首先去系统管理-&gt;管理插件里边，搜索并安装插件 Build Authorization Token Root Plugin\"></a>1、首先去系统管理-&gt;管理插件里边，搜索并安装插件 Build Authorization Token Root Plugin</h3><h3 id=\"2、然后点击右上角，你登录的用户名，再点击设置，找到API-Token，复制下来你这个用户的Token，用于远程访问Job用。\"><a href=\"#2、然后点击右上角，你登录的用户名，再点击设置，找到API-Token，复制下来你这个用户的Token，用于远程访问Job用。\" class=\"headerlink\" title=\"2、然后点击右上角，你登录的用户名，再点击设置，找到API Token，复制下来你这个用户的Token，用于远程访问Job用。\"></a>2、然后点击右上角，你登录的用户名，再点击设置，找到API Token，复制下来你这个用户的Token，用于远程访问Job用。</h3><p><img alt=\"avatar\" data-src=\"http://image.forest10.com/pic/hexo/jenkins%E8%BF%9C%E7%A8%8B%E6%9E%84%E5%BB%BA%E7%9A%84Job%E7%9A%84Token.png\" class=\"lazyload\"></p>\n<h3 id=\"3、找到你要触发远程构建的Job，把这个复制的Token粘贴进去，点击保存\"><a href=\"#3、找到你要触发远程构建的Job，把这个复制的Token粘贴进去，点击保存\" class=\"headerlink\" title=\"3、找到你要触发远程构建的Job，把这个复制的Token粘贴进去，点击保存\"></a>3、找到你要触发远程构建的Job，把这个复制的Token粘贴进去，点击保存</h3><p><img alt=\"avatar\" data-src=\"http://image.forest10.com/pic/hexo/jenkins%E8%BF%9C%E7%A8%8B%E6%9E%84%E5%BB%BA%E7%9A%84Job%E7%9A%84Token%E7%B2%98%E8%B4%B4.png\" class=\"lazyload\"></p>\n<h3 id=\"4、这样你就可以用如下地址来远程触发这个Job执行了，并且不用登录系统就可以触发\"><a href=\"#4、这样你就可以用如下地址来远程触发这个Job执行了，并且不用登录系统就可以触发\" class=\"headerlink\" title=\"4、这样你就可以用如下地址来远程触发这个Job执行了，并且不用登录系统就可以触发\"></a>4、这样你就可以用如下地址来远程触发这个Job执行了，并且不用登录系统就可以触发</h3><p><a href=\"http://192.168.3.11:8848/buildByToken/build?job=FlashRegistration&amp;token=6f8ab858888888f844ab5e27a206692\" target=\"_blank\" rel=\"noopener\">http://192.168.3.11:8848/buildByToken/build?job=FlashRegistration&amp;token=6f8ab858888888f844ab5e27a206692</a><br>http://{IP}:{端口号}/buildByToken/build?job={Job名称}&amp;token={Token}</p>\n<p>Job有参数，怎么在调用Job时传参数，好办，用下边的地址<br><a href=\"http://192.168.3.11:8848/buildByToken/buildWithParameters?job=FlashRegistration&amp;token=6f8ab85afbda2f8f844ab5e27a206692&amp;branch=master\" target=\"_blank\" rel=\"noopener\">http://192.168.3.11:8848/buildByToken/buildWithParameters?job=FlashRegistration&amp;token=6f8ab85afbda2f8f844ab5e27a206692&amp;branch=master</a><br>http://{IP}:{端口号}/buildByToken/buildWithParameters?job={Job名称}&amp;token={Token}&amp;{参数名}={参数值}</p>\n<h1 id=\"二-WEB-HOOK-适合-github-阿里git\"><a href=\"#二-WEB-HOOK-适合-github-阿里git\" class=\"headerlink\" title=\"二 : WEB_HOOK(适合 github,阿里git)\"></a>二 : WEB_HOOK(适合 github,阿里git)</h1><h3 id=\"1-阿里git使用-webhook\"><a href=\"#1-阿里git使用-webhook\" class=\"headerlink\" title=\"1.阿里git使用 webhook\"></a>1.阿里git使用 webhook</h3><h4 id=\"step-1\"><a href=\"#step-1\" class=\"headerlink\" title=\"step 1\"></a>step 1</h4><p><img alt=\"avatar\" data-src=\"http://image.forest10.com/pic/hexo/ali-git-webhook-first-setting.png\" class=\"lazyload\"></p>\n<h4 id=\"step-2\"><a href=\"#step-2\" class=\"headerlink\" title=\"step 2\"></a>step 2</h4><p><img alt=\"avatar\" data-src=\"http://image.forest10.com/pic/hexo/ali-git-webhook-second-setting.png\" class=\"lazyload\"></p>\n<h3 id=\"2-github-使用-webhook\"><a href=\"#2-github-使用-webhook\" class=\"headerlink\" title=\"2.github 使用 webhook\"></a>2.github 使用 webhook</h3><h4 id=\"step-1-1\"><a href=\"#step-1-1\" class=\"headerlink\" title=\"step 1\"></a>step 1</h4><p><img alt=\"avatar\" data-src=\"http://image.forest10.com/pic/hexo/github-webhook-first-settings.png\" class=\"lazyload\"></p>\n<h4 id=\"step-2-1\"><a href=\"#step-2-1\" class=\"headerlink\" title=\"step 2\"></a>step 2</h4><p><img alt=\"avatar\" data-src=\"http://image.forest10.com/pic/hexo/github-webhook-second-settings.png\" class=\"lazyload\"></p>\n<hr>\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":"<h1 id=\"一-纯粹的WEB-URL调用-适合-github-阿里git\"><a href=\"#一-纯粹的WEB-URL调用-适合-github-阿里git\" class=\"headerlink\" title=\"一 : 纯粹的WEB-URL调用(适合 github,阿里git)\"></a>一 : 纯粹的WEB-URL调用(适合 github,阿里git)</h1><hr>\n<h3 id=\"1、首先去系统管理-gt-管理插件里边，搜索并安装插件-Build-Authorization-Token-Root-Plugin\"><a href=\"#1、首先去系统管理-gt-管理插件里边，搜索并安装插件-Build-Authorization-Token-Root-Plugin\" class=\"headerlink\" title=\"1、首先去系统管理-&gt;管理插件里边，搜索并安装插件 Build Authorization Token Root Plugin\"></a>1、首先去系统管理-&gt;管理插件里边，搜索并安装插件 Build Authorization Token Root Plugin</h3><h3 id=\"2、然后点击右上角，你登录的用户名，再点击设置，找到API-Token，复制下来你这个用户的Token，用于远程访问Job用。\"><a href=\"#2、然后点击右上角，你登录的用户名，再点击设置，找到API-Token，复制下来你这个用户的Token，用于远程访问Job用。\" class=\"headerlink\" title=\"2、然后点击右上角，你登录的用户名，再点击设置，找到API Token，复制下来你这个用户的Token，用于远程访问Job用。\"></a>2、然后点击右上角，你登录的用户名，再点击设置，找到API Token，复制下来你这个用户的Token，用于远程访问Job用。</h3><p><img src=\"http://image.forest10.com/pic/hexo/jenkins%E8%BF%9C%E7%A8%8B%E6%9E%84%E5%BB%BA%E7%9A%84Job%E7%9A%84Token.png\" alt=\"avatar\"></p>\n<h3 id=\"3、找到你要触发远程构建的Job，把这个复制的Token粘贴进去，点击保存\"><a href=\"#3、找到你要触发远程构建的Job，把这个复制的Token粘贴进去，点击保存\" class=\"headerlink\" title=\"3、找到你要触发远程构建的Job，把这个复制的Token粘贴进去，点击保存\"></a>3、找到你要触发远程构建的Job，把这个复制的Token粘贴进去，点击保存</h3><p><img src=\"http://image.forest10.com/pic/hexo/jenkins%E8%BF%9C%E7%A8%8B%E6%9E%84%E5%BB%BA%E7%9A%84Job%E7%9A%84Token%E7%B2%98%E8%B4%B4.png\" alt=\"avatar\"></p>\n<h3 id=\"4、这样你就可以用如下地址来远程触发这个Job执行了，并且不用登录系统就可以触发\"><a href=\"#4、这样你就可以用如下地址来远程触发这个Job执行了，并且不用登录系统就可以触发\" class=\"headerlink\" title=\"4、这样你就可以用如下地址来远程触发这个Job执行了，并且不用登录系统就可以触发\"></a>4、这样你就可以用如下地址来远程触发这个Job执行了，并且不用登录系统就可以触发</h3><p><a href=\"http://192.168.3.11:8848/buildByToken/build?job=FlashRegistration&amp;token=6f8ab858888888f844ab5e27a206692\" target=\"_blank\" rel=\"noopener\">http://192.168.3.11:8848/buildByToken/build?job=FlashRegistration&amp;token=6f8ab858888888f844ab5e27a206692</a><br>http://{IP}:{端口号}/buildByToken/build?job={Job名称}&amp;token={Token}</p>\n<p>Job有参数，怎么在调用Job时传参数，好办，用下边的地址<br><a href=\"http://192.168.3.11:8848/buildByToken/buildWithParameters?job=FlashRegistration&amp;token=6f8ab85afbda2f8f844ab5e27a206692&amp;branch=master\" target=\"_blank\" rel=\"noopener\">http://192.168.3.11:8848/buildByToken/buildWithParameters?job=FlashRegistration&amp;token=6f8ab85afbda2f8f844ab5e27a206692&amp;branch=master</a><br>http://{IP}:{端口号}/buildByToken/buildWithParameters?job={Job名称}&amp;token={Token}&amp;{参数名}={参数值}</p>\n<h1 id=\"二-WEB-HOOK-适合-github-阿里git\"><a href=\"#二-WEB-HOOK-适合-github-阿里git\" class=\"headerlink\" title=\"二 : WEB_HOOK(适合 github,阿里git)\"></a>二 : WEB_HOOK(适合 github,阿里git)</h1><h3 id=\"1-阿里git使用-webhook\"><a href=\"#1-阿里git使用-webhook\" class=\"headerlink\" title=\"1.阿里git使用 webhook\"></a>1.阿里git使用 webhook</h3><h4 id=\"step-1\"><a href=\"#step-1\" class=\"headerlink\" title=\"step 1\"></a>step 1</h4><p><img src=\"http://image.forest10.com/pic/hexo/ali-git-webhook-first-setting.png\" alt=\"avatar\"></p>\n<h4 id=\"step-2\"><a href=\"#step-2\" class=\"headerlink\" title=\"step 2\"></a>step 2</h4><p><img src=\"http://image.forest10.com/pic/hexo/ali-git-webhook-second-setting.png\" alt=\"avatar\"></p>\n<h3 id=\"2-github-使用-webhook\"><a href=\"#2-github-使用-webhook\" class=\"headerlink\" title=\"2.github 使用 webhook\"></a>2.github 使用 webhook</h3><h4 id=\"step-1-1\"><a href=\"#step-1-1\" class=\"headerlink\" title=\"step 1\"></a>step 1</h4><p><img src=\"http://image.forest10.com/pic/hexo/github-webhook-first-settings.png\" alt=\"avatar\"></p>\n<h4 id=\"step-2-1\"><a href=\"#step-2-1\" class=\"headerlink\" title=\"step 2\"></a>step 2</h4><p><img src=\"http://image.forest10.com/pic/hexo/github-webhook-second-settings.png\" alt=\"avatar\"></p>\n<hr>\n"},{"title":"mysql高级","date":"2018-07-08T04:14:46.000Z","_content":"\n一.行级锁与表级锁\n\n```\n首先创建数据库\nCREATE TABLE `test` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `name` varchar(32) DEFAULT NULL,\n  `age` int(11) NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `test_name_index` (`name`),\n) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4\n```\n1.1 SELECT FOR Update会引起行/表级锁(4 core)\n\n1.11 实验有索引时候 \n```\nSET AUTOCOMMIT =0;START TRANSACTION ;\n\nSELECT * FROM test WHERE id=16 FOR UPDATE ;\n```\n此时会造成行级锁,表内其他操作不受影响.此时的 id 可以换成 name.(原表内 name 也是有索引的).其他文章吹捧的无主键就会造成表级锁是不对的.可以自己实验.\n总结来讲就是只要 where 后面跟的列是带有索引的,皆会造成行级锁\n\n```\nmysql 官网\nhttps://dev.mysql.com/doc/refman/5.7/en/innodb-locking-reads.html\n\n```\n\n错误结论原文出处:http://www.cnblogs.com/chenwenbiao/archive/2012/06/06/2537508.html\n![屏幕快照 2018-01-10 11.54.16.png](http://image.forest10.com/common/hexo/%E9%94%99%E8%AF%AF%E7%9A%84mysql%E8%A1%A8%E9%94%81%E7%BB%93%E8%AE%BA.png)\n\n\n1.12 无索引(分为真正无索引和有索引但是索引失效)\n    \n```\n无索引\nSET AUTOCOMMIT =0;START TRANSACTION ;\n\nSELECT * FROM test WHERE age=16 FOR UPDATE ;\n```\n\n```\n有索引但是使用方式造成索引失效\nSET AUTOCOMMIT =0;START TRANSACTION ;\n\nSELECT * FROM test WHERE LENGTH(name)>33  FOR UPDATE ;\n```\n此时都会造成表级锁\n\n\n\n\n\n\n","source":"_posts/mysql高级.md","raw":"---\ntitle: mysql高级\ndate: 2018-07-08 12:14:46\ntags: [backend,Mysql]\n---\n\n一.行级锁与表级锁\n\n```\n首先创建数据库\nCREATE TABLE `test` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `name` varchar(32) DEFAULT NULL,\n  `age` int(11) NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `test_name_index` (`name`),\n) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4\n```\n1.1 SELECT FOR Update会引起行/表级锁(4 core)\n\n1.11 实验有索引时候 \n```\nSET AUTOCOMMIT =0;START TRANSACTION ;\n\nSELECT * FROM test WHERE id=16 FOR UPDATE ;\n```\n此时会造成行级锁,表内其他操作不受影响.此时的 id 可以换成 name.(原表内 name 也是有索引的).其他文章吹捧的无主键就会造成表级锁是不对的.可以自己实验.\n总结来讲就是只要 where 后面跟的列是带有索引的,皆会造成行级锁\n\n```\nmysql 官网\nhttps://dev.mysql.com/doc/refman/5.7/en/innodb-locking-reads.html\n\n```\n\n错误结论原文出处:http://www.cnblogs.com/chenwenbiao/archive/2012/06/06/2537508.html\n![屏幕快照 2018-01-10 11.54.16.png](http://image.forest10.com/common/hexo/%E9%94%99%E8%AF%AF%E7%9A%84mysql%E8%A1%A8%E9%94%81%E7%BB%93%E8%AE%BA.png)\n\n\n1.12 无索引(分为真正无索引和有索引但是索引失效)\n    \n```\n无索引\nSET AUTOCOMMIT =0;START TRANSACTION ;\n\nSELECT * FROM test WHERE age=16 FOR UPDATE ;\n```\n\n```\n有索引但是使用方式造成索引失效\nSET AUTOCOMMIT =0;START TRANSACTION ;\n\nSELECT * FROM test WHERE LENGTH(name)>33  FOR UPDATE ;\n```\n此时都会造成表级锁\n\n\n\n\n\n\n","slug":"mysql高级","published":1,"updated":"2021-02-24T08:42:59.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eyog000d3wzj78vyfn9e","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>一.行级锁与表级锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">首先创建数据库</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &#96;test&#96; (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#96;name&#96; varchar(32) DEFAULT NULL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#96;age&#96; int(11) NOT NULL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  PRIMARY KEY (&#96;id&#96;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  KEY &#96;test_name_index&#96; (&#96;name&#96;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;15 DEFAULT CHARSET&#x3D;utf8mb4</span></pre></td></tr></table></figure>\n<p>1.1 SELECT FOR Update会引起行/表级锁(4 core)</p>\n<p>1.11 实验有索引时候 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">SET AUTOCOMMIT &#x3D;0;START TRANSACTION ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM test WHERE id&#x3D;16 FOR UPDATE ;</span></pre></td></tr></table></figure>\n<p>此时会造成行级锁,表内其他操作不受影响.此时的 id 可以换成 name.(原表内 name 也是有索引的).其他文章吹捧的无主键就会造成表级锁是不对的.可以自己实验.<br>总结来讲就是只要 where 后面跟的列是带有索引的,皆会造成行级锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">mysql 官网</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;innodb-locking-reads.html</span></pre></td></tr></table></figure>\n\n<p>错误结论原文出处:<a href=\"http://www.cnblogs.com/chenwenbiao/archive/2012/06/06/2537508.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/chenwenbiao/archive/2012/06/06/2537508.html</a><br><img alt=\"屏幕快照 2018-01-10 11.54.16.png\" data-src=\"http://image.forest10.com/common/hexo/%E9%94%99%E8%AF%AF%E7%9A%84mysql%E8%A1%A8%E9%94%81%E7%BB%93%E8%AE%BA.png\" class=\"lazyload\"></p>\n<p>1.12 无索引(分为真正无索引和有索引但是索引失效)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">无索引</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">SET AUTOCOMMIT &#x3D;0;START TRANSACTION ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM test WHERE age&#x3D;16 FOR UPDATE ;</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">有索引但是使用方式造成索引失效</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">SET AUTOCOMMIT &#x3D;0;START TRANSACTION ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM test WHERE LENGTH(name)&gt;33  FOR UPDATE ;</span></pre></td></tr></table></figure>\n<p>此时都会造成表级锁</p>\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":"<p>一.行级锁与表级锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">首先创建数据库</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &#96;test&#96; (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#96;name&#96; varchar(32) DEFAULT NULL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#96;age&#96; int(11) NOT NULL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  PRIMARY KEY (&#96;id&#96;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  KEY &#96;test_name_index&#96; (&#96;name&#96;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;15 DEFAULT CHARSET&#x3D;utf8mb4</span></pre></td></tr></table></figure>\n<p>1.1 SELECT FOR Update会引起行/表级锁(4 core)</p>\n<p>1.11 实验有索引时候 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">SET AUTOCOMMIT &#x3D;0;START TRANSACTION ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM test WHERE id&#x3D;16 FOR UPDATE ;</span></pre></td></tr></table></figure>\n<p>此时会造成行级锁,表内其他操作不受影响.此时的 id 可以换成 name.(原表内 name 也是有索引的).其他文章吹捧的无主键就会造成表级锁是不对的.可以自己实验.<br>总结来讲就是只要 where 后面跟的列是带有索引的,皆会造成行级锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">mysql 官网</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;innodb-locking-reads.html</span></pre></td></tr></table></figure>\n\n<p>错误结论原文出处:<a href=\"http://www.cnblogs.com/chenwenbiao/archive/2012/06/06/2537508.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/chenwenbiao/archive/2012/06/06/2537508.html</a><br><img src=\"http://image.forest10.com/common/hexo/%E9%94%99%E8%AF%AF%E7%9A%84mysql%E8%A1%A8%E9%94%81%E7%BB%93%E8%AE%BA.png\" alt=\"屏幕快照 2018-01-10 11.54.16.png\"></p>\n<p>1.12 无索引(分为真正无索引和有索引但是索引失效)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">无索引</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">SET AUTOCOMMIT &#x3D;0;START TRANSACTION ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM test WHERE age&#x3D;16 FOR UPDATE ;</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">有索引但是使用方式造成索引失效</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">SET AUTOCOMMIT &#x3D;0;START TRANSACTION ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM test WHERE LENGTH(name)&gt;33  FOR UPDATE ;</span></pre></td></tr></table></figure>\n<p>此时都会造成表级锁</p>\n"},{"title":"nginx rewrite解决新旧API域名的统一","date":"2018-07-08T04:00:29.000Z","_content":"\n大多数开发者在接手新公司以前业务之后,会有这样的困扰,比如原先公司的后端API接口为old.haha.com\n\n然后请求url为:http://old.haha.com/getUserName?userId=13, 这是一个标准的Api后端接口,如果有3-5个这样零散的接口,我相信大多数人都会疯掉.\n\n下面说下我的最佳实践(仅限于我自己的,我经过搜索之后没有得到我想要的文章,故写此文章)\n\n1.原始域名\n\nold.haha.com\n\n原始请求url\n\nhttp://old.haha.com/getUserName?userId=13\n\n2.新域名\n\napi.haha.com\n\nnginx统一配置\n```\n  server {\n    listen       80;\n    server_name  old.haha.com;//这里是以前的老Api域名\n    rewrite ^/ http://api.haha.com$request_uri? permanent;\n}\n```\n配置生效之后,以后请求都会被转入api.haha.com\n比如\n\n针对原始请求:http://old.haha.com/getUserName?userId=13\n都会被请求转发到api.haha.com,二次请求域名为:http://api.haha.com/getUserName?userId=13\n","source":"_posts/nginx-rewrite解决新旧API域名的统一.md","raw":"---\ntitle: nginx rewrite解决新旧API域名的统一\ndate: 2018-07-08 12:00:29\ntags: [backend,Nginx]\n---\n\n大多数开发者在接手新公司以前业务之后,会有这样的困扰,比如原先公司的后端API接口为old.haha.com\n\n然后请求url为:http://old.haha.com/getUserName?userId=13, 这是一个标准的Api后端接口,如果有3-5个这样零散的接口,我相信大多数人都会疯掉.\n\n下面说下我的最佳实践(仅限于我自己的,我经过搜索之后没有得到我想要的文章,故写此文章)\n\n1.原始域名\n\nold.haha.com\n\n原始请求url\n\nhttp://old.haha.com/getUserName?userId=13\n\n2.新域名\n\napi.haha.com\n\nnginx统一配置\n```\n  server {\n    listen       80;\n    server_name  old.haha.com;//这里是以前的老Api域名\n    rewrite ^/ http://api.haha.com$request_uri? permanent;\n}\n```\n配置生效之后,以后请求都会被转入api.haha.com\n比如\n\n针对原始请求:http://old.haha.com/getUserName?userId=13\n都会被请求转发到api.haha.com,二次请求域名为:http://api.haha.com/getUserName?userId=13\n","slug":"nginx-rewrite解决新旧API域名的统一","published":1,"updated":"2021-02-24T08:42:59.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eyoi000f3wzj267h1b74","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>大多数开发者在接手新公司以前业务之后,会有这样的困扰,比如原先公司的后端API接口为old.haha.com</p>\n<p>然后请求url为:<a href=\"http://old.haha.com/getUserName?userId=13\" target=\"_blank\" rel=\"noopener\">http://old.haha.com/getUserName?userId=13</a>, 这是一个标准的Api后端接口,如果有3-5个这样零散的接口,我相信大多数人都会疯掉.</p>\n<p>下面说下我的最佳实践(仅限于我自己的,我经过搜索之后没有得到我想要的文章,故写此文章)</p>\n<p>1.原始域名</p>\n<p>old.haha.com</p>\n<p>原始请求url</p>\n<p><a href=\"http://old.haha.com/getUserName?userId=13\" target=\"_blank\" rel=\"noopener\">http://old.haha.com/getUserName?userId=13</a></p>\n<p>2.新域名</p>\n<p>api.haha.com</p>\n<p>nginx统一配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">  server &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    listen       80;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    server_name  old.haha.com;&#x2F;&#x2F;这里是以前的老Api域名</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    rewrite ^&#x2F; http:&#x2F;&#x2F;api.haha.com$request_uri? permanent;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>配置生效之后,以后请求都会被转入api.haha.com<br>比如</p>\n<p>针对原始请求:<a href=\"http://old.haha.com/getUserName?userId=13\" target=\"_blank\" rel=\"noopener\">http://old.haha.com/getUserName?userId=13</a><br>都会被请求转发到api.haha.com,二次请求域名为:<a href=\"http://api.haha.com/getUserName?userId=13\" target=\"_blank\" rel=\"noopener\">http://api.haha.com/getUserName?userId=13</a></p>\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":"<p>大多数开发者在接手新公司以前业务之后,会有这样的困扰,比如原先公司的后端API接口为old.haha.com</p>\n<p>然后请求url为:<a href=\"http://old.haha.com/getUserName?userId=13\" target=\"_blank\" rel=\"noopener\">http://old.haha.com/getUserName?userId=13</a>, 这是一个标准的Api后端接口,如果有3-5个这样零散的接口,我相信大多数人都会疯掉.</p>\n<p>下面说下我的最佳实践(仅限于我自己的,我经过搜索之后没有得到我想要的文章,故写此文章)</p>\n<p>1.原始域名</p>\n<p>old.haha.com</p>\n<p>原始请求url</p>\n<p><a href=\"http://old.haha.com/getUserName?userId=13\" target=\"_blank\" rel=\"noopener\">http://old.haha.com/getUserName?userId=13</a></p>\n<p>2.新域名</p>\n<p>api.haha.com</p>\n<p>nginx统一配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">  server &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    listen       80;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    server_name  old.haha.com;&#x2F;&#x2F;这里是以前的老Api域名</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    rewrite ^&#x2F; http:&#x2F;&#x2F;api.haha.com$request_uri? permanent;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>配置生效之后,以后请求都会被转入api.haha.com<br>比如</p>\n<p>针对原始请求:<a href=\"http://old.haha.com/getUserName?userId=13\" target=\"_blank\" rel=\"noopener\">http://old.haha.com/getUserName?userId=13</a><br>都会被请求转发到api.haha.com,二次请求域名为:<a href=\"http://api.haha.com/getUserName?userId=13\" target=\"_blank\" rel=\"noopener\">http://api.haha.com/getUserName?userId=13</a></p>\n"},{"title":"ss-heroku-vpn","date":"2018-07-08T04:00:29.000Z","cover":"http://public-img.forest10.com/net/404.jpg","_content":"\n🚀ss-heroku\n====================================\n\n[Heroku](https://www.heroku.com/) 是一个支持多种编程语言的云平台即服务，ss-heroku 则是可部署在 Heroku 平台的 ss 服务。\n和 [shadowsocks](https://github.com/clowwindy/shadowsocks) 不同的是 ss-heroku 使用的 WebSocket 代替原本的 sockets。\n\n## 准备\n\n### 1. 注册 Heroku 帐号\nHeroku 提供免费账号，部分介绍如下：\n- 512 MB RAM per dyno\n- Free apps sleep automatically after 30 mins of inactivity to conserve your dyno hours\n- Free apps wake automatically when a web request is received\n\n\n注册地址：https://signup.heroku.com/ （注册和部署过程需要梯子--欲取之,先予之）\n## 部署\n1. 点击 [![](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy?template=https://github.com/Forest10/ss-heroku.git/tree/master)，[一键部署到heroku](https://heroku.com/deploy?template=https://github.com/Forest10/ss-heroku.git/tree/master)\n\n\n2. 设置 加密算法和app 密码\n\n![deploy](http://public-img.forest10.com/ss/heroku-deploy-detail.jpg)\n\n[](http://public-img.forest10.com/ss/heroku-deploy-detail.jpg)\n\n支持的加密算法类型如下https://github.com/mrluanma/shadowsocks-heroku#supported-ciphers\n\n## 启动本地 Client\n1. 下载release :\n* mac:http://static.forest10.com/ss/ss-h-mac.zip\n* win(64):http://static.forest10.com/ss/ss-h-win64.zip\n\n2. 修改config.json参数，运行ss-h.exe 或 start.vbs或win托盘工具taskbar.exe\n\n5. 启动成功，命令行显示：`server listening at { address: '127.0.0.1', family: 'IPv4', port: 1080 }`\n\n## 配置代理\n1. 下载：Chrome 浏览器 [SwitchyOmega](http://static.forest10.com/ss/SwitchyOmega.zip\n) 插件（解压之后开发者模式安装插件至谷歌浏览器), 导入[教程](http://public-img.forest10.com/ss/switchyOmega-import-bak.png)备份文件[SSHeroku.Bak\n](http://static.forest10.com/ss/SSHeroku.bak)）\n2. 配置：添加SwitchyOmega代理服务器\n```\n    代理协议： SOCKS5\n    代理服务器local_address：127.0.0.1 \n    代理端口local_port： 1080 \n```\n\n\n## 可选\n1. SwitchyOmega gfwList如果更新失败使用 ===>>> http://static.forest10.com/ss/gfwlist.txt\n2. heroku 30分钟内无请求会直接睡眠.可使用阿里云监控定时访问.\n[配置](http://public-img.forest10.com/ss/ali-monitor-4-wakeup-heroku-detail.png)\n![延迟](http://public-img.forest10.com/ss/ali-monitor-4-wakeup-heroku.png)\n\n3. 附上本地正常访问\n ![](http://public-img.forest10.com/ss/heroku-ss-local-client-show-detail-small.jpg)\n4. 访问github有困难的可以使用https://git.code.tencent.com/forest10-github/ss-heroku\n5. 感谢[七牛云](https://portal.qiniu.com/signup?code=1hkqx38g57yvm)提供的[免费图床](https://portal.qiniu.com/signup?code=1hkqx38g57yvm)以及[CDN](https://portal.qiniu.com/signup?code=1hkqx38g57yvm)支持\n\n\n","source":"_posts/ss-heroku-vpn.md","raw":"---\ntitle: ss-heroku-vpn\ndate: 2018-07-08 12:00:29\ntags: [vpn,google]\ncategories: [tool,vpn]\ncover: http://public-img.forest10.com/net/404.jpg\n---\n\n🚀ss-heroku\n====================================\n\n[Heroku](https://www.heroku.com/) 是一个支持多种编程语言的云平台即服务，ss-heroku 则是可部署在 Heroku 平台的 ss 服务。\n和 [shadowsocks](https://github.com/clowwindy/shadowsocks) 不同的是 ss-heroku 使用的 WebSocket 代替原本的 sockets。\n\n## 准备\n\n### 1. 注册 Heroku 帐号\nHeroku 提供免费账号，部分介绍如下：\n- 512 MB RAM per dyno\n- Free apps sleep automatically after 30 mins of inactivity to conserve your dyno hours\n- Free apps wake automatically when a web request is received\n\n\n注册地址：https://signup.heroku.com/ （注册和部署过程需要梯子--欲取之,先予之）\n## 部署\n1. 点击 [![](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy?template=https://github.com/Forest10/ss-heroku.git/tree/master)，[一键部署到heroku](https://heroku.com/deploy?template=https://github.com/Forest10/ss-heroku.git/tree/master)\n\n\n2. 设置 加密算法和app 密码\n\n![deploy](http://public-img.forest10.com/ss/heroku-deploy-detail.jpg)\n\n[](http://public-img.forest10.com/ss/heroku-deploy-detail.jpg)\n\n支持的加密算法类型如下https://github.com/mrluanma/shadowsocks-heroku#supported-ciphers\n\n## 启动本地 Client\n1. 下载release :\n* mac:http://static.forest10.com/ss/ss-h-mac.zip\n* win(64):http://static.forest10.com/ss/ss-h-win64.zip\n\n2. 修改config.json参数，运行ss-h.exe 或 start.vbs或win托盘工具taskbar.exe\n\n5. 启动成功，命令行显示：`server listening at { address: '127.0.0.1', family: 'IPv4', port: 1080 }`\n\n## 配置代理\n1. 下载：Chrome 浏览器 [SwitchyOmega](http://static.forest10.com/ss/SwitchyOmega.zip\n) 插件（解压之后开发者模式安装插件至谷歌浏览器), 导入[教程](http://public-img.forest10.com/ss/switchyOmega-import-bak.png)备份文件[SSHeroku.Bak\n](http://static.forest10.com/ss/SSHeroku.bak)）\n2. 配置：添加SwitchyOmega代理服务器\n```\n    代理协议： SOCKS5\n    代理服务器local_address：127.0.0.1 \n    代理端口local_port： 1080 \n```\n\n\n## 可选\n1. SwitchyOmega gfwList如果更新失败使用 ===>>> http://static.forest10.com/ss/gfwlist.txt\n2. heroku 30分钟内无请求会直接睡眠.可使用阿里云监控定时访问.\n[配置](http://public-img.forest10.com/ss/ali-monitor-4-wakeup-heroku-detail.png)\n![延迟](http://public-img.forest10.com/ss/ali-monitor-4-wakeup-heroku.png)\n\n3. 附上本地正常访问\n ![](http://public-img.forest10.com/ss/heroku-ss-local-client-show-detail-small.jpg)\n4. 访问github有困难的可以使用https://git.code.tencent.com/forest10-github/ss-heroku\n5. 感谢[七牛云](https://portal.qiniu.com/signup?code=1hkqx38g57yvm)提供的[免费图床](https://portal.qiniu.com/signup?code=1hkqx38g57yvm)以及[CDN](https://portal.qiniu.com/signup?code=1hkqx38g57yvm)支持\n\n\n","slug":"ss-heroku-vpn","published":1,"updated":"2021-02-24T08:42:59.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eyok000h3wzjesch36sr","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"🚀ss-heroku\"><a href=\"#🚀ss-heroku\" class=\"headerlink\" title=\"🚀ss-heroku\"></a>🚀ss-heroku</h1><p><a href=\"https://www.heroku.com/\" target=\"_blank\" rel=\"noopener\">Heroku</a> 是一个支持多种编程语言的云平台即服务，ss-heroku 则是可部署在 Heroku 平台的 ss 服务。<br>和 <a href=\"https://github.com/clowwindy/shadowsocks\" target=\"_blank\" rel=\"noopener\">shadowsocks</a> 不同的是 ss-heroku 使用的 WebSocket 代替原本的 sockets。</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"1-注册-Heroku-帐号\"><a href=\"#1-注册-Heroku-帐号\" class=\"headerlink\" title=\"1. 注册 Heroku 帐号\"></a>1. 注册 Heroku 帐号</h3><p>Heroku 提供免费账号，部分介绍如下：</p>\n<ul>\n<li>512 MB RAM per dyno</li>\n<li>Free apps sleep automatically after 30 mins of inactivity to conserve your dyno hours</li>\n<li>Free apps wake automatically when a web request is received</li>\n</ul>\n<p>注册地址：<a href=\"https://signup.heroku.com/\" target=\"_blank\" rel=\"noopener\">https://signup.heroku.com/</a> （注册和部署过程需要梯子–欲取之,先予之）</p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><ol>\n<li>点击 <a href=\"https://heroku.com/deploy?template=https://github.com/Forest10/ss-heroku.git/tree/master\" target=\"_blank\" rel=\"noopener\"><img alt data-src=\"https://www.herokucdn.com/deploy/button.png\" class=\"lazyload\"></a>，<a href=\"https://heroku.com/deploy?template=https://github.com/Forest10/ss-heroku.git/tree/master\" target=\"_blank\" rel=\"noopener\">一键部署到heroku</a></li>\n</ol>\n<ol start=\"2\">\n<li>设置 加密算法和app 密码</li>\n</ol>\n<p><img alt=\"deploy\" data-src=\"http://public-img.forest10.com/ss/heroku-deploy-detail.jpg\" class=\"lazyload\"></p>\n<p><a href=\"http://public-img.forest10.com/ss/heroku-deploy-detail.jpg\" target=\"_blank\" rel=\"noopener\"></a></p>\n<p>支持的加密算法类型如下<a href=\"https://github.com/mrluanma/shadowsocks-heroku#supported-ciphers\" target=\"_blank\" rel=\"noopener\">https://github.com/mrluanma/shadowsocks-heroku#supported-ciphers</a></p>\n<h2 id=\"启动本地-Client\"><a href=\"#启动本地-Client\" class=\"headerlink\" title=\"启动本地 Client\"></a>启动本地 Client</h2><ol>\n<li>下载release :</li>\n</ol>\n<ul>\n<li>mac:<a href=\"http://static.forest10.com/ss/ss-h-mac.zip\" target=\"_blank\" rel=\"noopener\">http://static.forest10.com/ss/ss-h-mac.zip</a></li>\n<li>win(64):<a href=\"http://static.forest10.com/ss/ss-h-win64.zip\" target=\"_blank\" rel=\"noopener\">http://static.forest10.com/ss/ss-h-win64.zip</a></li>\n</ul>\n<ol start=\"2\">\n<li><p>修改config.json参数，运行ss-h.exe 或 start.vbs或win托盘工具taskbar.exe</p>\n</li>\n<li><p>启动成功，命令行显示：<code>server listening at { address: &#39;127.0.0.1&#39;, family: &#39;IPv4&#39;, port: 1080 }</code></p>\n</li>\n</ol>\n<h2 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h2><ol>\n<li>下载：Chrome 浏览器 <a href=\"http://static.forest10.com/ss/SwitchyOmega.zip\" target=\"_blank\" rel=\"noopener\">SwitchyOmega</a> 插件（解压之后开发者模式安装插件至谷歌浏览器), 导入<a href=\"http://public-img.forest10.com/ss/switchyOmega-import-bak.png\" target=\"_blank\" rel=\"noopener\">教程</a>备份文件<a href=\"http://static.forest10.com/ss/SSHeroku.bak\" target=\"_blank\" rel=\"noopener\">SSHeroku.Bak\n</a>）</li>\n<li>配置：添加SwitchyOmega代理服务器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">代理协议： SOCKS5</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    代理服务器local_address：127.0.0.1 </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">代理端口local_port： 1080</span></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h2 id=\"可选\"><a href=\"#可选\" class=\"headerlink\" title=\"可选\"></a>可选</h2><ol>\n<li><p>SwitchyOmega gfwList如果更新失败使用 ===&gt;&gt;&gt; <a href=\"http://static.forest10.com/ss/gfwlist.txt\" target=\"_blank\" rel=\"noopener\">http://static.forest10.com/ss/gfwlist.txt</a></p>\n</li>\n<li><p>heroku 30分钟内无请求会直接睡眠.可使用阿里云监控定时访问.<br><a href=\"http://public-img.forest10.com/ss/ali-monitor-4-wakeup-heroku-detail.png\" target=\"_blank\" rel=\"noopener\">配置</a><br><img alt=\"延迟\" data-src=\"http://public-img.forest10.com/ss/ali-monitor-4-wakeup-heroku.png\" class=\"lazyload\"></p>\n</li>\n<li><p>附上本地正常访问<br><img alt data-src=\"http://public-img.forest10.com/ss/heroku-ss-local-client-show-detail-small.jpg\" class=\"lazyload\"></p>\n</li>\n<li><p>访问github有困难的可以使用<a href=\"https://git.code.tencent.com/forest10-github/ss-heroku\" target=\"_blank\" rel=\"noopener\">https://git.code.tencent.com/forest10-github/ss-heroku</a></p>\n</li>\n<li><p>感谢<a href=\"https://portal.qiniu.com/signup?code=1hkqx38g57yvm\" target=\"_blank\" rel=\"noopener\">七牛云</a>提供的<a href=\"https://portal.qiniu.com/signup?code=1hkqx38g57yvm\" target=\"_blank\" rel=\"noopener\">免费图床</a>以及<a href=\"https://portal.qiniu.com/signup?code=1hkqx38g57yvm\" target=\"_blank\" rel=\"noopener\">CDN</a>支持</p>\n</li>\n</ol>\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"excerpt":"","more":"<h1 id=\"🚀ss-heroku\"><a href=\"#🚀ss-heroku\" class=\"headerlink\" title=\"🚀ss-heroku\"></a>🚀ss-heroku</h1><p><a href=\"https://www.heroku.com/\" target=\"_blank\" rel=\"noopener\">Heroku</a> 是一个支持多种编程语言的云平台即服务，ss-heroku 则是可部署在 Heroku 平台的 ss 服务。<br>和 <a href=\"https://github.com/clowwindy/shadowsocks\" target=\"_blank\" rel=\"noopener\">shadowsocks</a> 不同的是 ss-heroku 使用的 WebSocket 代替原本的 sockets。</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"1-注册-Heroku-帐号\"><a href=\"#1-注册-Heroku-帐号\" class=\"headerlink\" title=\"1. 注册 Heroku 帐号\"></a>1. 注册 Heroku 帐号</h3><p>Heroku 提供免费账号，部分介绍如下：</p>\n<ul>\n<li>512 MB RAM per dyno</li>\n<li>Free apps sleep automatically after 30 mins of inactivity to conserve your dyno hours</li>\n<li>Free apps wake automatically when a web request is received</li>\n</ul>\n<p>注册地址：<a href=\"https://signup.heroku.com/\" target=\"_blank\" rel=\"noopener\">https://signup.heroku.com/</a> （注册和部署过程需要梯子–欲取之,先予之）</p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><ol>\n<li>点击 <a href=\"https://heroku.com/deploy?template=https://github.com/Forest10/ss-heroku.git/tree/master\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.herokucdn.com/deploy/button.png\" alt=\"\"></a>，<a href=\"https://heroku.com/deploy?template=https://github.com/Forest10/ss-heroku.git/tree/master\" target=\"_blank\" rel=\"noopener\">一键部署到heroku</a></li>\n</ol>\n<ol start=\"2\">\n<li>设置 加密算法和app 密码</li>\n</ol>\n<p><img src=\"http://public-img.forest10.com/ss/heroku-deploy-detail.jpg\" alt=\"deploy\"></p>\n<p><a href=\"http://public-img.forest10.com/ss/heroku-deploy-detail.jpg\" target=\"_blank\" rel=\"noopener\"></a></p>\n<p>支持的加密算法类型如下<a href=\"https://github.com/mrluanma/shadowsocks-heroku#supported-ciphers\" target=\"_blank\" rel=\"noopener\">https://github.com/mrluanma/shadowsocks-heroku#supported-ciphers</a></p>\n<h2 id=\"启动本地-Client\"><a href=\"#启动本地-Client\" class=\"headerlink\" title=\"启动本地 Client\"></a>启动本地 Client</h2><ol>\n<li>下载release :</li>\n</ol>\n<ul>\n<li>mac:<a href=\"http://static.forest10.com/ss/ss-h-mac.zip\" target=\"_blank\" rel=\"noopener\">http://static.forest10.com/ss/ss-h-mac.zip</a></li>\n<li>win(64):<a href=\"http://static.forest10.com/ss/ss-h-win64.zip\" target=\"_blank\" rel=\"noopener\">http://static.forest10.com/ss/ss-h-win64.zip</a></li>\n</ul>\n<ol start=\"2\">\n<li><p>修改config.json参数，运行ss-h.exe 或 start.vbs或win托盘工具taskbar.exe</p>\n</li>\n<li><p>启动成功，命令行显示：<code>server listening at { address: &#39;127.0.0.1&#39;, family: &#39;IPv4&#39;, port: 1080 }</code></p>\n</li>\n</ol>\n<h2 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h2><ol>\n<li>下载：Chrome 浏览器 <a href=\"http://static.forest10.com/ss/SwitchyOmega.zip\" target=\"_blank\" rel=\"noopener\">SwitchyOmega</a> 插件（解压之后开发者模式安装插件至谷歌浏览器), 导入<a href=\"http://public-img.forest10.com/ss/switchyOmega-import-bak.png\" target=\"_blank\" rel=\"noopener\">教程</a>备份文件<a href=\"http://static.forest10.com/ss/SSHeroku.bak\" target=\"_blank\" rel=\"noopener\">SSHeroku.Bak\n</a>）</li>\n<li>配置：添加SwitchyOmega代理服务器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">代理协议： SOCKS5</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    代理服务器local_address：127.0.0.1 </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">代理端口local_port： 1080</span></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h2 id=\"可选\"><a href=\"#可选\" class=\"headerlink\" title=\"可选\"></a>可选</h2><ol>\n<li><p>SwitchyOmega gfwList如果更新失败使用 ===&gt;&gt;&gt; <a href=\"http://static.forest10.com/ss/gfwlist.txt\" target=\"_blank\" rel=\"noopener\">http://static.forest10.com/ss/gfwlist.txt</a></p>\n</li>\n<li><p>heroku 30分钟内无请求会直接睡眠.可使用阿里云监控定时访问.<br><a href=\"http://public-img.forest10.com/ss/ali-monitor-4-wakeup-heroku-detail.png\" target=\"_blank\" rel=\"noopener\">配置</a><br><img src=\"http://public-img.forest10.com/ss/ali-monitor-4-wakeup-heroku.png\" alt=\"延迟\"></p>\n</li>\n<li><p>附上本地正常访问<br><img src=\"http://public-img.forest10.com/ss/heroku-ss-local-client-show-detail-small.jpg\" alt=\"\"></p>\n</li>\n<li><p>访问github有困难的可以使用<a href=\"https://git.code.tencent.com/forest10-github/ss-heroku\" target=\"_blank\" rel=\"noopener\">https://git.code.tencent.com/forest10-github/ss-heroku</a></p>\n</li>\n<li><p>感谢<a href=\"https://portal.qiniu.com/signup?code=1hkqx38g57yvm\" target=\"_blank\" rel=\"noopener\">七牛云</a>提供的<a href=\"https://portal.qiniu.com/signup?code=1hkqx38g57yvm\" target=\"_blank\" rel=\"noopener\">免费图床</a>以及<a href=\"https://portal.qiniu.com/signup?code=1hkqx38g57yvm\" target=\"_blank\" rel=\"noopener\">CDN</a>支持</p>\n</li>\n</ol>\n"},{"title":"妙用travis-ci实现gitee和github代码同步","date":"2019-11-26T10:47:47.000Z","cover":"http://public-img.forest10.com/oschina/gitee-log.png","_content":"\n\n\n7月底，GitHub 断供伊朗、克里米亚.\n11月伊始，GitLab 公开表示拒绝为中国&俄国人提供 offer.\n.....\n\n种种迹象在悄无声息的告诉我们是时候找到一个合适的国产化git工具了，在寻找国产化git时候,入选的有阿里git和腾讯git.毕竟都是大厂.后来发现他们不支持github项目迁移.所以就放弃了.\n这时候,**gitee** 是oschina给出的答案 —— 为记录自由思想和分享知识提供更专业的工具。 您可以使用gitee：\n\n> * 支持 Git 和 SVN\n> * 免费的私有仓库\n> * 已有超过 350 万的开发者选择码云\n\n码云提供了同步GitHub的选项,但是又带来了另一个问题.码云的同步需要手工动作才可以.并且每次gitHub有更新时候还需要手工同步一次.......\n\n正所谓懒人改变世界.是时候请出今天的大杀器了--\n## travis-ci\n------\n\n## 什么是 travis-ci\n\nTravis CI是国外新兴的开源持续集成构建项目，支持Github项目。使用十分方便。\n\n 1. 使用Github账号登录[Travis CI][1]；\n 2. 登录之后会自动同步Github项目，选择需要使用Travis CI的项目\n 3. 在项目的根目录新增.travis.yml文件，内容如下：\n```\n#指定运行环境\nlanguage: node_js\n#指定nodejs版本，可以指定多个\nnode_js:\n  - 0.12.5\n\n#运行的脚本命令\nscript:\n  - npm run ci\n\n#指定分支，只有指定的分支提交时才会运行脚本\nbranches:\n  only:\n    - master\n```\n更多语法请看[这里][2]。使用起来非常方便，这样当你每次向github push代码的时候，Travis CI就会自动运行.travis.yml里面的script。自动进行编译以及运行单测。\n\n### 1. 首先创建一个github工程,一个Gitee工程\n\n- [ ] 名称任意--比如travis-ci\n- [x] 必须是public的,因为org后缀的travis只支持public.如需private需到com\n\n\n### 2. 开始操作\n\n 1. 登录之后选择头像的settings\n![][3]\n\n 2. 找到自己创建的测试工程,打开按钮\n ![][4]\n\n 3. 进入设置,加入一些私密值设置,比如access_token(gitee的个人令牌需要提前创建,在设置里面的私人令牌)\n![][5]\n \n### 3. 将测试github工程clone至本地,在跟路径创建 .travis.yml\n\n```\ninstall:\n  - git clone https://${GITHUB_REF} githubTmp\n  # GITEE,需要注意的是gitee的对于command进行Pull和Push的处理跟GitHub 不一样.需要在token前加入userName作为命名空间限制.\n  # userName需要置换成自己的github用户名\n  - git clone https://userName:${GITEE_TOKEN}@${GITEE_REF}  giteeTmp\nscript:\n  - cd ./githubTmp\n  - git pull\n  - cd ../giteeTmp\n  - git pull\n  # 把github的文件全量复制到gitee中\n  - cp -R  ../githubTmp/* ./\n  # 设置用户名mail\n  - git config user.name \"userName\"\n  - git config user.email \"userName@gmail.com\"\n  # 进入gitee 开始操作\n  - git add .\n  - git commit -m \"Sync From GitHub By TravisCI With Build $TRAVIS_BUILD_NUMBER\"\n  # GITEE\n  - git push\n\nenv:\n  global:\n    - GITHUB_REF: github.com/userName/Travis-CI-.git\n    # gitee\n    - GITEE_REF: gitee.com/userName/Travis-CI.git\n\n```\n\n### 4. 可以更改下ReadMe等文件.完毕之后push\n\n\n### 5. 点击history,会看到最近的构建\n![][6]\n\n### 6. 查看详情\n![][7]\n\n### 7. 去码云看最新的push\n![妈妈再也不用担心我的github哪天被墙掉啦][8]\n\n### 8. 更详细的说明\n\n - 坚信懒人改变世界.能用计算机完成的任务.坚决不要手工搞定.\n - 有兴趣的朋友欢迎关注我的[Blog][9],还在奋笔疾书中,只分享实验过能用的经验.\n - 以上过程只是简单的使用了Travis-CI进行了自动化同步github和gitee代码---只针对master.全分支同步还在探索中.相信也太难不到哪儿去.\n - gitee对于command access_token并没有详细说明 (我一直在模拟github的提交模式: https://access_token@git_url), 导致前几次的同步一直失败.这点希望码云早点出关于access_token详细文档\n - 感谢[七牛云](https://portal.qiniu.com/signup?code=1hkqx38g57yvm)提供的[免费图床](https://portal.qiniu.com/signup?code=1hkqx38g57yvm)以及[CDN](https://portal.qiniu.com/signup?code=1hkqx38g57yvm)支持\n - 感谢[码云](https://gitee.com/Forest10)提供的[免费git](https://gitee.com/Forest10)以及[博客收录](https://gitee.com/Forest10)支持\n\n\n------\n  \n\n\n  [1]: https://travis-ci.org/\n  [2]: https://docs.travis-ci.org/\n  [3]: http://public-img.forest10.com/oschina/travis-ci-settings-01.png\n  [4]: http://public-img.forest10.com/oschina/travis-ci-settings-02.png\n  [5]: http://public-img.forest10.com/oschina/travis-ci-settings-03.png\n  [6]: http://public-img.forest10.com/oschina/travis-ci-build-01.png\n  [7]: http://public-img.forest10.com/oschina/travis-ci-build-02.png\n  [8]: http://public-img.forest10.com/oschina/travis-ci-build-04.png\n  [9]: http://blog.forest10.com/","source":"_posts/妙用travis-ci实现gitee和github代码同步.md","raw":"---\ntitle: 妙用travis-ci实现gitee和github代码同步\ndate: 2019-11-26 18:47:47\ntags: [gitee,oschina,github,travis-ci]\ncategories: [tool,ci]\ncover: http://public-img.forest10.com/oschina/gitee-log.png\n---\n\n\n\n7月底，GitHub 断供伊朗、克里米亚.\n11月伊始，GitLab 公开表示拒绝为中国&俄国人提供 offer.\n.....\n\n种种迹象在悄无声息的告诉我们是时候找到一个合适的国产化git工具了，在寻找国产化git时候,入选的有阿里git和腾讯git.毕竟都是大厂.后来发现他们不支持github项目迁移.所以就放弃了.\n这时候,**gitee** 是oschina给出的答案 —— 为记录自由思想和分享知识提供更专业的工具。 您可以使用gitee：\n\n> * 支持 Git 和 SVN\n> * 免费的私有仓库\n> * 已有超过 350 万的开发者选择码云\n\n码云提供了同步GitHub的选项,但是又带来了另一个问题.码云的同步需要手工动作才可以.并且每次gitHub有更新时候还需要手工同步一次.......\n\n正所谓懒人改变世界.是时候请出今天的大杀器了--\n## travis-ci\n------\n\n## 什么是 travis-ci\n\nTravis CI是国外新兴的开源持续集成构建项目，支持Github项目。使用十分方便。\n\n 1. 使用Github账号登录[Travis CI][1]；\n 2. 登录之后会自动同步Github项目，选择需要使用Travis CI的项目\n 3. 在项目的根目录新增.travis.yml文件，内容如下：\n```\n#指定运行环境\nlanguage: node_js\n#指定nodejs版本，可以指定多个\nnode_js:\n  - 0.12.5\n\n#运行的脚本命令\nscript:\n  - npm run ci\n\n#指定分支，只有指定的分支提交时才会运行脚本\nbranches:\n  only:\n    - master\n```\n更多语法请看[这里][2]。使用起来非常方便，这样当你每次向github push代码的时候，Travis CI就会自动运行.travis.yml里面的script。自动进行编译以及运行单测。\n\n### 1. 首先创建一个github工程,一个Gitee工程\n\n- [ ] 名称任意--比如travis-ci\n- [x] 必须是public的,因为org后缀的travis只支持public.如需private需到com\n\n\n### 2. 开始操作\n\n 1. 登录之后选择头像的settings\n![][3]\n\n 2. 找到自己创建的测试工程,打开按钮\n ![][4]\n\n 3. 进入设置,加入一些私密值设置,比如access_token(gitee的个人令牌需要提前创建,在设置里面的私人令牌)\n![][5]\n \n### 3. 将测试github工程clone至本地,在跟路径创建 .travis.yml\n\n```\ninstall:\n  - git clone https://${GITHUB_REF} githubTmp\n  # GITEE,需要注意的是gitee的对于command进行Pull和Push的处理跟GitHub 不一样.需要在token前加入userName作为命名空间限制.\n  # userName需要置换成自己的github用户名\n  - git clone https://userName:${GITEE_TOKEN}@${GITEE_REF}  giteeTmp\nscript:\n  - cd ./githubTmp\n  - git pull\n  - cd ../giteeTmp\n  - git pull\n  # 把github的文件全量复制到gitee中\n  - cp -R  ../githubTmp/* ./\n  # 设置用户名mail\n  - git config user.name \"userName\"\n  - git config user.email \"userName@gmail.com\"\n  # 进入gitee 开始操作\n  - git add .\n  - git commit -m \"Sync From GitHub By TravisCI With Build $TRAVIS_BUILD_NUMBER\"\n  # GITEE\n  - git push\n\nenv:\n  global:\n    - GITHUB_REF: github.com/userName/Travis-CI-.git\n    # gitee\n    - GITEE_REF: gitee.com/userName/Travis-CI.git\n\n```\n\n### 4. 可以更改下ReadMe等文件.完毕之后push\n\n\n### 5. 点击history,会看到最近的构建\n![][6]\n\n### 6. 查看详情\n![][7]\n\n### 7. 去码云看最新的push\n![妈妈再也不用担心我的github哪天被墙掉啦][8]\n\n### 8. 更详细的说明\n\n - 坚信懒人改变世界.能用计算机完成的任务.坚决不要手工搞定.\n - 有兴趣的朋友欢迎关注我的[Blog][9],还在奋笔疾书中,只分享实验过能用的经验.\n - 以上过程只是简单的使用了Travis-CI进行了自动化同步github和gitee代码---只针对master.全分支同步还在探索中.相信也太难不到哪儿去.\n - gitee对于command access_token并没有详细说明 (我一直在模拟github的提交模式: https://access_token@git_url), 导致前几次的同步一直失败.这点希望码云早点出关于access_token详细文档\n - 感谢[七牛云](https://portal.qiniu.com/signup?code=1hkqx38g57yvm)提供的[免费图床](https://portal.qiniu.com/signup?code=1hkqx38g57yvm)以及[CDN](https://portal.qiniu.com/signup?code=1hkqx38g57yvm)支持\n - 感谢[码云](https://gitee.com/Forest10)提供的[免费git](https://gitee.com/Forest10)以及[博客收录](https://gitee.com/Forest10)支持\n\n\n------\n  \n\n\n  [1]: https://travis-ci.org/\n  [2]: https://docs.travis-ci.org/\n  [3]: http://public-img.forest10.com/oschina/travis-ci-settings-01.png\n  [4]: http://public-img.forest10.com/oschina/travis-ci-settings-02.png\n  [5]: http://public-img.forest10.com/oschina/travis-ci-settings-03.png\n  [6]: http://public-img.forest10.com/oschina/travis-ci-build-01.png\n  [7]: http://public-img.forest10.com/oschina/travis-ci-build-02.png\n  [8]: http://public-img.forest10.com/oschina/travis-ci-build-04.png\n  [9]: http://blog.forest10.com/","slug":"妙用travis-ci实现gitee和github代码同步","published":1,"updated":"2021-02-24T08:42:59.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eyol000i3wzj3lwkek0z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>7月底，GitHub 断供伊朗、克里米亚.<br>11月伊始，GitLab 公开表示拒绝为中国&amp;俄国人提供 offer.<br>…..</p>\n<p>种种迹象在悄无声息的告诉我们是时候找到一个合适的国产化git工具了，在寻找国产化git时候,入选的有阿里git和腾讯git.毕竟都是大厂.后来发现他们不支持github项目迁移.所以就放弃了.<br>这时候,<strong>gitee</strong> 是oschina给出的答案 —— 为记录自由思想和分享知识提供更专业的工具。 您可以使用gitee：</p>\n<blockquote>\n<ul>\n<li>支持 Git 和 SVN</li>\n<li>免费的私有仓库</li>\n<li>已有超过 350 万的开发者选择码云</li>\n</ul>\n</blockquote>\n<p>码云提供了同步GitHub的选项,但是又带来了另一个问题.码云的同步需要手工动作才可以.并且每次gitHub有更新时候还需要手工同步一次…….</p>\n<p>正所谓懒人改变世界.是时候请出今天的大杀器了–</p>\n<h2 id=\"travis-ci\"><a href=\"#travis-ci\" class=\"headerlink\" title=\"travis-ci\"></a>travis-ci</h2><hr>\n<h2 id=\"什么是-travis-ci\"><a href=\"#什么是-travis-ci\" class=\"headerlink\" title=\"什么是 travis-ci\"></a>什么是 travis-ci</h2><p>Travis CI是国外新兴的开源持续集成构建项目，支持Github项目。使用十分方便。</p>\n<ol>\n<li>使用Github账号登录<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI</a>；</li>\n<li>登录之后会自动同步Github项目，选择需要使用Travis CI的项目</li>\n<li>在项目的根目录新增.travis.yml文件，内容如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">#指定运行环境</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">#指定nodejs版本，可以指定多个</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">node_js:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - 0.12.5</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">#运行的脚本命令</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">script:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - npm run ci</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">#指定分支，只有指定的分支提交时才会运行脚本</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">branches:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  only:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    - master</span></pre></td></tr></table></figure>\n更多语法请看<a href=\"https://docs.travis-ci.org/\" target=\"_blank\" rel=\"noopener\">这里</a>。使用起来非常方便，这样当你每次向github push代码的时候，Travis CI就会自动运行.travis.yml里面的script。自动进行编译以及运行单测。</li>\n</ol>\n<h3 id=\"1-首先创建一个github工程-一个Gitee工程\"><a href=\"#1-首先创建一个github工程-一个Gitee工程\" class=\"headerlink\" title=\"1. 首先创建一个github工程,一个Gitee工程\"></a>1. 首先创建一个github工程,一个Gitee工程</h3><ul>\n<li><input disabled type=\"checkbox\"> 名称任意–比如travis-ci</li>\n<li><input checked disabled type=\"checkbox\"> 必须是public的,因为org后缀的travis只支持public.如需private需到com</li>\n</ul>\n<h3 id=\"2-开始操作\"><a href=\"#2-开始操作\" class=\"headerlink\" title=\"2. 开始操作\"></a>2. 开始操作</h3><ol>\n<li><p>登录之后选择头像的settings<br><img alt data-src=\"http://public-img.forest10.com/oschina/travis-ci-settings-01.png\" class=\"lazyload\"></p>\n</li>\n<li><p>找到自己创建的测试工程,打开按钮<br><img alt data-src=\"http://public-img.forest10.com/oschina/travis-ci-settings-02.png\" class=\"lazyload\"></p>\n</li>\n<li><p>进入设置,加入一些私密值设置,比如access_token(gitee的个人令牌需要提前创建,在设置里面的私人令牌)<br><img alt data-src=\"http://public-img.forest10.com/oschina/travis-ci-settings-03.png\" class=\"lazyload\"></p>\n</li>\n</ol>\n<h3 id=\"3-将测试github工程clone至本地-在跟路径创建-travis-yml\"><a href=\"#3-将测试github工程clone至本地-在跟路径创建-travis-yml\" class=\"headerlink\" title=\"3. 将测试github工程clone至本地,在跟路径创建 .travis.yml\"></a>3. 将测试github工程clone至本地,在跟路径创建 .travis.yml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">install:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git clone https:&#x2F;&#x2F;$&#123;GITHUB_REF&#125; githubTmp</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  # GITEE,需要注意的是gitee的对于command进行Pull和Push的处理跟GitHub 不一样.需要在token前加入userName作为命名空间限制.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  # userName需要置换成自己的github用户名</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git clone https:&#x2F;&#x2F;userName:$&#123;GITEE_TOKEN&#125;@$&#123;GITEE_REF&#125;  giteeTmp</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">script:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - cd .&#x2F;githubTmp</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git pull</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - cd ..&#x2F;giteeTmp</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git pull</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  # 把github的文件全量复制到gitee中</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - cp -R  ..&#x2F;githubTmp&#x2F;* .&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  # 设置用户名mail</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git config user.name &quot;userName&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git config user.email &quot;userName@gmail.com&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  # 进入gitee 开始操作</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git add .</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git commit -m &quot;Sync From GitHub By TravisCI With Build $TRAVIS_BUILD_NUMBER&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  # GITEE</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git push</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">env:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  global:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    - GITHUB_REF: github.com&#x2F;userName&#x2F;Travis-CI-.git</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    # gitee</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    - GITEE_REF: gitee.com&#x2F;userName&#x2F;Travis-CI.git</span></pre></td></tr></table></figure>\n\n<h3 id=\"4-可以更改下ReadMe等文件-完毕之后push\"><a href=\"#4-可以更改下ReadMe等文件-完毕之后push\" class=\"headerlink\" title=\"4. 可以更改下ReadMe等文件.完毕之后push\"></a>4. 可以更改下ReadMe等文件.完毕之后push</h3><h3 id=\"5-点击history-会看到最近的构建\"><a href=\"#5-点击history-会看到最近的构建\" class=\"headerlink\" title=\"5. 点击history,会看到最近的构建\"></a>5. 点击history,会看到最近的构建</h3><p><img alt data-src=\"http://public-img.forest10.com/oschina/travis-ci-build-01.png\" class=\"lazyload\"></p>\n<h3 id=\"6-查看详情\"><a href=\"#6-查看详情\" class=\"headerlink\" title=\"6. 查看详情\"></a>6. 查看详情</h3><p><img alt data-src=\"http://public-img.forest10.com/oschina/travis-ci-build-02.png\" class=\"lazyload\"></p>\n<h3 id=\"7-去码云看最新的push\"><a href=\"#7-去码云看最新的push\" class=\"headerlink\" title=\"7. 去码云看最新的push\"></a>7. 去码云看最新的push</h3><p><img alt=\"妈妈再也不用担心我的github哪天被墙掉啦\" data-src=\"http://public-img.forest10.com/oschina/travis-ci-build-04.png\" class=\"lazyload\"></p>\n<h3 id=\"8-更详细的说明\"><a href=\"#8-更详细的说明\" class=\"headerlink\" title=\"8. 更详细的说明\"></a>8. 更详细的说明</h3><ul>\n<li>坚信懒人改变世界.能用计算机完成的任务.坚决不要手工搞定.</li>\n<li>有兴趣的朋友欢迎关注我的<a href=\"http://blog.forest10.com/\">Blog</a>,还在奋笔疾书中,只分享实验过能用的经验.</li>\n<li>以上过程只是简单的使用了Travis-CI进行了自动化同步github和gitee代码—只针对master.全分支同步还在探索中.相信也太难不到哪儿去.</li>\n<li>gitee对于command access_token并没有详细说明 (我一直在模拟github的提交模式: <a href=\"https://access_token@git_url\" target=\"_blank\" rel=\"noopener\">https://access_token@git_url</a>), 导致前几次的同步一直失败.这点希望码云早点出关于access_token详细文档</li>\n<li>感谢<a href=\"https://portal.qiniu.com/signup?code=1hkqx38g57yvm\" target=\"_blank\" rel=\"noopener\">七牛云</a>提供的<a href=\"https://portal.qiniu.com/signup?code=1hkqx38g57yvm\" target=\"_blank\" rel=\"noopener\">免费图床</a>以及<a href=\"https://portal.qiniu.com/signup?code=1hkqx38g57yvm\" target=\"_blank\" rel=\"noopener\">CDN</a>支持</li>\n<li>感谢<a href=\"https://gitee.com/Forest10\" target=\"_blank\" rel=\"noopener\">码云</a>提供的<a href=\"https://gitee.com/Forest10\" target=\"_blank\" rel=\"noopener\">免费git</a>以及<a href=\"https://gitee.com/Forest10\" target=\"_blank\" rel=\"noopener\">博客收录</a>支持</li>\n</ul>\n<hr>\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"excerpt":"","more":"<p>7月底，GitHub 断供伊朗、克里米亚.<br>11月伊始，GitLab 公开表示拒绝为中国&amp;俄国人提供 offer.<br>…..</p>\n<p>种种迹象在悄无声息的告诉我们是时候找到一个合适的国产化git工具了，在寻找国产化git时候,入选的有阿里git和腾讯git.毕竟都是大厂.后来发现他们不支持github项目迁移.所以就放弃了.<br>这时候,<strong>gitee</strong> 是oschina给出的答案 —— 为记录自由思想和分享知识提供更专业的工具。 您可以使用gitee：</p>\n<blockquote>\n<ul>\n<li>支持 Git 和 SVN</li>\n<li>免费的私有仓库</li>\n<li>已有超过 350 万的开发者选择码云</li>\n</ul>\n</blockquote>\n<p>码云提供了同步GitHub的选项,但是又带来了另一个问题.码云的同步需要手工动作才可以.并且每次gitHub有更新时候还需要手工同步一次…….</p>\n<p>正所谓懒人改变世界.是时候请出今天的大杀器了–</p>\n<h2 id=\"travis-ci\"><a href=\"#travis-ci\" class=\"headerlink\" title=\"travis-ci\"></a>travis-ci</h2><hr>\n<h2 id=\"什么是-travis-ci\"><a href=\"#什么是-travis-ci\" class=\"headerlink\" title=\"什么是 travis-ci\"></a>什么是 travis-ci</h2><p>Travis CI是国外新兴的开源持续集成构建项目，支持Github项目。使用十分方便。</p>\n<ol>\n<li>使用Github账号登录<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI</a>；</li>\n<li>登录之后会自动同步Github项目，选择需要使用Travis CI的项目</li>\n<li>在项目的根目录新增.travis.yml文件，内容如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">#指定运行环境</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">#指定nodejs版本，可以指定多个</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">node_js:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - 0.12.5</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">#运行的脚本命令</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">script:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - npm run ci</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">#指定分支，只有指定的分支提交时才会运行脚本</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">branches:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  only:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    - master</span></pre></td></tr></table></figure>\n更多语法请看<a href=\"https://docs.travis-ci.org/\" target=\"_blank\" rel=\"noopener\">这里</a>。使用起来非常方便，这样当你每次向github push代码的时候，Travis CI就会自动运行.travis.yml里面的script。自动进行编译以及运行单测。</li>\n</ol>\n<h3 id=\"1-首先创建一个github工程-一个Gitee工程\"><a href=\"#1-首先创建一个github工程-一个Gitee工程\" class=\"headerlink\" title=\"1. 首先创建一个github工程,一个Gitee工程\"></a>1. 首先创建一个github工程,一个Gitee工程</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 名称任意–比如travis-ci</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 必须是public的,因为org后缀的travis只支持public.如需private需到com</li>\n</ul>\n<h3 id=\"2-开始操作\"><a href=\"#2-开始操作\" class=\"headerlink\" title=\"2. 开始操作\"></a>2. 开始操作</h3><ol>\n<li><p>登录之后选择头像的settings<br><img src=\"http://public-img.forest10.com/oschina/travis-ci-settings-01.png\" alt=\"\"></p>\n</li>\n<li><p>找到自己创建的测试工程,打开按钮<br><img src=\"http://public-img.forest10.com/oschina/travis-ci-settings-02.png\" alt=\"\"></p>\n</li>\n<li><p>进入设置,加入一些私密值设置,比如access_token(gitee的个人令牌需要提前创建,在设置里面的私人令牌)<br><img src=\"http://public-img.forest10.com/oschina/travis-ci-settings-03.png\" alt=\"\"></p>\n</li>\n</ol>\n<h3 id=\"3-将测试github工程clone至本地-在跟路径创建-travis-yml\"><a href=\"#3-将测试github工程clone至本地-在跟路径创建-travis-yml\" class=\"headerlink\" title=\"3. 将测试github工程clone至本地,在跟路径创建 .travis.yml\"></a>3. 将测试github工程clone至本地,在跟路径创建 .travis.yml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">install:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git clone https:&#x2F;&#x2F;$&#123;GITHUB_REF&#125; githubTmp</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  # GITEE,需要注意的是gitee的对于command进行Pull和Push的处理跟GitHub 不一样.需要在token前加入userName作为命名空间限制.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  # userName需要置换成自己的github用户名</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git clone https:&#x2F;&#x2F;userName:$&#123;GITEE_TOKEN&#125;@$&#123;GITEE_REF&#125;  giteeTmp</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">script:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - cd .&#x2F;githubTmp</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git pull</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - cd ..&#x2F;giteeTmp</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git pull</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  # 把github的文件全量复制到gitee中</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - cp -R  ..&#x2F;githubTmp&#x2F;* .&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  # 设置用户名mail</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git config user.name &quot;userName&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git config user.email &quot;userName@gmail.com&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  # 进入gitee 开始操作</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git add .</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git commit -m &quot;Sync From GitHub By TravisCI With Build $TRAVIS_BUILD_NUMBER&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  # GITEE</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  - git push</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">env:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  global:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    - GITHUB_REF: github.com&#x2F;userName&#x2F;Travis-CI-.git</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    # gitee</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    - GITEE_REF: gitee.com&#x2F;userName&#x2F;Travis-CI.git</span></pre></td></tr></table></figure>\n\n<h3 id=\"4-可以更改下ReadMe等文件-完毕之后push\"><a href=\"#4-可以更改下ReadMe等文件-完毕之后push\" class=\"headerlink\" title=\"4. 可以更改下ReadMe等文件.完毕之后push\"></a>4. 可以更改下ReadMe等文件.完毕之后push</h3><h3 id=\"5-点击history-会看到最近的构建\"><a href=\"#5-点击history-会看到最近的构建\" class=\"headerlink\" title=\"5. 点击history,会看到最近的构建\"></a>5. 点击history,会看到最近的构建</h3><p><img src=\"http://public-img.forest10.com/oschina/travis-ci-build-01.png\" alt=\"\"></p>\n<h3 id=\"6-查看详情\"><a href=\"#6-查看详情\" class=\"headerlink\" title=\"6. 查看详情\"></a>6. 查看详情</h3><p><img src=\"http://public-img.forest10.com/oschina/travis-ci-build-02.png\" alt=\"\"></p>\n<h3 id=\"7-去码云看最新的push\"><a href=\"#7-去码云看最新的push\" class=\"headerlink\" title=\"7. 去码云看最新的push\"></a>7. 去码云看最新的push</h3><p><img src=\"http://public-img.forest10.com/oschina/travis-ci-build-04.png\" alt=\"妈妈再也不用担心我的github哪天被墙掉啦\"></p>\n<h3 id=\"8-更详细的说明\"><a href=\"#8-更详细的说明\" class=\"headerlink\" title=\"8. 更详细的说明\"></a>8. 更详细的说明</h3><ul>\n<li>坚信懒人改变世界.能用计算机完成的任务.坚决不要手工搞定.</li>\n<li>有兴趣的朋友欢迎关注我的<a href=\"http://blog.forest10.com/\">Blog</a>,还在奋笔疾书中,只分享实验过能用的经验.</li>\n<li>以上过程只是简单的使用了Travis-CI进行了自动化同步github和gitee代码—只针对master.全分支同步还在探索中.相信也太难不到哪儿去.</li>\n<li>gitee对于command access_token并没有详细说明 (我一直在模拟github的提交模式: <a href=\"https://access_token@git_url\" target=\"_blank\" rel=\"noopener\">https://access_token@git_url</a>), 导致前几次的同步一直失败.这点希望码云早点出关于access_token详细文档</li>\n<li>感谢<a href=\"https://portal.qiniu.com/signup?code=1hkqx38g57yvm\" target=\"_blank\" rel=\"noopener\">七牛云</a>提供的<a href=\"https://portal.qiniu.com/signup?code=1hkqx38g57yvm\" target=\"_blank\" rel=\"noopener\">免费图床</a>以及<a href=\"https://portal.qiniu.com/signup?code=1hkqx38g57yvm\" target=\"_blank\" rel=\"noopener\">CDN</a>支持</li>\n<li>感谢<a href=\"https://gitee.com/Forest10\" target=\"_blank\" rel=\"noopener\">码云</a>提供的<a href=\"https://gitee.com/Forest10\" target=\"_blank\" rel=\"noopener\">免费git</a>以及<a href=\"https://gitee.com/Forest10\" target=\"_blank\" rel=\"noopener\">博客收录</a>支持</li>\n</ul>\n<hr>\n"},{"title":"开发基本规范","date":"2018-01-28T06:24:35.000Z","_content":"## Basic quality:\n* 字段注释需要完备\n* [格式化挺重要的](https://www.v2ex.com/t/489742?p=2).是基本素质.\n* controller里写大量逻辑在哪里也说不通.\n## 最佳实践:\n\n* 自动拆箱NPE问题.\n* 使用占位符打印log能减少字符串连接.\n* [不相信任何第三方接口](https://mp.weixin.qq.com/s/TNxkYeLyjlfZMBwn3kcRbA),注意降级及监控.\n* 尽量failFast,不要一大团逻辑包在一个if里.\n* 集合返回值返回对应的Collections.emptyXXX而不是null\n* 使用@ControllerAdvice注解代替大批量无意义try catch\n* 尽量不要使用BeanUtils.copyProperties这种形式进行对象间拷贝,如果嫌手工转化麻烦可使用generateo2o\n    * 两个拷贝对象参数类型名称必须全都一致才符合预期效果.两者有其一发生改变,IDE都不会前置帮你规避这些错误!\n    * 对象属性拷贝都是浅拷贝，意味着source内部的引用类型的属性值的变更会引起target对象值的变更)\n* 嵌套属性连续取值容易造成NPE.但也不应该用[层级null判断](http://www.importnew.com/22060.html)然后取值.\n* StringUtils.isNotBlank增加了对空白符的检查;使用StringUtils.EMPTY代替\"\"会更优雅.\n* 监控时间使用timer(String timerName, long milliseconds)而不是Timer.Context.因为如果把timer.stop()放在方法执行完之后执行的话本身方法有可能异常造成timer.stop()执行不到(不知道是否有内存泄漏问题),但是放在finally又会出现无论异常与否都会上报\"默认成功\"数据(相当于污染了成功指标)\n## DB层:\n\n* 使用对象而不是大量参数进行参数接收\n* mapper里面创建和更新时间都不该人为干预,数据库进行管理.\n* 关注下查询参数.数据库已经默认not null了.在真正执行查询之前应该直接逻辑判空然后返回,而不是依赖数据库做无意义判断.\n* 关注下返回值.数据库无唯一性索引.直接返回单体entity应该是有问题的.不要妄想依赖逻辑来保证.墨菲定律在数据库这儿很适用.\n","source":"_posts/开发基本规范.md","raw":"---\ntitle: 开发基本规范\ndate: 2018-01-28 14:24:35\ntags: [develop]\n---\n## Basic quality:\n* 字段注释需要完备\n* [格式化挺重要的](https://www.v2ex.com/t/489742?p=2).是基本素质.\n* controller里写大量逻辑在哪里也说不通.\n## 最佳实践:\n\n* 自动拆箱NPE问题.\n* 使用占位符打印log能减少字符串连接.\n* [不相信任何第三方接口](https://mp.weixin.qq.com/s/TNxkYeLyjlfZMBwn3kcRbA),注意降级及监控.\n* 尽量failFast,不要一大团逻辑包在一个if里.\n* 集合返回值返回对应的Collections.emptyXXX而不是null\n* 使用@ControllerAdvice注解代替大批量无意义try catch\n* 尽量不要使用BeanUtils.copyProperties这种形式进行对象间拷贝,如果嫌手工转化麻烦可使用generateo2o\n    * 两个拷贝对象参数类型名称必须全都一致才符合预期效果.两者有其一发生改变,IDE都不会前置帮你规避这些错误!\n    * 对象属性拷贝都是浅拷贝，意味着source内部的引用类型的属性值的变更会引起target对象值的变更)\n* 嵌套属性连续取值容易造成NPE.但也不应该用[层级null判断](http://www.importnew.com/22060.html)然后取值.\n* StringUtils.isNotBlank增加了对空白符的检查;使用StringUtils.EMPTY代替\"\"会更优雅.\n* 监控时间使用timer(String timerName, long milliseconds)而不是Timer.Context.因为如果把timer.stop()放在方法执行完之后执行的话本身方法有可能异常造成timer.stop()执行不到(不知道是否有内存泄漏问题),但是放在finally又会出现无论异常与否都会上报\"默认成功\"数据(相当于污染了成功指标)\n## DB层:\n\n* 使用对象而不是大量参数进行参数接收\n* mapper里面创建和更新时间都不该人为干预,数据库进行管理.\n* 关注下查询参数.数据库已经默认not null了.在真正执行查询之前应该直接逻辑判空然后返回,而不是依赖数据库做无意义判断.\n* 关注下返回值.数据库无唯一性索引.直接返回单体entity应该是有问题的.不要妄想依赖逻辑来保证.墨菲定律在数据库这儿很适用.\n","slug":"开发基本规范","published":1,"updated":"2021-02-24T08:42:59.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eyoo000k3wzjhjfkdxae","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"Basic-quality\"><a href=\"#Basic-quality\" class=\"headerlink\" title=\"Basic quality:\"></a>Basic quality:</h2><ul>\n<li><p>字段注释需要完备</p>\n</li>\n<li><p><a href=\"https://www.v2ex.com/t/489742?p=2\" target=\"_blank\" rel=\"noopener\">格式化挺重要的</a>.是基本素质.</p>\n</li>\n<li><p>controller里写大量逻辑在哪里也说不通.</p>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践:\"></a>最佳实践:</h2></li>\n<li><p>自动拆箱NPE问题.</p>\n</li>\n<li><p>使用占位符打印log能减少字符串连接.</p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s/TNxkYeLyjlfZMBwn3kcRbA\" target=\"_blank\" rel=\"noopener\">不相信任何第三方接口</a>,注意降级及监控.</p>\n</li>\n<li><p>尽量failFast,不要一大团逻辑包在一个if里.</p>\n</li>\n<li><p>集合返回值返回对应的Collections.emptyXXX而不是null</p>\n</li>\n<li><p>使用@ControllerAdvice注解代替大批量无意义try catch</p>\n</li>\n<li><p>尽量不要使用BeanUtils.copyProperties这种形式进行对象间拷贝,如果嫌手工转化麻烦可使用generateo2o</p>\n<ul>\n<li>两个拷贝对象参数类型名称必须全都一致才符合预期效果.两者有其一发生改变,IDE都不会前置帮你规避这些错误!</li>\n<li>对象属性拷贝都是浅拷贝，意味着source内部的引用类型的属性值的变更会引起target对象值的变更)</li>\n</ul>\n</li>\n<li><p>嵌套属性连续取值容易造成NPE.但也不应该用<a href=\"http://www.importnew.com/22060.html\" target=\"_blank\" rel=\"noopener\">层级null判断</a>然后取值.</p>\n</li>\n<li><p>StringUtils.isNotBlank增加了对空白符的检查;使用StringUtils.EMPTY代替””会更优雅.</p>\n</li>\n<li><p>监控时间使用timer(String timerName, long milliseconds)而不是Timer.Context.因为如果把timer.stop()放在方法执行完之后执行的话本身方法有可能异常造成timer.stop()执行不到(不知道是否有内存泄漏问题),但是放在finally又会出现无论异常与否都会上报”默认成功”数据(相当于污染了成功指标)</p>\n<h2 id=\"DB层\"><a href=\"#DB层\" class=\"headerlink\" title=\"DB层:\"></a>DB层:</h2></li>\n<li><p>使用对象而不是大量参数进行参数接收</p>\n</li>\n<li><p>mapper里面创建和更新时间都不该人为干预,数据库进行管理.</p>\n</li>\n<li><p>关注下查询参数.数据库已经默认not null了.在真正执行查询之前应该直接逻辑判空然后返回,而不是依赖数据库做无意义判断.</p>\n</li>\n<li><p>关注下返回值.数据库无唯一性索引.直接返回单体entity应该是有问题的.不要妄想依赖逻辑来保证.墨菲定律在数据库这儿很适用.</p>\n</li>\n</ul>\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":"<h2 id=\"Basic-quality\"><a href=\"#Basic-quality\" class=\"headerlink\" title=\"Basic quality:\"></a>Basic quality:</h2><ul>\n<li><p>字段注释需要完备</p>\n</li>\n<li><p><a href=\"https://www.v2ex.com/t/489742?p=2\" target=\"_blank\" rel=\"noopener\">格式化挺重要的</a>.是基本素质.</p>\n</li>\n<li><p>controller里写大量逻辑在哪里也说不通.</p>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践:\"></a>最佳实践:</h2></li>\n<li><p>自动拆箱NPE问题.</p>\n</li>\n<li><p>使用占位符打印log能减少字符串连接.</p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s/TNxkYeLyjlfZMBwn3kcRbA\" target=\"_blank\" rel=\"noopener\">不相信任何第三方接口</a>,注意降级及监控.</p>\n</li>\n<li><p>尽量failFast,不要一大团逻辑包在一个if里.</p>\n</li>\n<li><p>集合返回值返回对应的Collections.emptyXXX而不是null</p>\n</li>\n<li><p>使用@ControllerAdvice注解代替大批量无意义try catch</p>\n</li>\n<li><p>尽量不要使用BeanUtils.copyProperties这种形式进行对象间拷贝,如果嫌手工转化麻烦可使用generateo2o</p>\n<ul>\n<li>两个拷贝对象参数类型名称必须全都一致才符合预期效果.两者有其一发生改变,IDE都不会前置帮你规避这些错误!</li>\n<li>对象属性拷贝都是浅拷贝，意味着source内部的引用类型的属性值的变更会引起target对象值的变更)</li>\n</ul>\n</li>\n<li><p>嵌套属性连续取值容易造成NPE.但也不应该用<a href=\"http://www.importnew.com/22060.html\" target=\"_blank\" rel=\"noopener\">层级null判断</a>然后取值.</p>\n</li>\n<li><p>StringUtils.isNotBlank增加了对空白符的检查;使用StringUtils.EMPTY代替””会更优雅.</p>\n</li>\n<li><p>监控时间使用timer(String timerName, long milliseconds)而不是Timer.Context.因为如果把timer.stop()放在方法执行完之后执行的话本身方法有可能异常造成timer.stop()执行不到(不知道是否有内存泄漏问题),但是放在finally又会出现无论异常与否都会上报”默认成功”数据(相当于污染了成功指标)</p>\n<h2 id=\"DB层\"><a href=\"#DB层\" class=\"headerlink\" title=\"DB层:\"></a>DB层:</h2></li>\n<li><p>使用对象而不是大量参数进行参数接收</p>\n</li>\n<li><p>mapper里面创建和更新时间都不该人为干预,数据库进行管理.</p>\n</li>\n<li><p>关注下查询参数.数据库已经默认not null了.在真正执行查询之前应该直接逻辑判空然后返回,而不是依赖数据库做无意义判断.</p>\n</li>\n<li><p>关注下返回值.数据库无唯一性索引.直接返回单体entity应该是有问题的.不要妄想依赖逻辑来保证.墨菲定律在数据库这儿很适用.</p>\n</li>\n</ul>\n"},{"title":"苹果审核ipv6海外解决思路-About-APP-Store","date":"2035-07-06T15:16:14.000Z","_content":"\n\n[原始简书文章地址](https://www.jianshu.com/p/ef45cd73a08e)\n\n\n_**首先声明,一我不负责涉及你们内部服务器. 二是好好读文章,别人能过,你们也能过**_\n\n苹果6月1日出的`IPV6`协议阻碍了国内大多数积极开发者,我司也不外乎,经过三次被拒后,遂在网上查找关于`IPV6`审核的相关事宜,怪我年少无知以为这种开源协议的东西应该是免费的,当然,我说的免费是想着看几篇成熟的`IPV6`审核文章然后自己实践,奈何几乎所有关于苹果`IPV6`审核的文章到最后不是推荐买教育网转发要不就是直接把钱交给个人然后让第三方来协助通过.\n\n_**我实在无法想象一个仅仅靠着linux服务器外加nginx转发就能赚大钱的畸形小社会是怎样形成的,linux市值多少钱恐怕无人能说出.**_\n\n所有文章内说的苹果`IPV6`和后台服务器没关系是错误的,至少在请求转发层面是错误的.苹果使用`IPV6-ONLY`网络进行APP测试,如果服务器端支持`IPV6`的话则可以直接请求`IPV6`所对应的服务器进而使用nginx转发至相应的API接口.如果没有`IPV6`地址的话则直接通过NAT64转化为相应的IPV4进行请求相应API. 请注意这里的重点是这个`IPV6`,,服务器不能单单支持`IPV6`即可,所谓的支持不能仅仅是打开linux服务器内相应被封印的`IPV6`相关设置然后加一个`HE`隧道(当然这么着也有通过的,但是`HE`也是基于`IPV4`,最好还是不要走这条道)而是寻找一台_**真正有全球`IPV6`地址**_的服务器,_**这才是关键中的关键.**_至于其他文章所推崇的教育网转发,一是价格太贵,二是转发这事情由他人掌控多少有点看不起自己公司后端的意思(毕竟大多数不从事后端的人的想法就是感觉后端有毛事可干,喝喝喝)..\n\n经过第四次的痛苦实践,现将解决方案贴于文章下.希望能帮助广大开发者早日审核通过.\n\n##### 一、购买一台海外服务器,本人使用的是搬瓦工,直通车:\n[https://www.bwh1.net/aff.php?aff=10004](https://www.bwh1.net/aff.php?aff=10004)\n### 近些天有朋友反映搬瓦工部分ip被墙,所以如果想要过的可能性大一点可以直接选择阿里的海外版.###\n#####现在搬瓦工的区分openVz和KVM,OPENVZ支持IPV6\n\n#####到达购买页面之后买一台差不多配置的服务器即可.洛杉矶或者弗罗里达的都行.  \n\n购买之后:\n\n* 点击\n![](http://image.forest10.com/pic/hexo/banwagong-ipv6-addresses.png)\n\n* 获取全球唯一的IPV6,此IPV6为真实IPV6\n\n![](http://image.forest10.com/hexo/banwagong-true-ipv6-addresse.png)\n\n##### 二、海外服务器端安装nginx然后配置好转发至国内自己APP及API使用的服务器端口.\n1. 普通http\n```\nserver{\nlisten     你的海外服务器IPV4地址:80;\nlisten    你的海外服务器IPV6地址 :80;\nserver_name  你的域名;\nlocation /{\nproxy_pass http://你的国内服务器IPV4地址:端口/;\nproxy_set_header HOST $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n}\n```\n\n2. https\n```\nserver{\nlisten    你的海外服务器IPV4地址:80;\nlisten    你的海外服务器IPV6地址 :80;\nlisten      你的海外服务器IPV4地址:443 ssl;\nlisten      你的海外服务器IPV6地址:443 ssl;\nserver_name  你的域名;\nssl_certificate /usr/develop/nginx/sslkey/XX.crt;  #(证书公钥）\nssl_certificate_key /usr/develop/nginx/sslkey/XX.key;  #(证书私钥）\nssl_session_timeout 5m;\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;\nssl_prefer_server_ciphers on;\nadd_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\";\nadd_header Content-Security-Policy upgrade-insecure-requests;\nif ( $scheme = http ) {\nrewrite ^/(.*) https://$server_name/ permanent;\n}\nlocation / {\nproxy_pass http://你的国内服务器IPV4地址:端口/;\nproxy_set_header HOST $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n}\n```\n\n##### 三、以万网为例,修改域名解析至海外服务器,我直接把IPV4和IPV6都指向了海外,后来想想直接把IPV6指向海外服务器即可,IPV4不用变,这样可以在保证APP正常使用的情况下通过审核(不过还木有测试)  \n\n***\n\n##### 最后,对于你们那些利用信息不对称收钱的不要误会，我不是针对谁，我是说收钱的各位都是垃圾。\n\n![](http://image.forest10.com/common/%E5%9C%A8%E5%BA%A7%E7%9A%84%E5%90%84%E4%BD%8D%E9%83%BD%E6%98%AF%E5%9E%83%E5%9C%BE.jpg)\n\n![](http://image.forest10.com/common/%E6%9D%8E%E7%BA%B3%E6%96%AF%E7%AB%96%E4%B8%AD%E6%8C%87.jpg)\n\n对了,我不是前端,因为苹果说的只需要前端API层面支持而不需要后端服务器支持的狗屁话让我们前三次的审核浪费了大量时间,原先我一直没有改动后端后来在广大收钱者的感召下开始进行后端大改造.祝各位早日通过审核.\n\n_致敬李纳斯:_\n>“Software is like sex: it\"s better when it\"s free.”\n软件就像性,免费的比花钱的好得多.                    --*Linus Torvalds*\n\n\n流程图:\n![1529943565971.jpg](http://image.forest10.com/common/hexo/ipv6-apple-%E5%AE%A1%E6%A0%B8%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg)\n\n\n\n如果您renwei我的文章对于您苹果审核做出了贡献,多谢支持,金额随意.不强制.\n\n还有就是强调一下,这种知识确实不值几个钱,但是亲自动手操刀还是需要TIME的.都是混口饭吃,给点饭钱不多.\n\n\n![1475036463795.jpg](http://image.forest10.com/common/money/forest10-zfb-pay_code.jpg)\n","source":"_posts/苹果审核ipv6海外解决思路-About-APP-Store.md","raw":"---\ntitle: 苹果审核ipv6海外解决思路-About-APP-Store\ndate: 2035-07-06 23:16:14\ntags: [backend,Nginx,App-Store]\n---\n\n\n[原始简书文章地址](https://www.jianshu.com/p/ef45cd73a08e)\n\n\n_**首先声明,一我不负责涉及你们内部服务器. 二是好好读文章,别人能过,你们也能过**_\n\n苹果6月1日出的`IPV6`协议阻碍了国内大多数积极开发者,我司也不外乎,经过三次被拒后,遂在网上查找关于`IPV6`审核的相关事宜,怪我年少无知以为这种开源协议的东西应该是免费的,当然,我说的免费是想着看几篇成熟的`IPV6`审核文章然后自己实践,奈何几乎所有关于苹果`IPV6`审核的文章到最后不是推荐买教育网转发要不就是直接把钱交给个人然后让第三方来协助通过.\n\n_**我实在无法想象一个仅仅靠着linux服务器外加nginx转发就能赚大钱的畸形小社会是怎样形成的,linux市值多少钱恐怕无人能说出.**_\n\n所有文章内说的苹果`IPV6`和后台服务器没关系是错误的,至少在请求转发层面是错误的.苹果使用`IPV6-ONLY`网络进行APP测试,如果服务器端支持`IPV6`的话则可以直接请求`IPV6`所对应的服务器进而使用nginx转发至相应的API接口.如果没有`IPV6`地址的话则直接通过NAT64转化为相应的IPV4进行请求相应API. 请注意这里的重点是这个`IPV6`,,服务器不能单单支持`IPV6`即可,所谓的支持不能仅仅是打开linux服务器内相应被封印的`IPV6`相关设置然后加一个`HE`隧道(当然这么着也有通过的,但是`HE`也是基于`IPV4`,最好还是不要走这条道)而是寻找一台_**真正有全球`IPV6`地址**_的服务器,_**这才是关键中的关键.**_至于其他文章所推崇的教育网转发,一是价格太贵,二是转发这事情由他人掌控多少有点看不起自己公司后端的意思(毕竟大多数不从事后端的人的想法就是感觉后端有毛事可干,喝喝喝)..\n\n经过第四次的痛苦实践,现将解决方案贴于文章下.希望能帮助广大开发者早日审核通过.\n\n##### 一、购买一台海外服务器,本人使用的是搬瓦工,直通车:\n[https://www.bwh1.net/aff.php?aff=10004](https://www.bwh1.net/aff.php?aff=10004)\n### 近些天有朋友反映搬瓦工部分ip被墙,所以如果想要过的可能性大一点可以直接选择阿里的海外版.###\n#####现在搬瓦工的区分openVz和KVM,OPENVZ支持IPV6\n\n#####到达购买页面之后买一台差不多配置的服务器即可.洛杉矶或者弗罗里达的都行.  \n\n购买之后:\n\n* 点击\n![](http://image.forest10.com/pic/hexo/banwagong-ipv6-addresses.png)\n\n* 获取全球唯一的IPV6,此IPV6为真实IPV6\n\n![](http://image.forest10.com/hexo/banwagong-true-ipv6-addresse.png)\n\n##### 二、海外服务器端安装nginx然后配置好转发至国内自己APP及API使用的服务器端口.\n1. 普通http\n```\nserver{\nlisten     你的海外服务器IPV4地址:80;\nlisten    你的海外服务器IPV6地址 :80;\nserver_name  你的域名;\nlocation /{\nproxy_pass http://你的国内服务器IPV4地址:端口/;\nproxy_set_header HOST $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n}\n```\n\n2. https\n```\nserver{\nlisten    你的海外服务器IPV4地址:80;\nlisten    你的海外服务器IPV6地址 :80;\nlisten      你的海外服务器IPV4地址:443 ssl;\nlisten      你的海外服务器IPV6地址:443 ssl;\nserver_name  你的域名;\nssl_certificate /usr/develop/nginx/sslkey/XX.crt;  #(证书公钥）\nssl_certificate_key /usr/develop/nginx/sslkey/XX.key;  #(证书私钥）\nssl_session_timeout 5m;\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;\nssl_prefer_server_ciphers on;\nadd_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\";\nadd_header Content-Security-Policy upgrade-insecure-requests;\nif ( $scheme = http ) {\nrewrite ^/(.*) https://$server_name/ permanent;\n}\nlocation / {\nproxy_pass http://你的国内服务器IPV4地址:端口/;\nproxy_set_header HOST $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n}\n```\n\n##### 三、以万网为例,修改域名解析至海外服务器,我直接把IPV4和IPV6都指向了海外,后来想想直接把IPV6指向海外服务器即可,IPV4不用变,这样可以在保证APP正常使用的情况下通过审核(不过还木有测试)  \n\n***\n\n##### 最后,对于你们那些利用信息不对称收钱的不要误会，我不是针对谁，我是说收钱的各位都是垃圾。\n\n![](http://image.forest10.com/common/%E5%9C%A8%E5%BA%A7%E7%9A%84%E5%90%84%E4%BD%8D%E9%83%BD%E6%98%AF%E5%9E%83%E5%9C%BE.jpg)\n\n![](http://image.forest10.com/common/%E6%9D%8E%E7%BA%B3%E6%96%AF%E7%AB%96%E4%B8%AD%E6%8C%87.jpg)\n\n对了,我不是前端,因为苹果说的只需要前端API层面支持而不需要后端服务器支持的狗屁话让我们前三次的审核浪费了大量时间,原先我一直没有改动后端后来在广大收钱者的感召下开始进行后端大改造.祝各位早日通过审核.\n\n_致敬李纳斯:_\n>“Software is like sex: it\"s better when it\"s free.”\n软件就像性,免费的比花钱的好得多.                    --*Linus Torvalds*\n\n\n流程图:\n![1529943565971.jpg](http://image.forest10.com/common/hexo/ipv6-apple-%E5%AE%A1%E6%A0%B8%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg)\n\n\n\n如果您renwei我的文章对于您苹果审核做出了贡献,多谢支持,金额随意.不强制.\n\n还有就是强调一下,这种知识确实不值几个钱,但是亲自动手操刀还是需要TIME的.都是混口饭吃,给点饭钱不多.\n\n\n![1475036463795.jpg](http://image.forest10.com/common/money/forest10-zfb-pay_code.jpg)\n","slug":"苹果审核ipv6海外解决思路-About-APP-Store","published":1,"updated":"2021-02-24T08:42:59.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eyop000m3wzjfoda8v4o","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><a href=\"https://www.jianshu.com/p/ef45cd73a08e\" target=\"_blank\" rel=\"noopener\">原始简书文章地址</a></p>\n<p><em><strong>首先声明,一我不负责涉及你们内部服务器. 二是好好读文章,别人能过,你们也能过</strong></em></p>\n<p>苹果6月1日出的<code>IPV6</code>协议阻碍了国内大多数积极开发者,我司也不外乎,经过三次被拒后,遂在网上查找关于<code>IPV6</code>审核的相关事宜,怪我年少无知以为这种开源协议的东西应该是免费的,当然,我说的免费是想着看几篇成熟的<code>IPV6</code>审核文章然后自己实践,奈何几乎所有关于苹果<code>IPV6</code>审核的文章到最后不是推荐买教育网转发要不就是直接把钱交给个人然后让第三方来协助通过.</p>\n<p><em><strong>我实在无法想象一个仅仅靠着linux服务器外加nginx转发就能赚大钱的畸形小社会是怎样形成的,linux市值多少钱恐怕无人能说出.</strong></em></p>\n<p>所有文章内说的苹果<code>IPV6</code>和后台服务器没关系是错误的,至少在请求转发层面是错误的.苹果使用<code>IPV6-ONLY</code>网络进行APP测试,如果服务器端支持<code>IPV6</code>的话则可以直接请求<code>IPV6</code>所对应的服务器进而使用nginx转发至相应的API接口.如果没有<code>IPV6</code>地址的话则直接通过NAT64转化为相应的IPV4进行请求相应API. 请注意这里的重点是这个<code>IPV6</code>,,服务器不能单单支持<code>IPV6</code>即可,所谓的支持不能仅仅是打开linux服务器内相应被封印的<code>IPV6</code>相关设置然后加一个<code>HE</code>隧道(当然这么着也有通过的,但是<code>HE</code>也是基于<code>IPV4</code>,最好还是不要走这条道)而是寻找一台<em><strong>真正有全球<code>IPV6</code>地址</strong>_的服务器,</em><strong>这才是关键中的关键.</strong>_至于其他文章所推崇的教育网转发,一是价格太贵,二是转发这事情由他人掌控多少有点看不起自己公司后端的意思(毕竟大多数不从事后端的人的想法就是感觉后端有毛事可干,喝喝喝)..</p>\n<p>经过第四次的痛苦实践,现将解决方案贴于文章下.希望能帮助广大开发者早日审核通过.</p>\n<h5 id=\"一、购买一台海外服务器-本人使用的是搬瓦工-直通车\"><a href=\"#一、购买一台海外服务器-本人使用的是搬瓦工-直通车\" class=\"headerlink\" title=\"一、购买一台海外服务器,本人使用的是搬瓦工,直通车:\"></a>一、购买一台海外服务器,本人使用的是搬瓦工,直通车:</h5><p><a href=\"https://www.bwh1.net/aff.php?aff=10004\" target=\"_blank\" rel=\"noopener\">https://www.bwh1.net/aff.php?aff=10004</a></p>\n<h3 id=\"近些天有朋友反映搬瓦工部分ip被墙-所以如果想要过的可能性大一点可以直接选择阿里的海外版\"><a href=\"#近些天有朋友反映搬瓦工部分ip被墙-所以如果想要过的可能性大一点可以直接选择阿里的海外版\" class=\"headerlink\" title=\"近些天有朋友反映搬瓦工部分ip被墙,所以如果想要过的可能性大一点可以直接选择阿里的海外版.###\"></a>近些天有朋友反映搬瓦工部分ip被墙,所以如果想要过的可能性大一点可以直接选择阿里的海外版.###</h3><p>#####现在搬瓦工的区分openVz和KVM,OPENVZ支持IPV6</p>\n<p>#####到达购买页面之后买一台差不多配置的服务器即可.洛杉矶或者弗罗里达的都行.  </p>\n<p>购买之后:</p>\n<ul>\n<li><p>点击<br><img alt data-src=\"http://image.forest10.com/pic/hexo/banwagong-ipv6-addresses.png\" class=\"lazyload\"></p>\n</li>\n<li><p>获取全球唯一的IPV6,此IPV6为真实IPV6</p>\n</li>\n</ul>\n<p><img alt data-src=\"http://image.forest10.com/hexo/banwagong-true-ipv6-addresse.png\" class=\"lazyload\"></p>\n<h5 id=\"二、海外服务器端安装nginx然后配置好转发至国内自己APP及API使用的服务器端口\"><a href=\"#二、海外服务器端安装nginx然后配置好转发至国内自己APP及API使用的服务器端口\" class=\"headerlink\" title=\"二、海外服务器端安装nginx然后配置好转发至国内自己APP及API使用的服务器端口.\"></a>二、海外服务器端安装nginx然后配置好转发至国内自己APP及API使用的服务器端口.</h5><ol>\n<li><p>普通http</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">listen     你的海外服务器IPV4地址:80;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">listen    你的海外服务器IPV6地址 :80;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  你的域名;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_pass http:&#x2F;&#x2F;你的国内服务器IPV4地址:端口&#x2F;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header HOST $host;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header X-Real-IP $remote_addr;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n</li>\n<li><p>https</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">listen    你的海外服务器IPV4地址:80;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">listen    你的海外服务器IPV6地址 :80;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">listen      你的海外服务器IPV4地址:443 ssl;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">listen      你的海外服务器IPV6地址:443 ssl;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  你的域名;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_certificate &#x2F;usr&#x2F;develop&#x2F;nginx&#x2F;sslkey&#x2F;XX.crt;  #(证书公钥）</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_certificate_key &#x2F;usr&#x2F;develop&#x2F;nginx&#x2F;sslkey&#x2F;XX.key;  #(证书私钥）</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_session_timeout 5m;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_prefer_server_ciphers on;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">add_header Strict-Transport-Security &quot;max-age&#x3D;63072000; includeSubdomains; preload&quot;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">add_header Content-Security-Policy upgrade-insecure-requests;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">if ( $scheme &#x3D; http ) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite ^&#x2F;(.*) https:&#x2F;&#x2F;$server_name&#x2F; permanent;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_pass http:&#x2F;&#x2F;你的国内服务器IPV4地址:端口&#x2F;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header HOST $host;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header X-Real-IP $remote_addr;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"三、以万网为例-修改域名解析至海外服务器-我直接把IPV4和IPV6都指向了海外-后来想想直接把IPV6指向海外服务器即可-IPV4不用变-这样可以在保证APP正常使用的情况下通过审核-不过还木有测试\"><a href=\"#三、以万网为例-修改域名解析至海外服务器-我直接把IPV4和IPV6都指向了海外-后来想想直接把IPV6指向海外服务器即可-IPV4不用变-这样可以在保证APP正常使用的情况下通过审核-不过还木有测试\" class=\"headerlink\" title=\"三、以万网为例,修改域名解析至海外服务器,我直接把IPV4和IPV6都指向了海外,后来想想直接把IPV6指向海外服务器即可,IPV4不用变,这样可以在保证APP正常使用的情况下通过审核(不过还木有测试)\"></a>三、以万网为例,修改域名解析至海外服务器,我直接把IPV4和IPV6都指向了海外,后来想想直接把IPV6指向海外服务器即可,IPV4不用变,这样可以在保证APP正常使用的情况下通过审核(不过还木有测试)</h5><hr>\n<h5 id=\"最后-对于你们那些利用信息不对称收钱的不要误会，我不是针对谁，我是说收钱的各位都是垃圾。\"><a href=\"#最后-对于你们那些利用信息不对称收钱的不要误会，我不是针对谁，我是说收钱的各位都是垃圾。\" class=\"headerlink\" title=\"最后,对于你们那些利用信息不对称收钱的不要误会，我不是针对谁，我是说收钱的各位都是垃圾。\"></a>最后,对于你们那些利用信息不对称收钱的不要误会，我不是针对谁，我是说收钱的各位都是垃圾。</h5><p><img alt data-src=\"http://image.forest10.com/common/%E5%9C%A8%E5%BA%A7%E7%9A%84%E5%90%84%E4%BD%8D%E9%83%BD%E6%98%AF%E5%9E%83%E5%9C%BE.jpg\" class=\"lazyload\"></p>\n<p><img alt data-src=\"http://image.forest10.com/common/%E6%9D%8E%E7%BA%B3%E6%96%AF%E7%AB%96%E4%B8%AD%E6%8C%87.jpg\" class=\"lazyload\"></p>\n<p>对了,我不是前端,因为苹果说的只需要前端API层面支持而不需要后端服务器支持的狗屁话让我们前三次的审核浪费了大量时间,原先我一直没有改动后端后来在广大收钱者的感召下开始进行后端大改造.祝各位早日通过审核.</p>\n<p><em>致敬李纳斯:</em></p>\n<blockquote>\n<p>“Software is like sex: it”s better when it”s free.”<br>软件就像性,免费的比花钱的好得多.                    –<em>Linus Torvalds</em></p>\n</blockquote>\n<p>流程图:<br><img alt=\"1529943565971.jpg\" data-src=\"http://image.forest10.com/common/hexo/ipv6-apple-%E5%AE%A1%E6%A0%B8%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg\" class=\"lazyload\"></p>\n<p>如果您renwei我的文章对于您苹果审核做出了贡献,多谢支持,金额随意.不强制.</p>\n<p>还有就是强调一下,这种知识确实不值几个钱,但是亲自动手操刀还是需要TIME的.都是混口饭吃,给点饭钱不多.</p>\n<p><img alt=\"1475036463795.jpg\" data-src=\"http://image.forest10.com/common/money/forest10-zfb-pay_code.jpg\" class=\"lazyload\"></p>\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":"<p><a href=\"https://www.jianshu.com/p/ef45cd73a08e\" target=\"_blank\" rel=\"noopener\">原始简书文章地址</a></p>\n<p><em><strong>首先声明,一我不负责涉及你们内部服务器. 二是好好读文章,别人能过,你们也能过</strong></em></p>\n<p>苹果6月1日出的<code>IPV6</code>协议阻碍了国内大多数积极开发者,我司也不外乎,经过三次被拒后,遂在网上查找关于<code>IPV6</code>审核的相关事宜,怪我年少无知以为这种开源协议的东西应该是免费的,当然,我说的免费是想着看几篇成熟的<code>IPV6</code>审核文章然后自己实践,奈何几乎所有关于苹果<code>IPV6</code>审核的文章到最后不是推荐买教育网转发要不就是直接把钱交给个人然后让第三方来协助通过.</p>\n<p><em><strong>我实在无法想象一个仅仅靠着linux服务器外加nginx转发就能赚大钱的畸形小社会是怎样形成的,linux市值多少钱恐怕无人能说出.</strong></em></p>\n<p>所有文章内说的苹果<code>IPV6</code>和后台服务器没关系是错误的,至少在请求转发层面是错误的.苹果使用<code>IPV6-ONLY</code>网络进行APP测试,如果服务器端支持<code>IPV6</code>的话则可以直接请求<code>IPV6</code>所对应的服务器进而使用nginx转发至相应的API接口.如果没有<code>IPV6</code>地址的话则直接通过NAT64转化为相应的IPV4进行请求相应API. 请注意这里的重点是这个<code>IPV6</code>,,服务器不能单单支持<code>IPV6</code>即可,所谓的支持不能仅仅是打开linux服务器内相应被封印的<code>IPV6</code>相关设置然后加一个<code>HE</code>隧道(当然这么着也有通过的,但是<code>HE</code>也是基于<code>IPV4</code>,最好还是不要走这条道)而是寻找一台<em><strong>真正有全球<code>IPV6</code>地址</strong>_的服务器,</em><strong>这才是关键中的关键.</strong>_至于其他文章所推崇的教育网转发,一是价格太贵,二是转发这事情由他人掌控多少有点看不起自己公司后端的意思(毕竟大多数不从事后端的人的想法就是感觉后端有毛事可干,喝喝喝)..</p>\n<p>经过第四次的痛苦实践,现将解决方案贴于文章下.希望能帮助广大开发者早日审核通过.</p>\n<h5 id=\"一、购买一台海外服务器-本人使用的是搬瓦工-直通车\"><a href=\"#一、购买一台海外服务器-本人使用的是搬瓦工-直通车\" class=\"headerlink\" title=\"一、购买一台海外服务器,本人使用的是搬瓦工,直通车:\"></a>一、购买一台海外服务器,本人使用的是搬瓦工,直通车:</h5><p><a href=\"https://www.bwh1.net/aff.php?aff=10004\" target=\"_blank\" rel=\"noopener\">https://www.bwh1.net/aff.php?aff=10004</a></p>\n<h3 id=\"近些天有朋友反映搬瓦工部分ip被墙-所以如果想要过的可能性大一点可以直接选择阿里的海外版\"><a href=\"#近些天有朋友反映搬瓦工部分ip被墙-所以如果想要过的可能性大一点可以直接选择阿里的海外版\" class=\"headerlink\" title=\"近些天有朋友反映搬瓦工部分ip被墙,所以如果想要过的可能性大一点可以直接选择阿里的海外版.###\"></a>近些天有朋友反映搬瓦工部分ip被墙,所以如果想要过的可能性大一点可以直接选择阿里的海外版.###</h3><p>#####现在搬瓦工的区分openVz和KVM,OPENVZ支持IPV6</p>\n<p>#####到达购买页面之后买一台差不多配置的服务器即可.洛杉矶或者弗罗里达的都行.  </p>\n<p>购买之后:</p>\n<ul>\n<li><p>点击<br><img src=\"http://image.forest10.com/pic/hexo/banwagong-ipv6-addresses.png\" alt=\"\"></p>\n</li>\n<li><p>获取全球唯一的IPV6,此IPV6为真实IPV6</p>\n</li>\n</ul>\n<p><img src=\"http://image.forest10.com/hexo/banwagong-true-ipv6-addresse.png\" alt=\"\"></p>\n<h5 id=\"二、海外服务器端安装nginx然后配置好转发至国内自己APP及API使用的服务器端口\"><a href=\"#二、海外服务器端安装nginx然后配置好转发至国内自己APP及API使用的服务器端口\" class=\"headerlink\" title=\"二、海外服务器端安装nginx然后配置好转发至国内自己APP及API使用的服务器端口.\"></a>二、海外服务器端安装nginx然后配置好转发至国内自己APP及API使用的服务器端口.</h5><ol>\n<li><p>普通http</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">listen     你的海外服务器IPV4地址:80;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">listen    你的海外服务器IPV6地址 :80;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  你的域名;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_pass http:&#x2F;&#x2F;你的国内服务器IPV4地址:端口&#x2F;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header HOST $host;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header X-Real-IP $remote_addr;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n</li>\n<li><p>https</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">listen    你的海外服务器IPV4地址:80;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">listen    你的海外服务器IPV6地址 :80;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">listen      你的海外服务器IPV4地址:443 ssl;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">listen      你的海外服务器IPV6地址:443 ssl;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  你的域名;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_certificate &#x2F;usr&#x2F;develop&#x2F;nginx&#x2F;sslkey&#x2F;XX.crt;  #(证书公钥）</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_certificate_key &#x2F;usr&#x2F;develop&#x2F;nginx&#x2F;sslkey&#x2F;XX.key;  #(证书私钥）</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_session_timeout 5m;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_prefer_server_ciphers on;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">add_header Strict-Transport-Security &quot;max-age&#x3D;63072000; includeSubdomains; preload&quot;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">add_header Content-Security-Policy upgrade-insecure-requests;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">if ( $scheme &#x3D; http ) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite ^&#x2F;(.*) https:&#x2F;&#x2F;$server_name&#x2F; permanent;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_pass http:&#x2F;&#x2F;你的国内服务器IPV4地址:端口&#x2F;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header HOST $host;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header X-Real-IP $remote_addr;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"三、以万网为例-修改域名解析至海外服务器-我直接把IPV4和IPV6都指向了海外-后来想想直接把IPV6指向海外服务器即可-IPV4不用变-这样可以在保证APP正常使用的情况下通过审核-不过还木有测试\"><a href=\"#三、以万网为例-修改域名解析至海外服务器-我直接把IPV4和IPV6都指向了海外-后来想想直接把IPV6指向海外服务器即可-IPV4不用变-这样可以在保证APP正常使用的情况下通过审核-不过还木有测试\" class=\"headerlink\" title=\"三、以万网为例,修改域名解析至海外服务器,我直接把IPV4和IPV6都指向了海外,后来想想直接把IPV6指向海外服务器即可,IPV4不用变,这样可以在保证APP正常使用的情况下通过审核(不过还木有测试)\"></a>三、以万网为例,修改域名解析至海外服务器,我直接把IPV4和IPV6都指向了海外,后来想想直接把IPV6指向海外服务器即可,IPV4不用变,这样可以在保证APP正常使用的情况下通过审核(不过还木有测试)</h5><hr>\n<h5 id=\"最后-对于你们那些利用信息不对称收钱的不要误会，我不是针对谁，我是说收钱的各位都是垃圾。\"><a href=\"#最后-对于你们那些利用信息不对称收钱的不要误会，我不是针对谁，我是说收钱的各位都是垃圾。\" class=\"headerlink\" title=\"最后,对于你们那些利用信息不对称收钱的不要误会，我不是针对谁，我是说收钱的各位都是垃圾。\"></a>最后,对于你们那些利用信息不对称收钱的不要误会，我不是针对谁，我是说收钱的各位都是垃圾。</h5><p><img src=\"http://image.forest10.com/common/%E5%9C%A8%E5%BA%A7%E7%9A%84%E5%90%84%E4%BD%8D%E9%83%BD%E6%98%AF%E5%9E%83%E5%9C%BE.jpg\" alt=\"\"></p>\n<p><img src=\"http://image.forest10.com/common/%E6%9D%8E%E7%BA%B3%E6%96%AF%E7%AB%96%E4%B8%AD%E6%8C%87.jpg\" alt=\"\"></p>\n<p>对了,我不是前端,因为苹果说的只需要前端API层面支持而不需要后端服务器支持的狗屁话让我们前三次的审核浪费了大量时间,原先我一直没有改动后端后来在广大收钱者的感召下开始进行后端大改造.祝各位早日通过审核.</p>\n<p><em>致敬李纳斯:</em></p>\n<blockquote>\n<p>“Software is like sex: it”s better when it”s free.”<br>软件就像性,免费的比花钱的好得多.                    –<em>Linus Torvalds</em></p>\n</blockquote>\n<p>流程图:<br><img src=\"http://image.forest10.com/common/hexo/ipv6-apple-%E5%AE%A1%E6%A0%B8%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg\" alt=\"1529943565971.jpg\"></p>\n<p>如果您renwei我的文章对于您苹果审核做出了贡献,多谢支持,金额随意.不强制.</p>\n<p>还有就是强调一下,这种知识确实不值几个钱,但是亲自动手操刀还是需要TIME的.都是混口饭吃,给点饭钱不多.</p>\n<p><img src=\"http://image.forest10.com/common/money/forest10-zfb-pay_code.jpg\" alt=\"1475036463795.jpg\"></p>\n"},{"title":"高性能MySql之Schema与数据类型优化","date":"2018-07-17T12:51:58.000Z","_content":"\n\n### 1.1 选择优化的数据类型\n\n- 更小的通常更好\n - (例如只存0-200,tinyint unsigned更好)\n \n - 简单就好,整型比字符操作代价低,因为字符集和校对规则使得字符的比较比整型更加复杂\n \n\t\t 一是使用Mysql内建的类型而不是字符串来存储日期和时间(date,time,datetime)\n\t\t 二是使用整型存储IP地址 \n- DATETIME和TIMESTAMP都可以存储相同类型的数据:时间和日期,精确到秒,然而TIMESTAMP只使用DATETIME一半的存储,但是TIMESTAMP允许的时间范围要小的多\n\n\n\n### 1.2 实数类型\n\n- 浮点类型在存储同样范围的值时,通常比DECIMAL使用更少的空间,FLOAT使用4个字节存储,DOUBLE使用8个字节,MYSQL使用DOUBLE作为内部浮点计算的类型\n\n> 因为需要额外的空间和计算开销.数据量比较大的时候,使用BIGINT代替DECIMAL,将需要存储的货币单位根据小数的位数乘以相应的倍数即可\n\n\n### 1.3 字符串类型\n> 字符创长度定义是字符数,不是字节数\n\n- VACHAR\n\t- VARCHAR需要使用1或2个额外字节记录字符串的长度:如果列的最大长度<=255字节,则使用1个字节表示.否则使用2个字节.\n\n\t- VARCHAR节省存储空间,但是如果一个行占用的空间增长,并且在页内没有更多的空间存储,这种情况下,不同的存储引擎处理不一样,MyISAM会将行拆成不同的片段存储,InnoDB需要分裂页来使行可以放入页内. \n\n- CHAR\n\t- 定长的\n\t\n\t- MYSQL会删除所有的末尾空格\n\n\n### 1.4 日期和时间类型\n\n\n- DATETIME \n\t- 保存从1001到9999年,精度为秒.它把日期和时间封装到YYYYMMDDHHMMSS的整数中,与时区无关,使用8个字节存储空间.\n\n\n### 1.4 日期和时间类型\n\n\n- DATETIME \n\t- 保存从1001到9999年,精度为秒.它把日期和时间封装到YYYYMMDDHHMMSS的整数中,与时区无关,使用8个字节存储空间.\n\n- TIMESTAMP\n  \t- 保存了从1970年1月1日午夜以来的秒数,和UNIX时间戳相同,它只使用4个字节存储空间.只能表示1970-2038\n  \t\n  \t- TIMESTAMP有DATETIME没有的特殊属性,默认情况下,如果插入时没有指定第一个TIMESTAMP列的值,MYSQL则设置这个列的值为当前时间.在插入一行记录时,MYSQL也会更新第一个TIMESTAMP列的值(除非在UPDATE语句中明确指定了值).最后TIMESTAMP默认为NOT NULL\n\n  \t\n  \t\n### 1.5 位数据类型\t\n\n- BIT\n  - 在MYSQL 5.0之前,BIT是TINYINT的同义词.5.0之后就是一个特性完全不同的数据类型.可以使用BIT列在一列中存储一个或多个true/false值.BIT(1)定义一个包含单个位的字段.BIT(2)存储2个位.以此类推,BIT列最大长度为64个位.\n  - MYSQL把BIT当字符串类型而不是数字类型.当检索BIT(1)的值时,结果是包含二进制0或1值的字符串.而不是ASCII码的\"0\"或\"1\",然而,在数字上下文的场景中检索时,结果将是把位字符串转换成的数字.如果需要和另外的值比较结果,一定要记得!!! 例如,如果存储一个值b'00111001'(二进制等于57)到BIT(8)的列并检索它,得到的是字符码为57的字符串.也即是说得到ASCII码为57的字符'9',但是在数字场景下,得到的是数字57.\t\n\n### 2.0 MySQL schema设计中的陷阱\n\n- 太多的列\n\t- MySQL的存储引擎API工作时需要在服务器层和存储引擎层之间通过该行缓冲格式拷贝数据,然后在服务器层将缓冲内容解码成各个列.这个代价是非常高的.MyISAM的定长行结构实际上与服务器层的行结构正好匹配,所以不需要转换.然而MyISAM的变长行结构和InnoDB的行结构则总需要转换,转换的代价依赖列的数量.\n\n\t\n### 2.1 范式和反范式\n\n- 范式化的设计缺点是通常需要关联,不但代价昂贵,还可能使一些索引策略失效.\n\n- 反范式化的schema因为所有数据都在一张表上,在面对大部分查询最差的情况---即使表没有使用索引--全表扫描.当数据比内存大时这可能比关联还要快,因为这避免了随机I/O","source":"_posts/高性能MySql之Schema与数据类型优化.md","raw":"---\ntitle: 高性能MySql之Schema与数据类型优化\ndate: 2018-07-17 20:51:58\ntags: [mysql]\ncategories: [sql,mysql]\n---\n\n\n### 1.1 选择优化的数据类型\n\n- 更小的通常更好\n - (例如只存0-200,tinyint unsigned更好)\n \n - 简单就好,整型比字符操作代价低,因为字符集和校对规则使得字符的比较比整型更加复杂\n \n\t\t 一是使用Mysql内建的类型而不是字符串来存储日期和时间(date,time,datetime)\n\t\t 二是使用整型存储IP地址 \n- DATETIME和TIMESTAMP都可以存储相同类型的数据:时间和日期,精确到秒,然而TIMESTAMP只使用DATETIME一半的存储,但是TIMESTAMP允许的时间范围要小的多\n\n\n\n### 1.2 实数类型\n\n- 浮点类型在存储同样范围的值时,通常比DECIMAL使用更少的空间,FLOAT使用4个字节存储,DOUBLE使用8个字节,MYSQL使用DOUBLE作为内部浮点计算的类型\n\n> 因为需要额外的空间和计算开销.数据量比较大的时候,使用BIGINT代替DECIMAL,将需要存储的货币单位根据小数的位数乘以相应的倍数即可\n\n\n### 1.3 字符串类型\n> 字符创长度定义是字符数,不是字节数\n\n- VACHAR\n\t- VARCHAR需要使用1或2个额外字节记录字符串的长度:如果列的最大长度<=255字节,则使用1个字节表示.否则使用2个字节.\n\n\t- VARCHAR节省存储空间,但是如果一个行占用的空间增长,并且在页内没有更多的空间存储,这种情况下,不同的存储引擎处理不一样,MyISAM会将行拆成不同的片段存储,InnoDB需要分裂页来使行可以放入页内. \n\n- CHAR\n\t- 定长的\n\t\n\t- MYSQL会删除所有的末尾空格\n\n\n### 1.4 日期和时间类型\n\n\n- DATETIME \n\t- 保存从1001到9999年,精度为秒.它把日期和时间封装到YYYYMMDDHHMMSS的整数中,与时区无关,使用8个字节存储空间.\n\n\n### 1.4 日期和时间类型\n\n\n- DATETIME \n\t- 保存从1001到9999年,精度为秒.它把日期和时间封装到YYYYMMDDHHMMSS的整数中,与时区无关,使用8个字节存储空间.\n\n- TIMESTAMP\n  \t- 保存了从1970年1月1日午夜以来的秒数,和UNIX时间戳相同,它只使用4个字节存储空间.只能表示1970-2038\n  \t\n  \t- TIMESTAMP有DATETIME没有的特殊属性,默认情况下,如果插入时没有指定第一个TIMESTAMP列的值,MYSQL则设置这个列的值为当前时间.在插入一行记录时,MYSQL也会更新第一个TIMESTAMP列的值(除非在UPDATE语句中明确指定了值).最后TIMESTAMP默认为NOT NULL\n\n  \t\n  \t\n### 1.5 位数据类型\t\n\n- BIT\n  - 在MYSQL 5.0之前,BIT是TINYINT的同义词.5.0之后就是一个特性完全不同的数据类型.可以使用BIT列在一列中存储一个或多个true/false值.BIT(1)定义一个包含单个位的字段.BIT(2)存储2个位.以此类推,BIT列最大长度为64个位.\n  - MYSQL把BIT当字符串类型而不是数字类型.当检索BIT(1)的值时,结果是包含二进制0或1值的字符串.而不是ASCII码的\"0\"或\"1\",然而,在数字上下文的场景中检索时,结果将是把位字符串转换成的数字.如果需要和另外的值比较结果,一定要记得!!! 例如,如果存储一个值b'00111001'(二进制等于57)到BIT(8)的列并检索它,得到的是字符码为57的字符串.也即是说得到ASCII码为57的字符'9',但是在数字场景下,得到的是数字57.\t\n\n### 2.0 MySQL schema设计中的陷阱\n\n- 太多的列\n\t- MySQL的存储引擎API工作时需要在服务器层和存储引擎层之间通过该行缓冲格式拷贝数据,然后在服务器层将缓冲内容解码成各个列.这个代价是非常高的.MyISAM的定长行结构实际上与服务器层的行结构正好匹配,所以不需要转换.然而MyISAM的变长行结构和InnoDB的行结构则总需要转换,转换的代价依赖列的数量.\n\n\t\n### 2.1 范式和反范式\n\n- 范式化的设计缺点是通常需要关联,不但代价昂贵,还可能使一些索引策略失效.\n\n- 反范式化的schema因为所有数据都在一张表上,在面对大部分查询最差的情况---即使表没有使用索引--全表扫描.当数据比内存大时这可能比关联还要快,因为这避免了随机I/O","slug":"高性能MySql之Schema与数据类型优化","published":1,"updated":"2021-02-24T08:42:59.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eyor000o3wzj4kq32vl5","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"1-1-选择优化的数据类型\"><a href=\"#1-1-选择优化的数据类型\" class=\"headerlink\" title=\"1.1 选择优化的数据类型\"></a>1.1 选择优化的数据类型</h3><ul>\n<li><p>更小的通常更好</p>\n<ul>\n<li><p>(例如只存0-200,tinyint unsigned更好)</p>\n</li>\n<li><p>简单就好,整型比字符操作代价低,因为字符集和校对规则使得字符的比较比整型更加复杂</p>\n<pre><code>一是使用Mysql内建的类型而不是字符串来存储日期和时间(date,time,datetime)\n二是使用整型存储IP地址 </code></pre></li>\n</ul>\n</li>\n<li><p>DATETIME和TIMESTAMP都可以存储相同类型的数据:时间和日期,精确到秒,然而TIMESTAMP只使用DATETIME一半的存储,但是TIMESTAMP允许的时间范围要小的多</p>\n</li>\n</ul>\n<h3 id=\"1-2-实数类型\"><a href=\"#1-2-实数类型\" class=\"headerlink\" title=\"1.2 实数类型\"></a>1.2 实数类型</h3><ul>\n<li>浮点类型在存储同样范围的值时,通常比DECIMAL使用更少的空间,FLOAT使用4个字节存储,DOUBLE使用8个字节,MYSQL使用DOUBLE作为内部浮点计算的类型</li>\n</ul>\n<blockquote>\n<p>因为需要额外的空间和计算开销.数据量比较大的时候,使用BIGINT代替DECIMAL,将需要存储的货币单位根据小数的位数乘以相应的倍数即可</p>\n</blockquote>\n<h3 id=\"1-3-字符串类型\"><a href=\"#1-3-字符串类型\" class=\"headerlink\" title=\"1.3 字符串类型\"></a>1.3 字符串类型</h3><blockquote>\n<p>字符创长度定义是字符数,不是字节数</p>\n</blockquote>\n<ul>\n<li><p>VACHAR</p>\n<ul>\n<li><p>VARCHAR需要使用1或2个额外字节记录字符串的长度:如果列的最大长度&lt;=255字节,则使用1个字节表示.否则使用2个字节.</p>\n</li>\n<li><p>VARCHAR节省存储空间,但是如果一个行占用的空间增长,并且在页内没有更多的空间存储,这种情况下,不同的存储引擎处理不一样,MyISAM会将行拆成不同的片段存储,InnoDB需要分裂页来使行可以放入页内. </p>\n</li>\n</ul>\n</li>\n<li><p>CHAR</p>\n<ul>\n<li><p>定长的</p>\n</li>\n<li><p>MYSQL会删除所有的末尾空格</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-日期和时间类型\"><a href=\"#1-4-日期和时间类型\" class=\"headerlink\" title=\"1.4 日期和时间类型\"></a>1.4 日期和时间类型</h3><ul>\n<li>DATETIME <ul>\n<li>保存从1001到9999年,精度为秒.它把日期和时间封装到YYYYMMDDHHMMSS的整数中,与时区无关,使用8个字节存储空间.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-日期和时间类型-1\"><a href=\"#1-4-日期和时间类型-1\" class=\"headerlink\" title=\"1.4 日期和时间类型\"></a>1.4 日期和时间类型</h3><ul>\n<li><p>DATETIME </p>\n<ul>\n<li>保存从1001到9999年,精度为秒.它把日期和时间封装到YYYYMMDDHHMMSS的整数中,与时区无关,使用8个字节存储空间.</li>\n</ul>\n</li>\n<li><p>TIMESTAMP</p>\n<pre><code>- 保存了从1970年1月1日午夜以来的秒数,和UNIX时间戳相同,它只使用4个字节存储空间.只能表示1970-2038\n\n- TIMESTAMP有DATETIME没有的特殊属性,默认情况下,如果插入时没有指定第一个TIMESTAMP列的值,MYSQL则设置这个列的值为当前时间.在插入一行记录时,MYSQL也会更新第一个TIMESTAMP列的值(除非在UPDATE语句中明确指定了值).最后TIMESTAMP默认为NOT NULL</code></pre></li>\n</ul>\n<h3 id=\"1-5-位数据类型\"><a href=\"#1-5-位数据类型\" class=\"headerlink\" title=\"1.5 位数据类型\"></a>1.5 位数据类型</h3><ul>\n<li>BIT<ul>\n<li>在MYSQL 5.0之前,BIT是TINYINT的同义词.5.0之后就是一个特性完全不同的数据类型.可以使用BIT列在一列中存储一个或多个true/false值.BIT(1)定义一个包含单个位的字段.BIT(2)存储2个位.以此类推,BIT列最大长度为64个位.</li>\n<li>MYSQL把BIT当字符串类型而不是数字类型.当检索BIT(1)的值时,结果是包含二进制0或1值的字符串.而不是ASCII码的”0”或”1”,然而,在数字上下文的场景中检索时,结果将是把位字符串转换成的数字.如果需要和另外的值比较结果,一定要记得!!! 例如,如果存储一个值b’00111001’(二进制等于57)到BIT(8)的列并检索它,得到的是字符码为57的字符串.也即是说得到ASCII码为57的字符’9’,但是在数字场景下,得到的是数字57.    </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-0-MySQL-schema设计中的陷阱\"><a href=\"#2-0-MySQL-schema设计中的陷阱\" class=\"headerlink\" title=\"2.0 MySQL schema设计中的陷阱\"></a>2.0 MySQL schema设计中的陷阱</h3><ul>\n<li>太多的列<ul>\n<li>MySQL的存储引擎API工作时需要在服务器层和存储引擎层之间通过该行缓冲格式拷贝数据,然后在服务器层将缓冲内容解码成各个列.这个代价是非常高的.MyISAM的定长行结构实际上与服务器层的行结构正好匹配,所以不需要转换.然而MyISAM的变长行结构和InnoDB的行结构则总需要转换,转换的代价依赖列的数量.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-1-范式和反范式\"><a href=\"#2-1-范式和反范式\" class=\"headerlink\" title=\"2.1 范式和反范式\"></a>2.1 范式和反范式</h3><ul>\n<li><p>范式化的设计缺点是通常需要关联,不但代价昂贵,还可能使一些索引策略失效.</p>\n</li>\n<li><p>反范式化的schema因为所有数据都在一张表上,在面对大部分查询最差的情况—即使表没有使用索引–全表扫描.当数据比内存大时这可能比关联还要快,因为这避免了随机I/O</p>\n</li>\n</ul>\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"cover":"http://image.forest10.com/pic/%E5%85%A8%E6%9D%91%E5%B8%8C%E6%9C%9B.jpg","excerpt":"","more":"<h3 id=\"1-1-选择优化的数据类型\"><a href=\"#1-1-选择优化的数据类型\" class=\"headerlink\" title=\"1.1 选择优化的数据类型\"></a>1.1 选择优化的数据类型</h3><ul>\n<li><p>更小的通常更好</p>\n<ul>\n<li><p>(例如只存0-200,tinyint unsigned更好)</p>\n</li>\n<li><p>简单就好,整型比字符操作代价低,因为字符集和校对规则使得字符的比较比整型更加复杂</p>\n<pre><code>一是使用Mysql内建的类型而不是字符串来存储日期和时间(date,time,datetime)\n二是使用整型存储IP地址 </code></pre></li>\n</ul>\n</li>\n<li><p>DATETIME和TIMESTAMP都可以存储相同类型的数据:时间和日期,精确到秒,然而TIMESTAMP只使用DATETIME一半的存储,但是TIMESTAMP允许的时间范围要小的多</p>\n</li>\n</ul>\n<h3 id=\"1-2-实数类型\"><a href=\"#1-2-实数类型\" class=\"headerlink\" title=\"1.2 实数类型\"></a>1.2 实数类型</h3><ul>\n<li>浮点类型在存储同样范围的值时,通常比DECIMAL使用更少的空间,FLOAT使用4个字节存储,DOUBLE使用8个字节,MYSQL使用DOUBLE作为内部浮点计算的类型</li>\n</ul>\n<blockquote>\n<p>因为需要额外的空间和计算开销.数据量比较大的时候,使用BIGINT代替DECIMAL,将需要存储的货币单位根据小数的位数乘以相应的倍数即可</p>\n</blockquote>\n<h3 id=\"1-3-字符串类型\"><a href=\"#1-3-字符串类型\" class=\"headerlink\" title=\"1.3 字符串类型\"></a>1.3 字符串类型</h3><blockquote>\n<p>字符创长度定义是字符数,不是字节数</p>\n</blockquote>\n<ul>\n<li><p>VACHAR</p>\n<ul>\n<li><p>VARCHAR需要使用1或2个额外字节记录字符串的长度:如果列的最大长度&lt;=255字节,则使用1个字节表示.否则使用2个字节.</p>\n</li>\n<li><p>VARCHAR节省存储空间,但是如果一个行占用的空间增长,并且在页内没有更多的空间存储,这种情况下,不同的存储引擎处理不一样,MyISAM会将行拆成不同的片段存储,InnoDB需要分裂页来使行可以放入页内. </p>\n</li>\n</ul>\n</li>\n<li><p>CHAR</p>\n<ul>\n<li><p>定长的</p>\n</li>\n<li><p>MYSQL会删除所有的末尾空格</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-日期和时间类型\"><a href=\"#1-4-日期和时间类型\" class=\"headerlink\" title=\"1.4 日期和时间类型\"></a>1.4 日期和时间类型</h3><ul>\n<li>DATETIME <ul>\n<li>保存从1001到9999年,精度为秒.它把日期和时间封装到YYYYMMDDHHMMSS的整数中,与时区无关,使用8个字节存储空间.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-日期和时间类型-1\"><a href=\"#1-4-日期和时间类型-1\" class=\"headerlink\" title=\"1.4 日期和时间类型\"></a>1.4 日期和时间类型</h3><ul>\n<li><p>DATETIME </p>\n<ul>\n<li>保存从1001到9999年,精度为秒.它把日期和时间封装到YYYYMMDDHHMMSS的整数中,与时区无关,使用8个字节存储空间.</li>\n</ul>\n</li>\n<li><p>TIMESTAMP</p>\n<pre><code>- 保存了从1970年1月1日午夜以来的秒数,和UNIX时间戳相同,它只使用4个字节存储空间.只能表示1970-2038\n\n- TIMESTAMP有DATETIME没有的特殊属性,默认情况下,如果插入时没有指定第一个TIMESTAMP列的值,MYSQL则设置这个列的值为当前时间.在插入一行记录时,MYSQL也会更新第一个TIMESTAMP列的值(除非在UPDATE语句中明确指定了值).最后TIMESTAMP默认为NOT NULL</code></pre></li>\n</ul>\n<h3 id=\"1-5-位数据类型\"><a href=\"#1-5-位数据类型\" class=\"headerlink\" title=\"1.5 位数据类型\"></a>1.5 位数据类型</h3><ul>\n<li>BIT<ul>\n<li>在MYSQL 5.0之前,BIT是TINYINT的同义词.5.0之后就是一个特性完全不同的数据类型.可以使用BIT列在一列中存储一个或多个true/false值.BIT(1)定义一个包含单个位的字段.BIT(2)存储2个位.以此类推,BIT列最大长度为64个位.</li>\n<li>MYSQL把BIT当字符串类型而不是数字类型.当检索BIT(1)的值时,结果是包含二进制0或1值的字符串.而不是ASCII码的”0”或”1”,然而,在数字上下文的场景中检索时,结果将是把位字符串转换成的数字.如果需要和另外的值比较结果,一定要记得!!! 例如,如果存储一个值b’00111001’(二进制等于57)到BIT(8)的列并检索它,得到的是字符码为57的字符串.也即是说得到ASCII码为57的字符’9’,但是在数字场景下,得到的是数字57.    </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-0-MySQL-schema设计中的陷阱\"><a href=\"#2-0-MySQL-schema设计中的陷阱\" class=\"headerlink\" title=\"2.0 MySQL schema设计中的陷阱\"></a>2.0 MySQL schema设计中的陷阱</h3><ul>\n<li>太多的列<ul>\n<li>MySQL的存储引擎API工作时需要在服务器层和存储引擎层之间通过该行缓冲格式拷贝数据,然后在服务器层将缓冲内容解码成各个列.这个代价是非常高的.MyISAM的定长行结构实际上与服务器层的行结构正好匹配,所以不需要转换.然而MyISAM的变长行结构和InnoDB的行结构则总需要转换,转换的代价依赖列的数量.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-1-范式和反范式\"><a href=\"#2-1-范式和反范式\" class=\"headerlink\" title=\"2.1 范式和反范式\"></a>2.1 范式和反范式</h3><ul>\n<li><p>范式化的设计缺点是通常需要关联,不但代价昂贵,还可能使一些索引策略失效.</p>\n</li>\n<li><p>反范式化的schema因为所有数据都在一张表上,在面对大部分查询最差的情况—即使表没有使用索引–全表扫描.当数据比内存大时这可能比关联还要快,因为这避免了随机I/O</p>\n</li>\n</ul>\n"},{"title":"解决Mac不能写入Windows格式(NTFS)磁盘(命令行)","date":"2019-02-11T10:24:39.000Z","cover":"http://public-img.forest10.com/2019-05-17-16c05c74eeb519a5dfd6_meitu_1.jpg","_content":"\n使用Mac的同学都知道Mac默认不能在NTFS格式的磁盘中写入内容。下面介绍一个简单的方法，简单几行命令解决所有问题。\n大概的思路就是：Mac自动挂载的时候没有开放写权限，我们自己手动挂载一遍，把写权限加上。仅此而已！！！\n### 第一步：查看磁盘设备文件名\n\n这一步需要看一下，目标磁盘叫什么名字\n``` \ndiskutil list \n```\n\n![avatar](http://image.forest10.com/common/hexo/mac-ntfs-problem1.png)\n可以看到我移动硬盘被挂载了disk2的位置上，其中Windows那个磁盘设备文件名为disk2s4\n以上信息告诉我们：1. 在/dev目录下； 2. 设备名称为disk2s4\n### 第二步：新建挂载点\n\n其实他的意思也就是要告诉电脑，你这张盘要放在那里，就好像Windows电脑在你点击我的电脑之后可以看到所有的盘一样。\n这里选择放在桌面。\n其实是在桌面上新建一个叫Windows的文件夹：\n```\nmkdir ~/Desktop/Windows \n```\n### 第三步：推出磁盘（重新挂载）\n\nMac默认挂载的时候不可写磁盘，这里我们需要重新挂载一次，但是在此之前，需要先取消挂载（等同于鼠标右键菜单中的推出，但是不要选择推出全部）\n``` \nsudo umount /dev/disk2s4 \n```\n\n![avatar](http://image.forest10.com/common/hexo/mac-ntfs-problem2.png)\n### 第四步：重新挂载\n\n手动挂载\n``` \nsudo mount_ntfs -o rw,nobrowse /dev/disk2s4 ~/Desktop/Windows \n```\n成功，磁盘可以正常读写了！！！\n","source":"_posts/解决Mac不能写入Windows格式-NTFS-磁盘-命令行.md","raw":"---\ntitle: 解决Mac不能写入Windows格式(NTFS)磁盘(命令行)\ndate: 2019-02-11 18:24:39\ntags: MAC,NTFS\ncover: http://public-img.forest10.com/2019-05-17-16c05c74eeb519a5dfd6_meitu_1.jpg\n---\n\n使用Mac的同学都知道Mac默认不能在NTFS格式的磁盘中写入内容。下面介绍一个简单的方法，简单几行命令解决所有问题。\n大概的思路就是：Mac自动挂载的时候没有开放写权限，我们自己手动挂载一遍，把写权限加上。仅此而已！！！\n### 第一步：查看磁盘设备文件名\n\n这一步需要看一下，目标磁盘叫什么名字\n``` \ndiskutil list \n```\n\n![avatar](http://image.forest10.com/common/hexo/mac-ntfs-problem1.png)\n可以看到我移动硬盘被挂载了disk2的位置上，其中Windows那个磁盘设备文件名为disk2s4\n以上信息告诉我们：1. 在/dev目录下； 2. 设备名称为disk2s4\n### 第二步：新建挂载点\n\n其实他的意思也就是要告诉电脑，你这张盘要放在那里，就好像Windows电脑在你点击我的电脑之后可以看到所有的盘一样。\n这里选择放在桌面。\n其实是在桌面上新建一个叫Windows的文件夹：\n```\nmkdir ~/Desktop/Windows \n```\n### 第三步：推出磁盘（重新挂载）\n\nMac默认挂载的时候不可写磁盘，这里我们需要重新挂载一次，但是在此之前，需要先取消挂载（等同于鼠标右键菜单中的推出，但是不要选择推出全部）\n``` \nsudo umount /dev/disk2s4 \n```\n\n![avatar](http://image.forest10.com/common/hexo/mac-ntfs-problem2.png)\n### 第四步：重新挂载\n\n手动挂载\n``` \nsudo mount_ntfs -o rw,nobrowse /dev/disk2s4 ~/Desktop/Windows \n```\n成功，磁盘可以正常读写了！！！\n","slug":"解决Mac不能写入Windows格式-NTFS-磁盘-命令行","published":1,"updated":"2019-12-16T08:16:47.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklj7eyov000r3wzjc26f7okz","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>使用Mac的同学都知道Mac默认不能在NTFS格式的磁盘中写入内容。下面介绍一个简单的方法，简单几行命令解决所有问题。<br>大概的思路就是：Mac自动挂载的时候没有开放写权限，我们自己手动挂载一遍，把写权限加上。仅此而已！！！</p>\n<h3 id=\"第一步：查看磁盘设备文件名\"><a href=\"#第一步：查看磁盘设备文件名\" class=\"headerlink\" title=\"第一步：查看磁盘设备文件名\"></a>第一步：查看磁盘设备文件名</h3><p>这一步需要看一下，目标磁盘叫什么名字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">diskutil list</span></pre></td></tr></table></figure>\n\n<p><img alt=\"avatar\" data-src=\"http://image.forest10.com/common/hexo/mac-ntfs-problem1.png\" class=\"lazyload\"><br>可以看到我移动硬盘被挂载了disk2的位置上，其中Windows那个磁盘设备文件名为disk2s4<br>以上信息告诉我们：1. 在/dev目录下； 2. 设备名称为disk2s4</p>\n<h3 id=\"第二步：新建挂载点\"><a href=\"#第二步：新建挂载点\" class=\"headerlink\" title=\"第二步：新建挂载点\"></a>第二步：新建挂载点</h3><p>其实他的意思也就是要告诉电脑，你这张盘要放在那里，就好像Windows电脑在你点击我的电脑之后可以看到所有的盘一样。<br>这里选择放在桌面。<br>其实是在桌面上新建一个叫Windows的文件夹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~&#x2F;Desktop&#x2F;Windows</span></pre></td></tr></table></figure>\n<h3 id=\"第三步：推出磁盘（重新挂载）\"><a href=\"#第三步：推出磁盘（重新挂载）\" class=\"headerlink\" title=\"第三步：推出磁盘（重新挂载）\"></a>第三步：推出磁盘（重新挂载）</h3><p>Mac默认挂载的时候不可写磁盘，这里我们需要重新挂载一次，但是在此之前，需要先取消挂载（等同于鼠标右键菜单中的推出，但是不要选择推出全部）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount &#x2F;dev&#x2F;disk2s4</span></pre></td></tr></table></figure>\n\n<p><img alt=\"avatar\" data-src=\"http://image.forest10.com/common/hexo/mac-ntfs-problem2.png\" class=\"lazyload\"></p>\n<h3 id=\"第四步：重新挂载\"><a href=\"#第四步：重新挂载\" class=\"headerlink\" title=\"第四步：重新挂载\"></a>第四步：重新挂载</h3><p>手动挂载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount_ntfs -o rw,nobrowse &#x2F;dev&#x2F;disk2s4 ~&#x2F;Desktop&#x2F;Windows</span></pre></td></tr></table></figure>\n<p>成功，磁盘可以正常读写了！！！</p>\n","site":{"data":{"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}},"class2":{"class_name":"鏈接無效","link_list":{"1":{"name":"夢xxx","link":"https://blog.xxx.com","avatar":"https://xxxx/avatar.png","descr":"xxxx"},"2":{"name":"xx","link":"https://www.axxxx.cn/","avatar":"https://x","descr":"xx"}}}}}}},"excerpt":"","more":"<p>使用Mac的同学都知道Mac默认不能在NTFS格式的磁盘中写入内容。下面介绍一个简单的方法，简单几行命令解决所有问题。<br>大概的思路就是：Mac自动挂载的时候没有开放写权限，我们自己手动挂载一遍，把写权限加上。仅此而已！！！</p>\n<h3 id=\"第一步：查看磁盘设备文件名\"><a href=\"#第一步：查看磁盘设备文件名\" class=\"headerlink\" title=\"第一步：查看磁盘设备文件名\"></a>第一步：查看磁盘设备文件名</h3><p>这一步需要看一下，目标磁盘叫什么名字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">diskutil list</span></pre></td></tr></table></figure>\n\n<p><img src=\"http://image.forest10.com/common/hexo/mac-ntfs-problem1.png\" alt=\"avatar\"><br>可以看到我移动硬盘被挂载了disk2的位置上，其中Windows那个磁盘设备文件名为disk2s4<br>以上信息告诉我们：1. 在/dev目录下； 2. 设备名称为disk2s4</p>\n<h3 id=\"第二步：新建挂载点\"><a href=\"#第二步：新建挂载点\" class=\"headerlink\" title=\"第二步：新建挂载点\"></a>第二步：新建挂载点</h3><p>其实他的意思也就是要告诉电脑，你这张盘要放在那里，就好像Windows电脑在你点击我的电脑之后可以看到所有的盘一样。<br>这里选择放在桌面。<br>其实是在桌面上新建一个叫Windows的文件夹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~&#x2F;Desktop&#x2F;Windows</span></pre></td></tr></table></figure>\n<h3 id=\"第三步：推出磁盘（重新挂载）\"><a href=\"#第三步：推出磁盘（重新挂载）\" class=\"headerlink\" title=\"第三步：推出磁盘（重新挂载）\"></a>第三步：推出磁盘（重新挂载）</h3><p>Mac默认挂载的时候不可写磁盘，这里我们需要重新挂载一次，但是在此之前，需要先取消挂载（等同于鼠标右键菜单中的推出，但是不要选择推出全部）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount &#x2F;dev&#x2F;disk2s4</span></pre></td></tr></table></figure>\n\n<p><img src=\"http://image.forest10.com/common/hexo/mac-ntfs-problem2.png\" alt=\"avatar\"></p>\n<h3 id=\"第四步：重新挂载\"><a href=\"#第四步：重新挂载\" class=\"headerlink\" title=\"第四步：重新挂载\"></a>第四步：重新挂载</h3><p>手动挂载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount_ntfs -o rw,nobrowse &#x2F;dev&#x2F;disk2s4 ~&#x2F;Desktop&#x2F;Windows</span></pre></td></tr></table></figure>\n<p>成功，磁盘可以正常读写了！！！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cklj7eyok000h3wzjesch36sr","category_id":"cklj7eyoh000e3wzjfev8djee","_id":"cklj7eyox000u3wzj0x5o9ua7"},{"post_id":"cklj7eyok000h3wzjesch36sr","category_id":"cklj7eyoo000l3wzjhgt983mj","_id":"cklj7eyp0000x3wzj6nhq7pfh"},{"post_id":"cklj7eyob00093wzj6z4ld980","category_id":"cklj7eyoh000e3wzjfev8djee","_id":"cklj7eyp200103wzj002v2imf"},{"post_id":"cklj7eyob00093wzj6z4ld980","category_id":"cklj7eyos000p3wzjavju9whw","_id":"cklj7eyp300113wzjc3o7ezag"},{"post_id":"cklj7eyol000i3wzj3lwkek0z","category_id":"cklj7eyoh000e3wzjfev8djee","_id":"cklj7eyp300123wzj25s53wta"},{"post_id":"cklj7eyol000i3wzj3lwkek0z","category_id":"cklj7eyos000p3wzjavju9whw","_id":"cklj7eyp400153wzjgun1045l"},{"post_id":"cklj7eyor000o3wzj4kq32vl5","category_id":"cklj7eyp1000z3wzjfbhid0ol","_id":"cklj7eyp7001c3wzjck9t9xv5"},{"post_id":"cklj7eyor000o3wzj4kq32vl5","category_id":"cklj7eyp400163wzj6mnsdsna","_id":"cklj7eyp8001e3wzj8o149wa2"}],"PostTag":[{"post_id":"cklj7eynr00003wzjc5lu67ks","tag_id":"cklj7eyo300043wzjh1hk2lr2","_id":"cklj7eyof000c3wzjbh1bg7sw"},{"post_id":"cklj7eyo000023wzjbfss7q72","tag_id":"cklj7eyod000a3wzj3w6p8wnx","_id":"cklj7eyou000q3wzjeyo3fh3f"},{"post_id":"cklj7eyo000023wzjbfss7q72","tag_id":"cklj7eyoj000g3wzj399xga01","_id":"cklj7eyow000s3wzjak0zcavw"},{"post_id":"cklj7eyo000023wzjbfss7q72","tag_id":"cklj7eyon000j3wzj08gk03u3","_id":"cklj7eyoy000w3wzjbyh79uqn"},{"post_id":"cklj7eyo600053wzjfl4hei40","tag_id":"cklj7eyor000n3wzj9x0403b6","_id":"cklj7eyp400143wzjc47q8wrb"},{"post_id":"cklj7eyo600053wzjfl4hei40","tag_id":"cklj7eyox000t3wzj4eb96gt6","_id":"cklj7eyp500173wzjhqe1h6yl"},{"post_id":"cklj7eyo600053wzjfl4hei40","tag_id":"cklj7eyp1000y3wzjd89obls4","_id":"cklj7eyp600193wzjbs2w3hgc"},{"post_id":"cklj7eyo900073wzjhtxf9tm0","tag_id":"cklj7eyor000n3wzj9x0403b6","_id":"cklj7eyp7001b3wzj7nfvf3as"},{"post_id":"cklj7eyo900073wzjhtxf9tm0","tag_id":"cklj7eyp500183wzjdtkd2iwn","_id":"cklj7eyp8001d3wzjdl4s1xra"},{"post_id":"cklj7eyob00093wzj6z4ld980","tag_id":"cklj7eyp6001a3wzjgu5i5tkf","_id":"cklj7eyp9001h3wzjerte0ymw"},{"post_id":"cklj7eyob00093wzj6z4ld980","tag_id":"cklj7eyp8001f3wzj1i94gbm8","_id":"cklj7eypa001i3wzj6e2714cb"},{"post_id":"cklj7eyog000d3wzj78vyfn9e","tag_id":"cklj7eyp9001g3wzj50go4ay1","_id":"cklj7eypb001l3wzj2rhjaf67"},{"post_id":"cklj7eyog000d3wzj78vyfn9e","tag_id":"cklj7eypa001j3wzj017b31el","_id":"cklj7eypc001m3wzjbjmc03zj"},{"post_id":"cklj7eyoi000f3wzj267h1b74","tag_id":"cklj7eyp9001g3wzj50go4ay1","_id":"cklj7eypd001p3wzja0ih1kzz"},{"post_id":"cklj7eyoi000f3wzj267h1b74","tag_id":"cklj7eypc001n3wzj61o03v9o","_id":"cklj7eype001q3wzj1dyt8yb6"},{"post_id":"cklj7eyok000h3wzjesch36sr","tag_id":"cklj7eypd001o3wzj1wrq57b5","_id":"cklj7eypf001t3wzj4mmi39qf"},{"post_id":"cklj7eyok000h3wzjesch36sr","tag_id":"cklj7eype001r3wzj4a00ghia","_id":"cklj7eypf001u3wzj2mp6gz4e"},{"post_id":"cklj7eyol000i3wzj3lwkek0z","tag_id":"cklj7eype001s3wzjg3e84wrj","_id":"cklj7eypi001z3wzj2bvqck5p"},{"post_id":"cklj7eyol000i3wzj3lwkek0z","tag_id":"cklj7eypf001v3wzjgqeve5a8","_id":"cklj7eypi00203wzjgin35inm"},{"post_id":"cklj7eyol000i3wzj3lwkek0z","tag_id":"cklj7eypg001w3wzjf6r20iz0","_id":"cklj7eypj00223wzjdm69bq77"},{"post_id":"cklj7eyol000i3wzj3lwkek0z","tag_id":"cklj7eyph001x3wzj0dxrc87h","_id":"cklj7eypj00233wzj7qfhe7x6"},{"post_id":"cklj7eyoo000k3wzjhjfkdxae","tag_id":"cklj7eypi001y3wzj0zh9dsk0","_id":"cklj7eypu00253wzj6p2vglvz"},{"post_id":"cklj7eyop000m3wzjfoda8v4o","tag_id":"cklj7eyp9001g3wzj50go4ay1","_id":"cklj7eypw00283wzjhsac0636"},{"post_id":"cklj7eyop000m3wzjfoda8v4o","tag_id":"cklj7eypc001n3wzj61o03v9o","_id":"cklj7eypx00293wzj5mqd5rbu"},{"post_id":"cklj7eyop000m3wzjfoda8v4o","tag_id":"cklj7eypv00263wzjctk6b6bv","_id":"cklj7eypy002b3wzjcvpv6rdy"},{"post_id":"cklj7eyor000o3wzj4kq32vl5","tag_id":"cklj7eypw00273wzj6xbucwp2","_id":"cklj7eypz002c3wzj59dl4lgu"},{"post_id":"cklj7eyov000r3wzjc26f7okz","tag_id":"cklj7eypx002a3wzja1h39t1k","_id":"cklj7eyq0002d3wzjeufa3b5a"}],"Tag":[{"name":"JVM","_id":"cklj7eyo300043wzjh1hk2lr2"},{"name":"LINUX","_id":"cklj7eyod000a3wzj3w6p8wnx"},{"name":"TOMCAT","_id":"cklj7eyoj000g3wzj399xga01"},{"name":"APR","_id":"cklj7eyon000j3wzj08gk03u3"},{"name":"Spring","_id":"cklj7eyor000n3wzj9x0403b6"},{"name":"AOP","_id":"cklj7eyox000t3wzj4eb96gt6"},{"name":"trick","_id":"cklj7eyp1000y3wzjd89obls4"},{"name":"SpringBoot","_id":"cklj7eyp500183wzjdtkd2iwn"},{"name":"ci","_id":"cklj7eyp6001a3wzjgu5i5tkf"},{"name":"jenkins","_id":"cklj7eyp8001f3wzj1i94gbm8"},{"name":"backend","_id":"cklj7eyp9001g3wzj50go4ay1"},{"name":"Mysql","_id":"cklj7eypa001j3wzj017b31el"},{"name":"Nginx","_id":"cklj7eypc001n3wzj61o03v9o"},{"name":"vpn","_id":"cklj7eypd001o3wzj1wrq57b5"},{"name":"google","_id":"cklj7eype001r3wzj4a00ghia"},{"name":"gitee","_id":"cklj7eype001s3wzjg3e84wrj"},{"name":"oschina","_id":"cklj7eypf001v3wzjgqeve5a8"},{"name":"github","_id":"cklj7eypg001w3wzjf6r20iz0"},{"name":"travis-ci","_id":"cklj7eyph001x3wzj0dxrc87h"},{"name":"develop","_id":"cklj7eypi001y3wzj0zh9dsk0"},{"name":"App-Store","_id":"cklj7eypv00263wzjctk6b6bv"},{"name":"mysql","_id":"cklj7eypw00273wzj6xbucwp2"},{"name":"MAC,NTFS","_id":"cklj7eypx002a3wzja1h39t1k"}]}}